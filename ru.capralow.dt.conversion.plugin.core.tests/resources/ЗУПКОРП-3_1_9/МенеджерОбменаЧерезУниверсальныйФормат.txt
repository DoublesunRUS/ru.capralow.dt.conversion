// Конвертация ЗУП3.1.3 от 21.08.2017 13:05:35
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	ПередКонвертациейЗУП30(КомпонентыОбмена);
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Число - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_ВедомостьНаВыплатуЗПВКассу(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВедомостьНаВыплатуЗППеречислением(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВедомостьНаВыплатуЗПРаздатчиком(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ДоговорЗаймаСотруднику_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_НачислениеОценочныхОбязательствПоОтпускам(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтражениеЗарплатыВБухучете_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатежноеПоручение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчетаКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыРаботСотрудников_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЗППроекты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Подразделения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_РегистрацииВНалоговомОргане_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпособыОтраженияЗарплатыВБухУчете_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_ДанныеДляРасчетаЗарплаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыРаботСотрудников_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыРаботСотрудниковГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Подразделения_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_РегистрацииВНалоговомОргане_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпособыОтраженияЗарплатыВБухУчете_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область Документ_ВедомостьНаВыплатуЗПВКассу
Процедура ДобавитьПОД_Документ_ВедомостьНаВыплатуЗПВКассу(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВедомостьНаВыплатуЗПВКассу";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВКассу;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВедомостьНаВыплатуЗПВКассу_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьНаВыплатуЗПВКассу");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьНаВыплатуЗПВКассу_НДФЛ");
КонецПроцедуры

Процедура ПОД_Документ_ВедомостьНаВыплатуЗПВКассу_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ДанныеВедомостиПоНДФЛ = Новый Структура;
	ЗаполнитьРасшифровкуПлатежаПоВедомости_НДФЛ(ДанныеИБ, ДанныеВедомостиПоНДФЛ);
	
	РасшифровкаНДФЛ = ДанныеВедомостиПоНДФЛ.РасшифровкаПлатежа;
	Если РасшифровкаНДФЛ.Количество() = 0
		Или РасшифровкаНДФЛ.Итог("Сумма") = 0 Тогда
		ИспользованиеПКО.Документ_ВедомостьНаВыплатуЗПВКассу_НДФЛ = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВедомостьНаВыплатуЗППеречислением
Процедура ДобавитьПОД_Документ_ВедомостьНаВыплатуЗППеречислением(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВедомостьНаВыплатуЗППеречислением";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыПеречислением;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВедомостьНаВыплатуЗППеречислением_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьНаВыплатуЗППеречислением");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьНаВыплатуЗППеречислением_НДФЛ");
КонецПроцедуры

Процедура ПОД_Документ_ВедомостьНаВыплатуЗППеречислением_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ДанныеВедомостиПоНДФЛ = Новый Структура;
	ЗаполнитьРасшифровкуПлатежаПоВедомости_НДФЛ(ДанныеИБ, ДанныеВедомостиПоНДФЛ);
	
	РасшифровкаНДФЛ = ДанныеВедомостиПоНДФЛ.РасшифровкаПлатежа;
	Если РасшифровкаНДФЛ.Количество() = 0
		Или РасшифровкаНДФЛ.Итог("Сумма") = 0 Тогда
		ИспользованиеПКО.Документ_ВедомостьНаВыплатуЗППеречислением_НДФЛ = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВедомостьНаВыплатуЗПРаздатчиком
Процедура ДобавитьПОД_Документ_ВедомостьНаВыплатуЗПРаздатчиком(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВедомостьНаВыплатуЗПРаздатчиком";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВедомостьНаВыплатуЗПРаздатчиком_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьНаВыплатуЗПРаздатчиком");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьНаВыплатуЗПРаздатчиком_НДФЛ");
КонецПроцедуры

Процедура ПОД_Документ_ВедомостьНаВыплатуЗПРаздатчиком_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ДанныеВедомостиПоНДФЛ = Новый Структура;
	ЗаполнитьРасшифровкуПлатежаПоВедомости_НДФЛ(ДанныеИБ, ДанныеВедомостиПоНДФЛ);
	
	РасшифровкаНДФЛ = ДанныеВедомостиПоНДФЛ.РасшифровкаПлатежа;
	Если РасшифровкаНДФЛ.Количество() = 0
		Или РасшифровкаНДФЛ.Итог("Сумма") = 0 Тогда
		ИспользованиеПКО.Документ_ВедомостьНаВыплатуЗПРаздатчиком_НДФЛ = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ДоговорЗаймаСотруднику_Отправка
Процедура ДобавитьПОД_Документ_ДоговорЗаймаСотруднику_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ДоговорЗаймаСотруднику_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ДоговорЗаймаСотруднику;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ДоговорЗаймаСотруднику_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ДоговорЗаймаСотруднику_ИзСтруктуры");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ДоговорЗаймаСотруднику");
КонецПроцедуры

Процедура ПОД_Документ_ДоговорЗаймаСотруднику_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ДоговорЗаймаСотруднику = Ложь;
	ИспользованиеПКО.Документ_ДоговорЗаймаСотруднику_ИзСтруктуры = Ложь;
КонецПроцедуры
#КонецОбласти
#Область Документ_НачислениеОценочныхОбязательствПоОтпускам
Процедура ДобавитьПОД_Документ_НачислениеОценочныхОбязательствПоОтпускам(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_НачислениеОценочныхОбязательствПоОтпускам";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.НачислениеОценочныхОбязательствПоОтпускам;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_НачислениеОценочныхОбязательствПоОтпускам");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтражениеЗарплатыВБухучете_Отправка
Процедура ДобавитьПОД_Документ_ОтражениеЗарплатыВБухучете_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтражениеЗарплатыВБухучете_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтражениеЗарплатыВБухучете;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтражениеЗарплатыВБухучете");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПлатежноеПоручение
Процедура ДобавитьПОД_Документ_ПлатежноеПоручение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПлатежноеПоручение";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежноеПоручение;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПлатежноеПоручение_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатежноеПоручение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатежноеПоручение_НДФЛ");
КонецПроцедуры

Процедура ПОД_Документ_ПлатежноеПоручение_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ДанныеПоНДФЛ = Новый Структура;
	ЗаполнитьРасшифровкуПлатежаПоПлатежноеПоручение_НДФЛ(ДанныеИБ, ДанныеПоНДФЛ);
	
	РасшифровкаНДФЛ = ДанныеПоНДФЛ.РасшифровкаПлатежа;
	Если РасшифровкаНДФЛ.Количество() = 0
		Или РасшифровкаНДФЛ.Итог("Сумма") = 0 Тогда
		ИспользованиеПКО.Документ_ПлатежноеПоручение_НДФЛ = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Отправка
Процедура ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторБанков;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Банки_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры

Процедура ПОД_Справочник_Банки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ДанныеИБ = Неопределено
		И ДанныеИБ.ЭтоГруппа Тогда	
		ИспользованиеПКО.Справочник_Банки = Ложь;	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаКонтрагентов_Отправка
Процедура ДобавитьПОД_Справочник_БанковскиеСчетаКонтрагентов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчетаКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчетаКонтрагентов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчетаКонтрагентов");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыРаботСотрудников_Отправка
Процедура ДобавитьПОД_Справочник_ВидыРаботСотрудников_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыРаботСотрудников_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыРаботСотрудников;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ВидыРаботСотрудников_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыРаботСотрудников");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыРаботСотрудниковГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_ВидыРаботСотрудников_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ВидыРаботСотрудников		= Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_ВидыРаботСотрудниковГруппа	= ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДокументыФизическихЛиц_Отправка
Процедура ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДокументыФизическихЛиц_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДокументыФизическихЛиц_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ДокументыФизическихЛиц")
		И ИспользованиеПКО.Свойство("Справочник_ДокументыФизическихЛиц_Отправка") Тогда
		ИспользованиеПКО.Удалить("Справочник_ДокументыФизическихЛиц_Отправка");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЗППроекты_Отправка
Процедура ДобавитьПОД_Справочник_ЗППроекты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЗППроекты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЗарплатныеПроекты;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗППроекты_КакБанковскиеСчета");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗППроекты_КакКонтрагенты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Отправка
Процедура ДобавитьПОД_Справочник_Подразделения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Подразделения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтруктураПредприятия;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Отправка
Процедура ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Пользователи;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры
#КонецОбласти
#Область Справочник_РегистрацииВНалоговомОргане_Отправка
Процедура ДобавитьПОД_Справочник_РегистрацииВНалоговомОргане_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_РегистрацииВНалоговомОргане_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.РегистрацииВНалоговомОргане;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_РегистрацииВНалоговомОргане_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_РегистрацииВНалоговомОргане");
КонецПроцедуры

Процедура ПОД_Справочник_РегистрацииВНалоговомОргане_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(ДанныеИБ.Владелец)
		Или Не ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.Владелец)
		Или Не ЗначениеЗаполнено(ДанныеИБ.Код)
		Или (Не ЗначениеЗаполнено(ДанныеИБ.НаименованиеОбособленногоПодразделения)
			И Не ЗначениеЗаполнено(ДанныеИБ.НаименованиеИФНС)) Тогда
		
		ИспользованиеПКО.Справочник_РегистрацииВНалоговомОргане = Ложь;
		ШаблонПредупреждения = НСтр("ru = 'Регистрация в налоговом органе %1 не может быть выгружена,
		|т.к. в ней имеются незаполненные обязательные реквизиты.'");
		
		ТекстПредупреждения = СтрШаблон(ШаблонПредупреждения, ДанныеИБ.Ссылка);
		
		КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями; 
		ОбменДаннымиXDTOСервер.ЗаписатьВПротоколВыполнения(
			КомпонентыОбмена, ТекстПредупреждения,,	Ложь,,,);
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпособыОтраженияЗарплатыВБухУчете_Отправка
Процедура ДобавитьПОД_Справочник_СпособыОтраженияЗарплатыВБухУчете_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СпособыОтраженияЗарплатыВБухУчете_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СпособыОтраженияЗарплатыВБухУчете;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СпособыОтраженияЗарплатыВБухУчете_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпособыОтраженияЗарплатыВБухУчете");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_СпособыОтраженияЗарплатыВБухУчете_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_СпособыОтраженияЗарплатыВБухУчете		= Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа	= ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ФизическиеЛица;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ФизическиеЛицаГруппа_Отправка = (ДанныеИБ.ЭтоГруппа);
	ИспользованиеПКО.Справочник_ФизическиеЛица_Отправка = НЕ (ДанныеИБ.ЭтоГруппа);
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_ДанныеДляРасчетаЗарплаты_Получение
Процедура ДобавитьПОД_Документ_ДанныеДляРасчетаЗарплаты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ДанныеДляРасчетаЗарплаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВыработкаСотрудников";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ДанныеДляРасчетаЗарплаты_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ДанныеДляРасчетаЗарплаты_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ДанныеДляРасчетаЗарплаты_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ВидДокумента = ВидДокументаСдельныеРаботы(КомпонентыОбмена, Справочники.Организации.ПустаяСсылка());
	Если ВидДокумента.Пустая() Тогда
		// Не введено ни одного шаблона для ввода данных по сдельным работам.
		ИспользованиеПКО.Документ_ДанныеДляРасчетаЗарплаты_Получение = Ложь;
		
		ТекстПредупреждения = НСтр("ru = 'Данные для расчета зарплаты (выработка сотрудников) не могут быть загружены,
		|т.к. в справочнике ""Шаблоны ввода исходных данных"" нет ни одного элемента, соответствующего сдельным работам.'");
		
		КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями; 
		ОбменДаннымиXDTOСервер.ЗаписатьВПротоколВыполнения(КомпонентыОбмена, ТекстПредупреждения, , Ложь, , , );
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыССотрудниками");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыССотрудниками");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_РКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыССотрудниками");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Получение
Процедура ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Банки";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Банки_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанкиГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Банки_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_БанкиГруппа = Ложь;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыРаботСотрудников_Получение
Процедура ДобавитьПОД_Справочник_ВидыРаботСотрудников_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыРаботСотрудников_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ВидыРаботСотрудников";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыРаботСотрудников");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыРаботСотрудниковГруппа_Получение
Процедура ДобавитьПОД_Справочник_ВидыРаботСотрудниковГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыРаботСотрудниковГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ВидыРаботСотрудниковГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыРаботСотрудниковГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДокументыФизическихЛиц_Получение
Процедура ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДокументыФизическихЛиц_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ДокументыФизическихЛиц";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ДокументыФизическихЛиц_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_Справочник_ДокументыФизическихЛиц_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	СвойстваОтбор = ДанныеXDTO;
	
	Если ДанныеXDTO.Свойство("КлючевыеСвойства") Тогда
		СвойстваОтбор = ДанныеXDTO.КлючевыеСвойства;
	КонецЕсли;
	
	ФизическоеЛицоОтбор = Неопределено;
	ВидДокументаОтбор   = Неопределено;
	ПериодОтбор         = Неопределено;
	
	СвойстваОтбор.Свойство("ФизическоеЛицоОтбор", ФизическоеЛицоОтбор);
	СвойстваОтбор.Свойство("ВидДокументаОтбор",   ВидДокументаОтбор);
	СвойстваОтбор.Свойство("ПериодОтбор",         ПериодОтбор);
	
	ПравилоКонвертацииФизическиеЛица = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ФизическиеЛица_Получение");
	ПравилоКонвертацииВидыДокументов = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ВидыДокументовФизическихЛиц");
	
	ДокументыФЛ = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
	Если ЗначениеЗаполнено(ФизическоеЛицоОтбор) Тогда
		ДокументыФЛ.Отбор.Физлицо.Установить(ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена, ФизическоеЛицоОтбор, ПравилоКонвертацииФизическиеЛица, "ПолучитьСсылку").Ссылка);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВидДокументаОтбор) Тогда
		ДокументыФЛ.Отбор.ВидДокумента.Установить(ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена, ВидДокументаОтбор, ПравилоКонвертацииВидыДокументов, "ПолучитьСсылку").Ссылка);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПериодОтбор) Тогда
		ДокументыФЛ.Отбор.Период.Установить(ПериодОтбор);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументыФЛ.Отбор.Физлицо.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Записи")
		И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
	
		Для Каждого СтрокаЗаписи Из ДанныеXDTO.Записи Цикл
			ЗаписьДокументыФЛ = ДокументыФЛ.Добавить();
			
			Если Не ЗначениеЗаполнено(ДокументыФЛ.Отбор.Физлицо.Значение) Тогда
				ЗаписьДокументыФЛ.Физлицо = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
					КомпонентыОбмена, СтрокаЗаписи.ФизическоеЛицо, ПравилоКонвертацииФизическиеЛица, "ПолучитьСсылку").Ссылка;
			Иначе
				ЗаписьДокументыФЛ.Физлицо = ДокументыФЛ.Отбор.Физлицо.Значение;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументыФЛ.Отбор.ВидДокумента.Значение) Тогда
				ЗаписьДокументыФЛ.ВидДокумента = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
					КомпонентыОбмена, СтрокаЗаписи.ВидДокумента, ПравилоКонвертацииВидыДокументов, "ПолучитьСсылку").Ссылка;
			Иначе
				ЗаписьДокументыФЛ.ВидДокумента = ДокументыФЛ.Отбор.ВидДокумента.Значение;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументыФЛ.Отбор.Период.Значение) Тогда
				ЗаписьДокументыФЛ.Период = СтрокаЗаписи.Период;
			Иначе
				ЗаписьДокументыФЛ.Период = ДокументыФЛ.Отбор.Период.Значение;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ЗаписьДокументыФЛ, СтрокаЗаписи, "Серия, Номер, ДатаВыдачи, СрокДействия, КемВыдан, КодПодразделения, Представление");
			
			ЗаписьДокументыФЛ.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	ДокументыФЛ.ОбменДанными.Загрузка = Истина;
	ДокументыФЛ.Записать(Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Получение
Процедура ДобавитьПОД_Справочник_Подразделения_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Подразделения_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Подразделения";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Получение
Процедура ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Пользователи";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры
#КонецОбласти
#Область Справочник_РегистрацииВНалоговомОргане_Получение
Процедура ДобавитьПОД_Справочник_РегистрацииВНалоговомОргане_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_РегистрацииВНалоговомОргане_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.РегистрацииВНалоговомОргане";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_РегистрацииВНалоговомОргане");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпособыОтраженияЗарплатыВБухУчете_Получение
Процедура ДобавитьПОД_Справочник_СпособыОтраженияЗарплатыВБухУчете_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СпособыОтраженияЗарплатыВБухУчете_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СпособыОтраженияЗарплатыВФинансовомУчете";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпособыОтраженияЗарплатыВБухУчете");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа_Получение
Процедура ДобавитьПОД_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СпособыОтраженияЗарплатыВФинансовомУчетеГруппа";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	СтрокаПКО = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти("Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа", "ИмяПКО");
	
	Если СтрокаПКО = Неопределено Тогда
		ИспользованиеПКО.Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа = Ложь;
	Иначе
		ИспользованиеПКО.Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа = СтрокаПКО.ОбъектДанных.Иерархический;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Получение
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛица";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа_Получение
Процедура ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛицаГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛицаГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа_Отправка");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_ВедомостьНаВыплатуЗПВКассу(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьНаВыплатуЗПВКассу_НДФЛ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьНаВыплатуЗППеречислением(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьНаВыплатуЗППеречислением_НДФЛ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьНаВыплатуЗПРаздатчиком(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьНаВыплатуЗПРаздатчиком_НДФЛ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ДоговорЗаймаСотруднику(ПравилаКонвертации);
		ДобавитьПКО_Документ_ДоговорЗаймаСотруднику_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Документ_НачислениеОценочныхОбязательствПоОтпускам(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтражениеЗарплатыВБухучете(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатежноеПоручение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатежноеПоручение_НДФЛ(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчетаКонтрагентов(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЗППроекты_КакБанковскиеСчета(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЗППроекты_КакКонтрагенты(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Документ_ДанныеДляРасчетаЗарплаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыССотрудниками(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыССотрудниками(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_Банки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_БанкиГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ВидыРаботСотрудников(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ВидыРаботСотрудниковГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации);
	ДобавитьПКО_Справочник_РегистрацииВНалоговомОргане(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СпособыОтраженияЗарплатыВБухУчете(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ФизическиеЛицаГруппа_Отправка(ПравилаКонвертации);
КонецПроцедуры

Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

#Область Отправка
#Область Документ_ВедомостьНаВыплатуЗПВКассу
Процедура ДобавитьПКО_Документ_ВедомостьНаВыплатуЗПВКассу(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьНаВыплатуЗПВКассу";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВКассу;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаРасходДСВыплатаЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьНаВыплатуЗПВКассу_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",             "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",             "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",            "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",      "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаПоДокументу", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                 "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыБезналичные", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыНаличные", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыПлатежнаяКарта", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "Подразделение", 1, "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                 "Статус", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "УтвержденнаяФормаОплаты", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВедомостьНаВыплатуЗПВКассу_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Статус, Валюта
	ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO);
	
	//Подразделение
	Подразделение = УправленческоеПодразделениеВедомостиНаВыплатуЗП(ДанныеИБ);
	ДанныеXDTO.Вставить("Подразделение", ЗначениеВИнструкциюПКО(КомпонентыОбмена, Подразделение));
	
	// ЖелательнаяФормаОплатыНаличные, ЖелательнаяФормаОплатыБезналичные, ЖелательнаяФормаОплатыПлатежнаяКарта, УтвержденнаяФормаОплаты.
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыНаличные", Истина);
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыБезналичные", Ложь);
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыПлатежнаяКарта", Ложь);
	ДанныеXDTO.Вставить("УтвержденнаяФормаОплаты", "Наличная");
	
	// РасшифровкаПлатежа: Сумма, НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты.
	ЗаполнитьРасшифровкуПлатежаПоВедомости(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВедомостьНаВыплатуЗПВКассу_НДФЛ
Процедура ДобавитьПКО_Документ_ВедомостьНаВыплатуЗПВКассу_НДФЛ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьНаВыплатуЗПВКассу_НДФЛ";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВКассу;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаПереводДСВБюджет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьНаВыплатуЗПВКассу_НДФЛ_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",          "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",          "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",              "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1, "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Статус", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВедомостьНаВыплатуЗПВКассу_НДФЛ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Статус, Валюта.
	ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO);
	
	Подразделение = УправленческоеПодразделениеВедомостиНаВыплатуЗП(ДанныеИБ, Истина);
	ДанныеXDTO.Вставить("Подразделение", ЗначениеВИнструкциюПКО(КомпонентыОбмена, Подразделение));
	
	// РасшифровкаПлатежа: Сумма.
	ЗаполнитьРасшифровкуПлатежаПоВедомости_НДФЛ(ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Сумма", ДанныеXDTO.РасшифровкаПлатежа.Итог("Сумма"));
КонецПроцедуры
#КонецОбласти
#Область Документ_ВедомостьНаВыплатуЗППеречислением
Процедура ДобавитьПКО_Документ_ВедомостьНаВыплатуЗППеречислением(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьНаВыплатуЗППеречислением";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыПеречислением;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаРасходДСВыплатаЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьНаВыплатуЗППеречислением_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",             "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",             "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",            "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",      "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаПоДокументу", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                 "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыБезналичные", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыНаличные", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыПлатежнаяКарта", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "Подразделение", 1, "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                 "Статус", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "УтвержденнаяФормаОплаты", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "БанковскийСчет", 1,"Справочник_БанковскиеСчетаКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сотрудник", 1,"Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВедомостьНаВыплатуЗППеречислением_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Статус, Валюта
	ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO);
	
	//Подразделение
	Подразделение = УправленческоеПодразделениеВедомостиНаВыплатуЗП(ДанныеИБ);
	ДанныеXDTO.Вставить("Подразделение", ЗначениеВИнструкциюПКО(КомпонентыОбмена, Подразделение));
	
	// ЖелательнаяФормаОплатыНаличные, ЖелательнаяФормаОплатыБезналичные, ЖелательнаяФормаОплатыПлатежнаяКарта, УтвержденнаяФормаОплаты.
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыНаличные", Ложь);
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыБезналичные", Истина);
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыПлатежнаяКарта", Ложь);
	ДанныеXDTO.Вставить("УтвержденнаяФормаОплаты", "Безналичная");
	
	// РасшифровкаПлатежа: Сотрудник, БанковскийСчет, Сумма, НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты.
	ЗаполнитьРасшифровкуПлатежаПоВедомости(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВедомостьНаВыплатуЗППеречислением_НДФЛ
Процедура ДобавитьПКО_Документ_ВедомостьНаВыплатуЗППеречислением_НДФЛ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьНаВыплатуЗППеречислением_НДФЛ";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыПеречислением;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаПереводДСВБюджет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьНаВыплатуЗППеречислением_НДФЛ_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",          "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",          "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",              "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1, "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Статус", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВедомостьНаВыплатуЗППеречислением_НДФЛ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Статус, Валюта
	ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO);
	
	//Подразделение
	Подразделение = УправленческоеПодразделениеВедомостиНаВыплатуЗП(ДанныеИБ, Истина);
	ДанныеXDTO.Вставить("Подразделение", ЗначениеВИнструкциюПКО(КомпонентыОбмена, Подразделение));
	
	//Сумма
	// РасшифровкаПлатежа: Сумма
	ЗаполнитьРасшифровкуПлатежаПоВедомости_НДФЛ(ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Сумма", ДанныеXDTO.РасшифровкаПлатежа.Итог("Сумма"));
КонецПроцедуры
#КонецОбласти
#Область Документ_ВедомостьНаВыплатуЗПРаздатчиком
Процедура ДобавитьПКО_Документ_ВедомостьНаВыплатуЗПРаздатчиком(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьНаВыплатуЗПРаздатчиком";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаРасходДСВыплатаЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьНаВыплатуЗПРаздатчиком_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",             "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",             "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",            "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",      "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаПоДокументу", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                 "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыБезналичные", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыНаличные", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыПлатежнаяКарта", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "Статус", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "УтвержденнаяФормаОплаты", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВедомостьНаВыплатуЗПРаздатчиком_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Статус, Валюта
	ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO);
	
	//Подразделение
	Подразделение = УправленческоеПодразделениеВедомостиНаВыплатуЗП(ДанныеИБ);
	ДанныеXDTO.Вставить("Подразделение", ЗначениеВИнструкциюПКО(КомпонентыОбмена, Подразделение));
	
	// ЖелательнаяФормаОплатыНаличные, ЖелательнаяФормаОплатыБезналичные, ЖелательнаяФормаОплатыПлатежнаяКарта, УтвержденнаяФормаОплаты.
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыНаличные", Истина);
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыБезналичные", Ложь);
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыПлатежнаяКарта", Ложь);
	ДанныеXDTO.Вставить("УтвержденнаяФормаОплаты", "Наличная");
	
	// РасшифровкаПлатежа: Сумма, НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты.
	ЗаполнитьРасшифровкуПлатежаПоВедомости(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВедомостьНаВыплатуЗПРаздатчиком_НДФЛ
Процедура ДобавитьПКО_Документ_ВедомостьНаВыплатуЗПРаздатчиком_НДФЛ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьНаВыплатуЗПРаздатчиком_НДФЛ";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаПереводДСВБюджет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьНаВыплатуЗПРаздатчиком_НДФЛ_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",          "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",          "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",              "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1, "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Статус", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВедомостьНаВыплатуЗПРаздатчиком_НДФЛ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Статус, Валюта
	ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO);
	
	//Подразделение
	Подразделение = УправленческоеПодразделениеВедомостиНаВыплатуЗП(ДанныеИБ, Истина);
	ДанныеXDTO.Вставить("Подразделение", ЗначениеВИнструкциюПКО(КомпонентыОбмена, Подразделение));
	
	//Сумма
	// РасшифровкаПлатежа: Сумма
	ЗаполнитьРасшифровкуПлатежаПоВедомости_НДФЛ(ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Сумма", ДанныеXDTO.РасшифровкаПлатежа.Итог("Сумма"));
КонецПроцедуры
#КонецОбласти
#Область Документ_ДоговорЗаймаСотруднику
Процедура ДобавитьПКО_Документ_ДоговорЗаймаСотруднику(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ДоговорЗаймаСотруднику";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ДоговорЗаймаСотруднику;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаРасходДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ДоговорЗаймаСотруднику_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Сумма",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФизическоеЛицо", "Сотрудник", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",               "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",               "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",               "ЖелательнаяФормаОплатыБезналичные", 1);
	ДобавитьПКС(СвойстваШапки, "",               "ЖелательнаяФормаОплатыНаличные", 1);
	ДобавитьПКС(СвойстваШапки, "",               "ЖелательнаяФормаОплатыПлатежнаяКарта", 1);
	ДобавитьПКС(СвойстваШапки, "",               "КрайнийСрокПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Подразделение", 1, "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",               "Статус", 1);
	ДобавитьПКС(СвойстваШапки, "",               "УтвержденнаяДатаПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "",               "УтвержденнаяФормаОплаты", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ДоговорЗаймаСотруднику_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Статус, Валюта, ВидРасчетов
	ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO);
	ДанныеXDTO.Вставить("ВидРасчетов", "Займы");
	
	//Сумма(расшифровка)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоговорЗаймаСотруднику.Сумма КАК Сумма
	|ИЗ
	|	Документ.ДоговорЗаймаСотруднику КАК ДоговорЗаймаСотруднику
	|ГДЕ
	|	ДоговорЗаймаСотруднику.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ДоговорЗаймаСотруднику_ИзСтруктуры
Процедура ДобавитьПКО_Документ_ДоговорЗаймаСотруднику_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ДоговорЗаймаСотруднику_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаРасходДСРасчетыССотрудниками";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Автор", 1, "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "", "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "", "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "ЖелательнаяФормаОплатыБезналичные", 1);
	ДобавитьПКС(СвойстваШапки, "", "ЖелательнаяФормаОплатыНаличные", 1);
	ДобавитьПКС(СвойстваШапки, "", "ЖелательнаяФормаОплатыПлатежнаяКарта", 1);
	ДобавитьПКС(СвойстваШапки, "", "КрайнийСрокПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "", "КтоЗаявил", 1, "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "", "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Подразделение", 1, "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Сотрудник", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Статус", 1);
	ДобавитьПКС(СвойстваШапки, "", "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "", "УтвержденнаяДатаПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "", "УтвержденнаяФормаОплаты", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры
#КонецОбласти
#Область Документ_НачислениеОценочныхОбязательствПоОтпускам
Процедура ДобавитьПКО_Документ_НачислениеОценочныхОбязательствПоОтпускам(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_НачислениеОценочныхОбязательствПоОтпускам";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.НачислениеОценочныхОбязательствПоОтпускам;
	ПравилоКонвертации.ОбъектФормата     = "Документ.НачислениеОценочныхОбязательствПоОтпускам";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_НачислениеОценочныхОбязательствПоОтпускам_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоляРасходов",              "ДоляРасходов");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КорректировкаОбязательств", "КорректировкаОбязательств");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПериодРегистрации",         "ПериодРегистрации");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОценочныеОбязательства");
	ДобавитьПКС(СвойстваТЧ, "", "ОблагаетсяЕНВД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Подразделение", 1,"Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СпособОтраженияЗарплатыВФинансовомУчете", 1,"Справочник_СпособыОтраженияЗарплатыВБухУчете");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРезерва", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРезерваНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРезерваСтраховыхВзносов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРезерваСтраховыхВзносовНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРезерваФССНесчастныеСлучаи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРезерваФССНесчастныеСлучаиНУ", 1);

КонецПроцедуры

Процедура ПКО_Документ_НачислениеОценочныхОбязательствПоОтпускам_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОценочныеОбязательства.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ОценочныеОбязательства.МестоВСтруктуреПредприятия КАК ПодразделениеПредприятия,
	|	ОценочныеОбязательства.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВФинансовомУчете,
	|	ОценочныеОбязательства.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ОценочныеОбязательства.СуммаРезерва КАК СуммаРезерва,
	|	ОценочныеОбязательства.СуммаРезерваНУ КАК СуммаРезерваНУ,
	|	ОценочныеОбязательства.СуммаРезерваСтраховыхВзносов КАК СуммаРезерваСтраховыхВзносов,
	|	ОценочныеОбязательства.СуммаРезерваСтраховыхВзносовНУ КАК СуммаРезерваСтраховыхВзносовНУ,
	|	ОценочныеОбязательства.СуммаРезерваФССНесчастныеСлучаи КАК СуммаРезерваФССНесчастныеСлучаи,
	|	ОценочныеОбязательства.СуммаРезерваФССНесчастныеСлучаиНУ КАК СуммаРезерваФССНесчастныеСлучаиНУ
	|ИЗ
	|	Документ.НачислениеОценочныхОбязательствПоОтпускам.ОценочныеОбязательства КАК ОценочныеОбязательства
	|ГДЕ
	|	ОценочныеОбязательства.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ОценочныеОбязательства = Запрос.Выполнить().Выгрузить();
	ОценочныеОбязательства.Колонки.Добавить("Подразделение");
	ЗаполнитьПодразделениеПоУмолчанию(ОценочныеОбязательства);
	ДанныеXDTO.Вставить("ОценочныеОбязательства", ОценочныеОбязательства);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтражениеЗарплатыВБухучете
Процедура ДобавитьПКО_Документ_ОтражениеЗарплатыВБухучете(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтражениеЗарплатыВБухучете";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтражениеЗарплатыВБухучете;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтражениеЗарплатыВФинансовомУчете";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтражениеЗарплатыВБухучете_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",              "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",       "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",             "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",       "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",     "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПериодРегистрации", "ПериодРегистрации");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "НачисленнаяЗарплатаИВзносы");
	ДобавитьПКС(СвойстваТЧ, "", "ВидНачисленияОплатыТрудаДляНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ВидОперации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ОблагаетсяЕНВД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Подразделение", 1,"Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПФРДоПредельнойВеличины", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРНаДоплатуЛетчикам", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРНаДоплатуШахтерам", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРНакопительная", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРПоСуммарномуТарифу", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРСПревышения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРСтраховая", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособОтраженияЗарплатыВФинансовомУчете", 1,"Справочник_СпособыОтраженияЗарплатыВБухУчете");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТФОМС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФСС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФССНесчастныеСлучаи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФФОМС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "НачисленныйНДФЛ");
	ДобавитьПКС(СвойстваТЧ, "", "ВидОперации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Подразделение", 1,"Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РегистрацияВНалоговомОргане", 1,"Справочник_РегистрацииВНалоговомОргане");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "УдержаннаяЗарплата");
	ДобавитьПКС(СвойстваТЧ, "", "ВидОперации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты");
	ДобавитьПКС(СвойстваТЧ, "", "Подразделение", 1,"Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ПКО_Документ_ОтражениеЗарплатыВБухучете_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НачисленнаяЗарплатаИВзносы.МестоВСтруктуреПредприятия КАК ПодразделениеПредприятия,
	|	НачисленнаяЗарплатаИВзносы.ВидОперации КАК ВидОперацииСсылка,
	|	НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВФинансовомУчете,
	|	НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	НачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ КАК ВидНачисленияОплатыТрудаДляНУСсылка,
	|	СУММА(НачисленнаяЗарплатаИВзносы.Сумма) КАК Сумма,
	|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРПоСуммарномуТарифу) КАК ПФРПоСуммарномуТарифу,
	|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРДоПредельнойВеличины) КАК ПФРДоПредельнойВеличины,
	|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРСПревышения) КАК ПФРСПревышения,
	|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРСтраховая) КАК ПФРСтраховая,
	|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРНакопительная) КАК ПФРНакопительная,
	|	СУММА(НачисленнаяЗарплатаИВзносы.ФСС) КАК ФСС,
	|	СУММА(НачисленнаяЗарплатаИВзносы.ФФОМС) КАК ФФОМС,
	|	СУММА(НачисленнаяЗарплатаИВзносы.ТФОМС) КАК ТФОМС,
	|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРНаДоплатуЛетчикам) КАК ПФРНаДоплатуЛетчикам,
	|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРНаДоплатуШахтерам) КАК ПФРНаДоплатуШахтерам,
	|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	СУММА(НачисленнаяЗарплатаИВзносы.ФССНесчастныеСлучаи) КАК ФССНесчастныеСлучаи,
	|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки,
	|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка,
	|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки,
	|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка
	|ИЗ
	|	Документ.ОтражениеЗарплатыВБухучете.НачисленнаяЗарплатаИВзносы КАК НачисленнаяЗарплатаИВзносы
	|ГДЕ
	|	НачисленнаяЗарплатаИВзносы.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленнаяЗарплатаИВзносы.МестоВСтруктуреПредприятия,
	|	НачисленнаяЗарплатаИВзносы.ВидОперации,
	|	НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете,
	|	НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД,
	|	НачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПодразделениеПредприятия,
	|	ВидОперацииСсылка,
	|	НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете,
	|	ОблагаетсяЕНВД,
	|	ВидНачисленияОплатыТрудаДляНУСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленныйНДФЛ.ВидОперации КАК ВидОперацииСсылка,
	|	НачисленныйНДФЛ.КодПоОКАТО КАК КодПоОКАТО,
	|	НачисленныйНДФЛ.КодПоОКТМО КАК КодПоОКТМО,
	|	НачисленныйНДФЛ.КПП КАК КПП,
	|	НачисленныйНДФЛ.КодНалоговогоОргана КАК КодНалоговогоОргана,
	|	СУММА(НачисленныйНДФЛ.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ОтражениеЗарплатыВБухучете.НачисленныйНДФЛ КАК НачисленныйНДФЛ
	|ГДЕ
	|	НачисленныйНДФЛ.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленныйНДФЛ.ВидОперации,
	|	НачисленныйНДФЛ.КодПоОКАТО,
	|	НачисленныйНДФЛ.КодПоОКТМО,
	|	НачисленныйНДФЛ.КПП,
	|	НачисленныйНДФЛ.КодНалоговогоОргана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдержаннаяЗарплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	УдержаннаяЗарплата.МестоВСтруктуреПредприятия КАК ПодразделениеПредприятия,
	|	УдержаннаяЗарплата.ВидОперации КАК ВидОперацииСсылка,
	|	УдержаннаяЗарплата.Контрагент КАК Контрагент,
	|	СУММА(УдержаннаяЗарплата.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ОтражениеЗарплатыВБухучете.УдержаннаяЗарплата КАК УдержаннаяЗарплата
	|ГДЕ
	|	УдержаннаяЗарплата.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	УдержаннаяЗарплата.ФизическоеЛицо,
	|	УдержаннаяЗарплата.МестоВСтруктуреПредприятия,
	|	УдержаннаяЗарплата.ВидОперации,
	|	УдержаннаяЗарплата.Контрагент");
		
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// НачисленнаяЗарплатаИВзносы
	ТаблицаНачисленнаяЗарплатаИВзносы = РезультатыЗапроса[0].Выгрузить();
	ТаблицаНачисленнаяЗарплатаИВзносы.Колонки.Добавить("Подразделение");
	ЗаполнитьПодразделениеПоУмолчанию(ТаблицаНачисленнаяЗарплатаИВзносы);
	
	ДобавитьИдентификаторПеречисленияПоСсылке(ТаблицаНачисленнаяЗарплатаИВзносы, "ВидОперации");
	ДобавитьИдентификаторПеречисленияПоСсылке(ТаблицаНачисленнаяЗарплатаИВзносы, "ВидНачисленияОплатыТрудаДляНУ");
	
	ДанныеXDTO.Вставить("НачисленнаяЗарплатаИВзносы", ТаблицаНачисленнаяЗарплатаИВзносы);
	
	// НачисленныйНДФЛ
	ТаблицаНачисленныйНДФЛ = РезультатыЗапроса[1].Выгрузить();
	
	ОтражениеЗарплатыВБухучете.ЗаполнитьРегистрациюВНалоговомОрганеВКоллекцииСтрок(ДанныеИБ.Организация, ДанныеИБ.ПериодРегистрации, ТаблицаНачисленныйНДФЛ);
	ТаблицаНачисленныйНДФЛ.Свернуть("ВидОперацииСсылка, РегистрацияВНалоговомОргане", "Сумма");
	ТаблицаНачисленныйНДФЛ.Сортировать("ВидОперацииСсылка, РегистрацияВНалоговомОргане");
	
	ДобавитьИдентификаторПеречисленияПоСсылке(ТаблицаНачисленныйНДФЛ, "ВидОперации");
	
	ДанныеXDTO.Вставить("НачисленныйНДФЛ", ТаблицаНачисленныйНДФЛ);
	
	// УдержаннаяЗарплата
	ТаблицаУдержаннаяЗарплата = РезультатыЗапроса[2].Выгрузить();
	ТаблицаУдержаннаяЗарплата.Колонки.Добавить("Подразделение");
	ЗаполнитьПодразделениеПоУмолчанию(ТаблицаУдержаннаяЗарплата);
	
	ДобавитьИдентификаторПеречисленияПоСсылке(ТаблицаУдержаннаяЗарплата, "ВидОперации");
	
	ДанныеXDTO.Вставить("УдержаннаяЗарплата", ТаблицаУдержаннаяЗарплата);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПлатежноеПоручение
Процедура ДобавитьПКО_Документ_ПлатежноеПоручение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлатежноеПоручение";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежноеПоручение;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаРасходДСВыплатаЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатежноеПоручение_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",          "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",          "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",              "БанковскийСчет", 1, "Справочник_БанковскиеСчетаКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "",              "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",              "ЖелательнаяФормаОплатыБезналичные", 1);
	ДобавитьПКС(СвойстваШапки, "",              "ЖелательнаяФормаОплатыНаличные", 1);
	ДобавитьПКС(СвойстваШапки, "",              "ЖелательнаяФормаОплатыПлатежнаяКарта", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Контрагент", 1, "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1, "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Статус", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "",              "УтвержденнаяФормаОплаты", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПлатежноеПоручение_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Статус, Валюта.
	ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO);
	
	Подразделение = Неопределено;
	Для Каждого СтрокаВедомости Из ДанныеИБ.Ведомости Цикл
		ТекПодразделение = УправленческоеПодразделениеВедомостиНаВыплатуЗП(СтрокаВедомости.Ведомость.ПолучитьОбъект());
		
		Если Не Подразделение = Неопределено
			И Не Подразделение = ТекПодразделение Тогда
			Подразделение = Неопределено;
			Прервать;
		Иначе
			Подразделение = ТекПодразделение;
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("Подразделение", ЗначениеВИнструкциюПКО(КомпонентыОбмена, Подразделение));
	
	Сведения = ОбменСБанкамиПоЗарплатнымПроектам.СведенияОПлатежномДокументе(ДанныеИБ.Ведомости.ВыгрузитьКолонку("Ведомость"), Неопределено);
	ДанныеXDTO.Вставить("Контрагент",     Новый Структура("Значение, ИмяПКО", Сведения.ЗарплатныйПроект, "Справочник_ЗППроекты_КакКонтрагенты"));
	ДанныеXDTO.Вставить("БанковскийСчет", Новый Структура("Значение, ИмяПКО", Сведения.ЗарплатныйПроект, "Справочник_ЗППроекты_КакБанковскиеСчета"));
	
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыНаличные",       Ложь);
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыБезналичные",    Истина);
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыПлатежнаяКарта", Ложь);
	ДанныеXDTO.Вставить("УтвержденнаяФормаОплаты",              "Безналичная");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ВедомостьНаВыплатуЗарплатыВБанк.СуммаПоДокументу) КАК Сумма,
	|	ПлатежноеПоручение.НомерРеестра КАК НомерВедомостиНаВыплатуЗарплаты,
	|	ПлатежноеПоручение.Дата КАК ДатаВедомостиНаВыплатуЗарплаты
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение.Ведомости КАК ПлатежноеПоручениеВедомости
	|		ПО ПлатежноеПоручениеВедомости.Ссылка = ПлатежноеПоручение.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|		ПО ВедомостьНаВыплатуЗарплатыВБанк.Ссылка = ПлатежноеПоручениеВедомости.Ведомость
	|ГДЕ
	|	ПлатежноеПоручениеВедомости.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ПлатежноеПоручение.НомерРеестра,
	|	ПлатежноеПоручение.Дата");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТаблицаРасшифровка = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТаблицаРасшифровка);
	
	ДанныеXDTO.Вставить("Сумма", ТаблицаРасшифровка.Итог("Сумма"));
КонецПроцедуры
#КонецОбласти
#Область Документ_ПлатежноеПоручение_НДФЛ
Процедура ДобавитьПКО_Документ_ПлатежноеПоручение_НДФЛ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлатежноеПоручение_НДФЛ";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежноеПоручение;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаПереводДСВБюджет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатежноеПоручение_НДФЛ_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",          "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",          "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",              "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1, "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Статус", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПлатежноеПоручение_НДФЛ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	// РасшифровкаПлатежа: Сумма.
	ЗаполнитьРасшифровкуПлатежаПоПлатежноеПоручение_НДФЛ(ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Сумма", ДанныеXDTO.РасшифровкаПлатежа.Итог("Сумма"));
	
	// Статус, Валюта
	ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO);
	
	//Подразделение
	Подразделение = Неопределено;
	Для Каждого СтрокаВедомости Из ДанныеИБ.Ведомости Цикл
		ТекПодразделение = УправленческоеПодразделениеВедомостиНаВыплатуЗП(СтрокаВедомости.Ведомость.ПолучитьОбъект(), Истина);
		
		Если Не Подразделение = Неопределено
			И Не Подразделение = ТекПодразделение Тогда
			Подразделение = Неопределено;
			Прервать;
		Иначе
			Подразделение = ТекПодразделение;
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("Подразделение", ЗначениеВИнструкциюПКО(КомпонентыОбмена, Подразделение));
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаКонтрагентов
Процедура ДобавитьПКО_Справочник_БанковскиеСчетаКонтрагентов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_БанковскиеСчетаКонтрагентов";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.БанковскиеСчетаКонтрагентов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",         "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",   "НомерСчета");
	ДобавитьПКС(СвойстваШапки, "",             "ВалютаДенежныхСредств", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",             "Владелец", 1);

КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчетаКонтрагентов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Владелец", ЗначениеВИнструкциюПКО(КомпонентыОбмена, ДанныеИБ.Владелец));
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВалютаДенежныхСредств", ЗначениеВИнструкциюПКО(КомпонентыОбмена, ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты()));
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДокументыФизическихЛиц_Отправка
Процедура ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДокументыФизическихЛиц_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ДокументыФизическихЛиц";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидДокументаОтбор", 1, "Справочник_ВидыДокументовФизическихЛиц");
	ДобавитьПКС(СвойстваШапки, "", "ПериодОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ФизическоеЛицоОтбор", 1, "Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВидДокумента", 1,"Справочник_ВидыДокументовФизическихЛиц");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВыдачи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КемВыдан", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КодПодразделения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Период", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Представление", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СрокДействия", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ПериодОтбор",         ДанныеИБ.Отбор.Период.Значение);
	ДанныеXDTO.Вставить("ФизическоеЛицоОтбор", ДанныеИБ.Отбор.Физлицо.Значение);
	ДанныеXDTO.Вставить("ВидДокументаОтбор",   ДанныеИБ.Отбор.ВидДокумента.Значение);
	
	ТаблицаЗаписи = ДанныеИБ.Выгрузить();
	ТаблицаЗаписи.Колонки.Добавить("ФизическоеЛицо");
	
	Для Каждого СтрокаЗаписи Из ТаблицаЗаписи Цикл
		СтрокаЗаписи.ФизическоеЛицо = СтрокаЗаписи.Физлицо;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Записи", ТаблицаЗаписи);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЗППроекты_КакБанковскиеСчета
Процедура ДобавитьПКО_Справочник_ЗППроекты_КакБанковскиеСчета(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЗППроекты_КакБанковскиеСчета";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ЗарплатныеПроекты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЗППроекты_КакБанковскиеСчета_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Банк", 1, "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "", "ВалютаДенежныхСредств", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "", "Владелец", 1);
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "", "НомерСчета", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ЗППроекты_КакБанковскиеСчета_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураСвойств = Неопределено;
	Если СтекВыгрузки.Количество() > 1 Тогда
		СтруктураСвойств = ДанныеXDTO;
	Иначе
		СтруктураСвойств = ДанныеXDTO.КлючевыеСвойства;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗарплатныеПроекты.Банк КАК Банк,
	|	ЗарплатныеПроекты.РасчетныйСчет КАК РасчетныйСчет,
	|	ЕСТЬNULL(ЗарплатныеПроекты.Банк.Код, """") КАК БИКБанка,
	|	ЕСТЬNULL(ЗарплатныеПроекты.Банк.ИНН, """") КАК ИННБанка,
	|	ЕСТЬNULL(ЗарплатныеПроекты.Банк.Наименование, """") КАК НаименованиеБанка
	|ИЗ
	|	Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|ГДЕ
	|	ЗарплатныеПроекты.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВалютаСчета = ДанныеИБ.Валюта;
	Если Не ЗначениеЗаполнено(ВалютаСчета) Тогда
		ВалютаСчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
	КонецЕсли;
	
	СтрокаНаименования = "";
	Если Выборка.Следующий() Тогда
		СтруктураСвойств.Вставить("Банк", Выборка.Банк);
		СтруктураСвойств.Вставить("НомерСчета", Выборка.РасчетныйСчет);
		
		СтруктураКонтрагент = Новый Структура;
		СтруктураКонтрагент.Вставить("Ссылка", Выборка.Банк);
		СтруктураКонтрагент.Вставить("ИНН", Выборка.ИННБанка);
		СтруктураКонтрагент.Вставить("Наименование", Выборка.НаименованиеБанка);
		СтруктураКонтрагент.Вставить("НаименованиеПолное", Выборка.НаименованиеБанка);
		СтруктураКонтрагент.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
		
		СтруктураСвойств.Вставить("Владелец", Новый Структура("Значение, ИмяПКО", СтруктураКонтрагент, "Справочник_Контрагенты_ИзСтруктуры"));
		
		СтрокаНаименования = Прав(СокрЛП(Выборка.РасчетныйСчет), 4) 
			+ ?(Не ПустаяСтрока(Выборка.НаименованиеБанка), " в " + Выборка.НаименованиеБанка, "")
			+ " (" + Строка(ВалютаСчета) + ")";
		СтрокаНаименования = Лев(СтрокаНаименования, 150);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВалютаДенежныхСредств", ЗначениеВИнструкциюПКО(КомпонентыОбмена, ВалютаСчета));
	ДанныеXDTO.Вставить("Наименование", СтрокаНаименования);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЗППроекты_КакКонтрагенты
Процедура ДобавитьПКО_Справочник_ЗППроекты_КакКонтрагенты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЗППроекты_КакКонтрагенты";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ЗарплатныеПроекты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЗППроекты_КакКонтрагенты_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ИНН", 1);
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "", "НаименованиеПолное", 1);
	ДобавитьПКС(СвойстваШапки, "", "ЮридическоеФизическоеЛицо", 1, "Перечисление_ЮридическоеФизическоеЛицо");

КонецПроцедуры

Процедура ПКО_Справочник_ЗППроекты_КакКонтрагенты_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураСвойств = Неопределено;
	Если СтекВыгрузки.Количество() > 1 Тогда
		СтруктураСвойств = ДанныеXDTO;
	Иначе
		СтруктураСвойств = ДанныеXDTO.КлючевыеСвойства;
	КонецЕсли;
	
	СтруктураСвойств.Вставить("Ссылка", ДанныеИБ.Банк);
	СтруктураСвойств.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КлассификаторБанков.ИНН КАК ИНН,
	|	КлассификаторБанков.Наименование КАК Наименование,
	|	КлассификаторБанков.Наименование КАК НаименованиеПолное
	|ИЗ
	|	Справочник.КлассификаторБанков КАК КлассификаторБанков
	|ГДЕ
	|	КлассификаторБанков.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Банк);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтруктураСвойств.Вставить("ИНН", Выборка.ИНН);
		СтруктураСвойств.Вставить("Наименование", Выборка.Наименование);
		СтруктураСвойств.Вставить("НаименованиеПолное", Выборка.НаименованиеПолное);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты
Процедура ДобавитьПКО_Справочник_Контрагенты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Контрагенты";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                       "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",                 "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                       "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",        "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо", "ЮридическоеФизическоеЛицо", , "Перечисление_ЮридическоеФизическоеЛицо");

КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_Контрагенты_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Контрагенты_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Контрагенты_ИзСтруктуры_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ИНН", 1);
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "", "НаименованиеПолное", 1);
	ДобавитьПКС(СвойстваШапки, "", "ЮридическоеФизическоеЛицо", 1, "Перечисление_ЮридическоеФизическоеЛицо");

КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_ИзСтруктуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураСвойств = Неопределено;
	Если СтекВыгрузки.Количество() > 1 Тогда
		СтруктураСвойств = ДанныеXDTO;
	Иначе
		СтруктураСвойств = ДанныеXDTO.КлючевыеСвойства;
	КонецЕсли;
	
	Для Каждого ТекСвойство Из ДанныеИБ Цикл
		СтруктураСвойств.Вставить(ТекСвойство.Ключ, ТекСвойство.Значение);
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                       "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",                 "ОКПО");
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",        "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеСокращенное",   "НаименованиеСокращенное");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                      "ОГРН");
	ДобавитьПКС(СвойстваШапки, "Префикс",                   "Префикс");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо", "ЮридическоеФизическоеЛицо", , "Перечисление_ЮридическоеФизическоеЛицо");
	ДобавитьПКС(СвойстваШапки, "",                          "КПП", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ОКАТО", 1);
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация",       "ГоловнаяОрганизация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1,"ВидыКонтактнойИнформации");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураКлючевыхСвойств = ДанныеXDTO.КлючевыеСвойства;
	Если СтекВыгрузки.Количество() > 1 Тогда
		СтруктураКлючевыхСвойств = ДанныеXDTO;
	КонецЕсли;
	
	Если ДанныеИБ.ГоловнаяОрганизация = ДанныеИБ.Ссылка Тогда
		СтруктураКлючевыхСвойств.Вставить("ГоловнаяОрганизация", Неопределено);
	КонецЕсли;
	
	КодОКАТО = "";
	КПП = "";
	Если ЗначениеЗаполнено(ДанныеИБ.РегистрацияВНалоговомОргане) Тогда
		РеквизитыРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.РегистрацияВНалоговомОргане, "КодПоОКАТО, КПП");
		
		КодОКАТО = РеквизитыРегистрации.КодПоОКАТО;
		КПП = РеквизитыРегистрации.КПП;
	КонецЕсли;
	СтруктураКлючевыхСвойств.Вставить("КПП", КПП);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	
	ДанныеXDTO.Вставить("ОКАТО", КодОКАТО);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_Подразделения_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Подразделения_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Подразделения";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Наименование");

КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Отправка
Процедура ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Подразделения_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СтруктураПредприятия;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Подразделения";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "ВышестоящееПодразделение", , "Справочник_Подразделения_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеИБ) = Тип("СправочникОбъект.СтруктураПредприятия") Тогда
		Если Не ДанныеИБ.Метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты") = Неопределено Тогда
			ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ФизическиеЛица_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаРождения", "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "ИНН",          "ИНН");
	ДобавитьПКС(СвойстваШапки, "Пол",          "Пол", , "ПолФизическогоЛица");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ФизическиеЛицаГруппа_Отправка");
	ДобавитьПКС(СвойстваШапки, "",             "ДатаРегистрации", 1);
	ДобавитьПКС(СвойстваШапки, "",             "Имя", 1);
	ДобавитьПКС(СвойстваШапки, "",             "МестоРождения", 1);
	ДобавитьПКС(СвойстваШапки, "",             "НаименованиеСлужебное", 1);
	ДобавитьПКС(СвойстваШапки, "",             "Отчество", 1);
	ДобавитьПКС(СвойстваШапки, "",             "СтраховойНомерПФР", 1);
	ДобавитьПКС(СвойстваШапки, "",             "УточнениеНаименования", 1);
	ДобавитьПКС(СвойстваШапки, "",             "Фамилия", 1);
	ДобавитьПКС(СвойстваШапки, "",             "ФИО", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДанныеФИО");
	ДобавитьПКС(СвойстваТЧ, "", "Имя", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НачалоПериода", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Отчество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Фамилия", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	#Область ФИО
	ДанныеXDTO.КлючевыеСвойства.Вставить("ФИО");
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ФИО", ДанныеИБ.Метаданные()) Тогда
		ДанныеXDTO.КлючевыеСвойства.ФИО = ДанныеИБ.ФИО;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ФИО)
		Или (Не СокрЛП(ДанныеXDTO.КлючевыеСвойства.ФИО) = СокрЛП(ДанныеИБ.Наименование)) Тогда
		ДанныеXDTO.КлючевыеСвойства.ФИО = ДанныеИБ.Наименование;
	КонецЕсли;
	#КонецОбласти
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ФизическиеЛица.КлючевыеСвойства.Фамилия")
		И СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ФизическиеЛица.КлючевыеСвойства.Имя")
		И СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ФизическиеЛица.КлючевыеСвойства.Отчество") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Фамилия");
		ДанныеXDTO.КлючевыеСвойства.Вставить("Имя");
		ДанныеXDTO.КлючевыеСвойства.Вставить("Отчество");
	
		ЗаполнитьЗначенияСвойств(ДанныеXDTO.КлючевыеСвойства, ДанныеИБ, "Фамилия, Имя, Отчество");
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДатаРегистрации");
	ДанныеXDTO.Вставить("МестоРождения");
	ДанныеXDTO.Вставить("НаименованиеСлужебное");
	ДанныеXDTO.Вставить("СтраховойНомерПФР");
	ДанныеXDTO.Вставить("УточнениеНаименования");
	
	ЗаполнитьЗначенияСвойств(ДанныеXDTO, ДанныеИБ, "ДатаРегистрации, МестоРождения, НаименованиеСлужебное, СтраховойНомерПФР, УточнениеНаименования");
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	ВыгрузитьПодробныеДанныеФИО(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_ДанныеДляРасчетаЗарплаты_Получение
Процедура ДобавитьПКО_Документ_ДанныеДляРасчетаЗарплаты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ДанныеДляРасчетаЗарплаты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ДанныеДляРасчетаЗарплаты;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВыработкаСотрудников";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ДанныеДляРасчетаЗарплаты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДанныеДляРасчетаЗарплаты";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Период",        "", 1);
	ДобавитьПКС(СвойстваШапки, "Подразделение", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",      "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВыполненныеРаботы", "");
	ДобавитьПКС(СвойстваТЧ, "ВидРабот",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "ОбъемВыполненныхРабот", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Период",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "Расценка",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сотрудник",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                 "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ДанныеДляРасчетаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.Период   = КонецМесяца(ПолученныеДанные.Дата);
	
	ПравилоКонвертацииФизЛица_Получение = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти("Справочник_ФизическиеЛица_Получение", "ИмяПКО");
	
	ВыполненныеРаботыXDTO = Неопределено;
	Если ДанныеXDTO.Свойство("ВыполненныеРаботы", ВыполненныеРаботыXDTO)
		И ЗначениеЗаполнено(ВыполненныеРаботыXDTO)
		И Не ПравилоКонвертацииФизЛица_Получение = Неопределено Тогда
		
		ВыполненныеРаботыXDTO.Колонки.Добавить("ФизическоеЛицоСсылка", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		
		Для Каждого СтрокаВыполненныеРаботыXDTO Из ВыполненныеРаботыXDTO Цикл
			СтрокаВыполненныеРаботыXDTO.ФизическоеЛицоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена,
				СтрокаВыполненныеРаботыXDTO.ФизическоеЛицо, ПравилоКонвертацииФизЛица_Получение, "ПолучитьСсылку");
		КонецЦикла;
		
		ТаблицаСотрудники = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(ВыполненныеРаботыXDTO.ВыгрузитьКолонку("ФизическоеЛицоСсылка"), Ложь, ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(
			Ложь,
			ТаблицаСотрудники.ВыгрузитьКолонку("Сотрудник"),
			"МестоВСтруктуреПредприятия, Подразделение",
			КонецМесяца(ПолученныеДанные.Дата));
		
		Подразделение = Неопределено;
		ПропуститьПодразделение = Ложь;
		
		ВыполненныеРаботы = Новый Массив;
		ФизическиеЛица    = Новый Массив;
		
		Для Каждого СтрокаВыполненныеРаботыXDTO Из ВыполненныеРаботыXDTO Цикл
			СтрокаВыполненныеРаботы = Новый Структура;
		
			СтрокаСотрудники = ТаблицаСотрудники.Найти(СтрокаВыполненныеРаботыXDTO.ФизическоеЛицоСсылка, "ФизическоеЛицо");
			Если Не СтрокаСотрудники = Неопределено Тогда
				СтрокаВыполненныеРаботы.Вставить("Сотрудник", СтрокаСотрудники.Сотрудник);
				
				Если Не ПропуститьПодразделение Тогда
					СтрокаКадровыеДанные = КадровыеДанные.Найти(СтрокаВыполненныеРаботы.Сотрудник, "Сотрудник");
					Если Не СтрокаКадровыеДанные = Неопределено Тогда
						Если Подразделение = Неопределено Тогда
							Подразделение = СтрокаКадровыеДанные.Подразделение;
						ИначеЕсли Не Подразделение = СтрокаКадровыеДанные.Подразделение Тогда
							Подразделение = Неопределено;
							ПропуститьПодразделение = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаВыполненныеРаботы.Вставить("Период", ПолученныеДанные.Дата);
			СтрокаВыполненныеРаботы.Вставить("ВидРабот", Новый Структура("ИмяПКО, Значение", "Справочник_ВидыРаботСотрудников", СтрокаВыполненныеРаботыXDTO.ВидРабот));
			СтрокаВыполненныеРаботы.Вставить("ОбъемВыполненныхРабот", СтрокаВыполненныеРаботыXDTO.Количество);
			СтрокаВыполненныеРаботы.Вставить("Расценка", СтрокаВыполненныеРаботыXDTO.Расценка);
			СтрокаВыполненныеРаботы.Вставить("Сумма", СтрокаВыполненныеРаботыXDTO.Сумма);
			
			СтрокаФизическиеЛица = Новый Структура;
			СтрокаФизическиеЛица.Вставить("ФизическоеЛицо", СтрокаВыполненныеРаботыXDTO.ФизическоеЛицоСсылка);
			
			ВыполненныеРаботы.Добавить(СтрокаВыполненныеРаботы);
			ФизическиеЛица.Добавить(СтрокаФизическиеЛица);
		КонецЦикла;
		
		Если ВыполненныеРаботы.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВыполненныеРаботы", ВыполненныеРаботы);
		КонецЕсли;
		
		Если ФизическиеЛица.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ФизическиеЛица", ФизическиеЛица);
		КонецЕсли;	
		
		Если Не ПропуститьПодразделение
			И Не Подразделение = Неопределено Тогда
					
			ПолученныеДанные.Подразделение = Подразделение;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыССотрудниками
Процедура ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСРасчетыССотрудниками";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПогашениеЗаймаСотруднику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыССотрудниками
Процедура ДобавитьПКО_Документ_ПКОРасчетыССотрудниками(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОРасчетыССотрудниками";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПогашениеЗаймаСотруднику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОРасчетыССотрудниками";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации");

КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыССотрудниками
Процедура ДобавитьПКО_Документ_РКОРасчетыССотрудниками(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОРасчетыССотрудниками";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВыдачаЗаймаСотруднику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОРасчетыССотрудниками";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации");

КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыССотрудниками
Процедура ДобавитьПКО_Документ_СБДСРасчетыССотрудниками(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВыдачаЗаймаСотруднику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Организации";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация",       "ГоловнаяОрганизация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ИНН",                       "ИНН");
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",        "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеСокращенное",   "НаименованиеСокращенное");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                      "ОГРН");
	ДобавитьПКС(СвойстваШапки, "Префикс",                   "Префикс");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо", "ЮридическоеФизическоеЛицо", , "Перечисление_ЮридическоеФизическоеЛицо");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация",    "");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Представление", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ОКАТО") И ЗначениеЗаполнено(ДанныеXDTO.ОКАТО) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОКАТО", ДанныеXDTO.ОКАТО);
	КонецЕсли;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("КПП") И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.КПП) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("КПП", ДанныеXDTO.КлючевыеСвойства.КПП);
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
	
	Если Не ДанныеXDTO.Свойство("КонтактнаяИнформация")
		Или Не ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
		ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
		Если Лев(СокрЛП(ВидКИСтрокой),18) = "ПользовательскаяКИ" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(СтрокаXDTO.НаименованиеКонтактнойИнформации,,Справочники.ВидыКонтактнойИнформации.СправочникОрганизации);
			Если НЕ ЗначениеЗаполнено(ТекВидКИ) Тогда
				ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
				ВидКИОбъект.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникОрганизации;
				ВидКИОбъект.Наименование = СтрокаXDTO.НаименованиеКонтактнойИнформации;
				ИмяТипаКИ = СтрЗаменить(СокрЛП(ВидКИСтрокой),"ПользовательскаяКИ","");
				ВидКИОбъект.Тип = Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ];
				ВидКИОбъект.Используется = Истина;
				ВидКИОбъект.Записать();
				ТекВидКИ = ВидКИОбъект.Ссылка;
			КонецЕсли;
		ИначеЕсли ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
		ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
		ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
		ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
		ИначеЕсли ВидКИСтрокой = "Факс" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
		Иначе
			Продолжить;
		КонецЕсли;
		ТекТипКИ = ТекВидКИ.Тип;
		СтрокаКИ = ПолученныеДанные.КонтактнаяИнформация.Добавить();
		ЗначенияПолейСтрокой = СокрЛП(СтрокаXDTO.ЗначенияПолей);
		СтрокаКИ.ЗначенияПолей = ЗначенияПолейСтрокой;
		СтрокаКИ.Вид = ТекВидКИ;
		СтрокаКИ.Тип = ТекТипКИ;
		ЗаполнитьСтрокуКонтактнойИнформацией(СтрокаКИ);
	КонецЦикла;
КонецПроцедуры

Процедура ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если Не ДанныеИБ = Неопределено Тогда
		Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ОКАТО") Тогда
			ДанныеИБ.ДополнительныеСвойства.Вставить("ОКАТО", ПолученныеДанные.ДополнительныеСвойства.ОКАТО);
		КонецЕсли;
		Если ПолученныеДанные.ДополнительныеСвойства.Свойство("КПП") Тогда
			ДанныеИБ.ДополнительныеСвойства.Вставить("КПП", ПолученныеДанные.ДополнительныеСвойства.КПП);
		КонецЕсли;
	КонецЕсли;
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Получение
Процедура ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Подразделения_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтруктураПредприятия;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Подразделения";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СтруктураПредприятия";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "ВышестоящееПодразделение", , "Справочник_Подразделения_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Получение
Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛица_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ФизЛица";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаРождения", "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "ИНН",          "ИНН");
	ДобавитьПКС(СвойстваШапки, "Наименование", "ФИО");
	ДобавитьПКС(СвойстваШапки, "Пол",          "Пол", , "ПолФизическогоЛица");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ФизическиеЛицаГруппа_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация",    "");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("СтраховойНомерПФР,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("ФИО,ЭтоГруппа,ДатаРождения");
	ПравилоКонвертации.ПоляПоиска.Добавить("ФИО,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолучитьКонтактнуюИнформациюФизическогоЛица(ДанныеXDTO, ПолученныеДанные);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ФизическиеЛица.ДанныеФИО") Тогда
		Если ДанныеXDTO.Свойство("ДанныеФИО") И ДанныеXDTO.ДанныеФИО.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ПодробныеДанныеФИО", ДанныеXDTO.ДанныеФИО);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ДатаРегистрации") Тогда
		ПолученныеДанные.ДатаРегистрации = ДанныеXDTO.ДатаРегистрации;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("МестоРождения") Тогда
		ПолученныеДанные.МестоРождения = ДанныеXDTO.МестоРождения;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("НаименованиеСлужебное") Тогда
		ПолученныеДанные.НаименованиеСлужебное = ДанныеXDTO.НаименованиеСлужебное;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("СтраховойНомерПФР") Тогда
		ПолученныеДанные.СтраховойНомерПФР = ДанныеXDTO.СтраховойНомерПФР;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("УточнениеНаименования") Тогда
		ПолученныеДанные.УточнениеНаименования = ДанныеXDTO.УточнениеНаименования;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ФИО) Тогда
		ПолученныеДанные.ФИО = ПолученныеДанные.Наименование;
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
		СтрокаРеквизиты = "МестоРождения, СтраховойНомерПФР, УточнениеНаименования, ФИО";
		ЗаполнитьРеквизиты(ДанныеИБ, ПолученныеДанные, СтрокаРеквизиты, Истина);
	КонецЕсли;
	
	ФизЛицоСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	ЗагрузитьДополнительныеСведения(ФизЛицоСсылка, ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	ЗагрузитьПодробныеДанныеФИО(КомпонентыОбмена, ПолученныеДанные, ФизЛицоСсылка);
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область ОтправкаИПолучение
#Область Справочник_Банки
Процедура ДобавитьПКО_Справочник_Банки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Банки";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторБанков;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Банки";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Адрес",        "Адрес");
	ДобавитьПКС(СвойстваШапки, "Город",        "Город");
	ДобавитьПКС(СвойстваШапки, "Код",          "БИК");
	ДобавитьПКС(СвойстваШапки, "КоррСчет",     "КоррСчет");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Телефоны",     "Телефоны");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанкиГруппа
Процедура ДобавитьПКО_Справочник_БанкиГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_БанкиГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторБанков;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Банки";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты
Процедура ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Валюты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Валюты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Валюты";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                       "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",        "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ПараметрыПрописиНаРусском", "ПараметрыПрописиНаРусском");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено
		И ЗначениеЗаполнено(ДанныеИБ.СпособУстановкиКурса) Тогда
		ПолученныеДанные.СпособУстановкиКурса = ДанныеИБ.СпособУстановкиКурса;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыДокументовФизическихЛиц
Процедура ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыДокументовФизическихЛиц";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыДокументовФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыДокументовФизическихЛиц";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ВидыДокументовФизическихЛиц_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "КодМВД",       "КодМВД");
	ДобавитьПКС(СвойстваШапки, "КодПФР",       "КодПФР");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "",             "ВидДокументаИзКлассификатора", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ВидыДокументовФизическихЛиц_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВидДокументаИзКлассификатора = "";
	
	Если ДанныеИБ.Предопределенный
		И ЗначениеЗаполнено(ДанныеИБ.ИмяПредопределенныхДанных) Тогда
		ВидДокументаИзКлассификатора = ДанныеИБ.ИмяПредопределенныхДанных;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДокументаИзКлассификатора", ВидДокументаИзКлассификатора);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыРаботСотрудников
Процедура ДобавитьПКО_Справочник_ВидыРаботСотрудников(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыРаботСотрудников";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыРаботСотрудников;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыРаботСотрудников";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ВидыРаботСотрудников";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ВидыРаботСотрудниковГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыРаботСотрудниковГруппа
Процедура ДобавитьПКО_Справочник_ВидыРаботСотрудниковГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыРаботСотрудниковГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыРаботСотрудников;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыРаботСотрудниковГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ВидыРаботСотрудниковГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДополнительныеРеквизиты
Процедура ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДополнительныеРеквизиты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ДополнительныеРеквизиты";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВладелецДополнительныхЗначений",     "ВладелецДополнительныхЗначений", , "Справочник_ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваШапки, "ДополнительныеЗначенияИспользуются", "ДополнительныеЗначенияИспользуются");
	ДобавитьПКС(СвойстваШапки, "ДополнительныеЗначенияСВесом",       "ДополнительныеЗначенияСВесом");
	ДобавитьПКС(СвойстваШапки, "Заголовок",                          "Заголовок");
	ДобавитьПКС(СвойстваШапки, "ЗаголовокФормыВыбораЗначения",       "ЗаголовокФормыВыбораЗначения");
	ДобавитьПКС(СвойстваШапки, "ЗаголовокФормыЗначения",             "ЗаголовокФормыЗначения");
	ДобавитьПКС(СвойстваШапки, "ЗаполнятьОбязательно",               "ЗаполнятьОбязательно");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "МногострочноеПолеВвода",             "МногострочноеПолеВвода");
	ДобавитьПКС(СвойстваШапки, "Наименование",                       "Наименование");
	ДобавитьПКС(СвойстваШапки, "Подсказка",                          "Подсказка");
	ДобавитьПКС(СвойстваШапки, "ФорматСвойства",                     "ФорматСвойства");
	ДобавитьПКС(СвойстваШапки, "ЭтоДополнительноеСведение",          "ЭтоДополнительноеСведение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Заголовок) Тогда
		ПолученныеДанные.Заголовок = ПолученныеДанные.Наименование;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЗначенияДополнительныхРеквизитов
Процедура ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Вес",          "Вес");
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Владелец", , "Справочник_ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Владелец");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи
Процедура ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Пользователи";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Пользователи";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Пользователи_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",   "Наименование");
	ДобавитьПКС(СвойстваШапки, "",               "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "ФизическоеЛицо", "", 1, "Справочник_ФизическиеЛица_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("ФизическоеЛицо,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("ФизическоеЛицо", ЗначениеВИнструкциюПКО(КомпонентыОбмена, ДанныеИБ.ФизическоеЛицо));
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("ФизическоеЛицо", ЗначениеВИнструкциюПКО(КомпонентыОбмена, ДанныеИБ.ФизическоеЛицо));
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ФизЛицо = Неопределено;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ФизическоеЛицо") Тогда
		ФизЛицо = ДанныеXDTO.КлючевыеСвойства.ФизическоеЛицо;
	ИначеЕсли ДанныеXDTO.Свойство("ФизическоеЛицо") Тогда
		ФизЛицо = ДанныеXDTO.ФизическоеЛицо;
	КонецЕсли;
	
	Если Не ФизЛицо = Неопределено Тогда
		Результат = ЗначениеВИнструкциюПКО(КомпонентыОбмена, ФизЛицо);
		
		Если Не Результат = Неопределено Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ФизическоеЛицо", Результат);
		КонецЕсли;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_РегистрацииВНалоговомОргане
Процедура ДобавитьПКО_Справочник_РегистрацииВНалоговомОргане(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_РегистрацииВНалоговомОргане";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.РегистрацииВНалоговомОргане;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.РегистрацииВНалоговомОргане";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_РегистрацииВНалоговомОргане";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДокументПредставителя",                  "ДокументПредставителя");
	ДобавитьПКС(СвойстваШапки, "Код",                                    "КодНалоговогоОргана");
	ДобавитьПКС(СвойстваШапки, "КодПоОКАТО",                             "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "КодПоОКТМО",                             "ОКТМО");
	ДобавитьПКС(СвойстваШапки, "КПП",                                    "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",                           "КраткоеНаименованиеНалоговогоОргана");
	ДобавитьПКС(СвойстваШапки, "НаименованиеИФНС",                       "НаименованиеИФНС");
	ДобавитьПКС(СвойстваШапки, "УполномоченноеЛицоПредставителя",        "УполномоченноеЛицоПредставителя");
	ДобавитьПКС(СвойстваШапки, "",                                       "Доверенность", 1);
	ДобавитьПКС(СвойстваШапки, "",                                       "Организация", 1);
	ДобавитьПКС(СвойстваШапки, "",                                       "Представитель", 1);
	ДобавитьПКС(СвойстваШапки, "Владелец",                               "", 1);
	ДобавитьПКС(СвойстваШапки, "Доверенность",                           "", 1);
	ДобавитьПКС(СвойстваШапки, "НаименованиеОбособленногоПодразделения", "НаименованиеОбособленногоПодразделения", 1);
	ДобавитьПКС(СвойстваШапки, "Представитель",                          "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Код,КПП");
	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Код");
КонецПроцедуры

Процедура ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ОрганизацияИнструкция = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Владелец, "Справочник_Организации_Отправка");
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.РегистрацииВНалоговомОргане.КлючевыеСвойства.Организация")
		И СтекВыгрузки.Количество() = 1 Тогда	
		ДанныеXDTO.КлючевыеСвойства.Вставить("Организация", ОрганизацияИнструкция);
	Иначе
		ДанныеXDTO.Вставить("Организация", ОрганизацияИнструкция);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		НаименованиеОбособленногоПодразделения = Неопределено;
		Если Не ДанныеXDTO.Свойство("НаименованиеОбособленногоПодразделения", НаименованиеОбособленногоПодразделения)
			Или Не ЗначениеЗаполнено(НаименованиеОбособленногоПодразделения) Тогда
			
			ДанныеXDTO.Вставить("НаименованиеОбособленногоПодразделения", ДанныеИБ.НаименованиеИФНС);
		КонецЕсли; 
		
		Возврат;
	КонецЕсли;
	
	НаименованиеОбособленногоПодразделения = Неопределено;
	Если Не ДанныеXDTO.КлючевыеСвойства.Свойство("НаименованиеОбособленногоПодразделения", НаименованиеОбособленногоПодразделения)
		Или Не ЗначениеЗаполнено(НаименованиеОбособленногоПодразделения) Тогда
		
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеОбособленногоПодразделения", ДанныеИБ.НаименованиеИФНС);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Представитель");
	Если ЗначениеЗаполнено(ДанныеИБ.Представитель) Тогда
		ПредставительИнструкция = ЗначениеВИнструкциюПКО(КомпонентыОбмена, ДанныеИБ.Представитель);
		Если Не ПредставительИнструкция = Неопределено Тогда
			ДанныеXDTO.Представитель = ПредставительИнструкция;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Доверенность");
	Если ЗначениеЗаполнено(ДанныеИБ.Доверенность) Тогда
		ДанныеXDTO.Доверенность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Доверенность, "Наименование");
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	СтруктураСвойств = Неопределено;
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.РегистрацииВНалоговомОргане.КлючевыеСвойства.Организация") Тогда
		СтруктураСвойств = ДанныеXDTO.КлючевыеСвойства;
	Иначе
		СтруктураСвойств = ДанныеXDTO;
	КонецЕсли;
	
	Если СтруктураСвойств.Свойство("Организация") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", ЗначениеВИнструкциюПКО(КомпонентыОбмена, СтруктураСвойств.Организация));
		
		Если СтруктураСвойств.Организация.Свойство("КПП")
			И СтруктураСвойств.Организация.КПП = ПолученныеДанные.КПП Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ЭтоОсновнаяРегистрация", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Представитель")
		И ЗначениеЗаполнено(ДанныеXDTO.Представитель) Тогда
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Представитель", ЗначениеВИнструкциюПКО(КомпонентыОбмена, ДанныеXDTO.Представитель));
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Доверенность")
		И ЗначениеЗаполнено(ДанныеXDTO.Доверенность) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДоверенностьНаименование", ДанныеXDTO.Доверенность);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_РегистрацииВНалоговомОргане_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ЭтоОсновнаяРегистрация")
		И Не ДанныеИБ = Неопределено Тогда
		ДанныеИБ.ДополнительныеСвойства.Вставить("ЭтоОсновнаяРегистрация", Истина);
	КонецЕсли;
	
	ДоверенностьНаименование = "";
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ДоверенностьНаименование", ДоверенностьНаименование) Тогда
		СсылкаДоверенность = Справочники.ДоверенностиНалогоплательщика.НайтиПоНаименованию(ДоверенностьНаименование, Истина, , ПолученныеДанные.Владелец);
		Если Не СсылкаДоверенность.Пустая() Тогда
			ПолученныеДанные.Доверенность = СсылкаДоверенность;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпособыОтраженияЗарплатыВБухУчете
Процедура ДобавитьПКО_Справочник_СпособыОтраженияЗарплатыВБухУчете(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СпособыОтраженияЗарплатыВБухУчете";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СпособыОтраженияЗарплатыВБухУчете;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СпособыОтраженияЗарплатыВФинансовомУчете";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_СпособыОтраженияЗарплатыВБухУчете_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СпособыОтраженияЗарплатыВБухУчете_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "",             "Группа", 1);
	ДобавитьПКС(СвойстваШапки, "Родитель",     "", 1, "Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_СпособыОтраженияЗарплатыВБухУчете_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// В УП и ЗУП структура справочника различается
	Результат = Неопределено;
	
	Если ДанныеИБ.Метаданные().Иерархический Тогда
		Результат = ЗначениеВИнструкциюПКО(КомпонентыОбмена, ДанныеИБ.Родитель);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Группа", Результат);
КонецПроцедуры

Процедура ПКО_Справочник_СпособыОтраженияЗарплатыВБухУчете_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// В УП и ЗУП структура справочника различается
	Группа = Неопределено;
	
	Если ДанныеXDTO.Свойство("Группа", Группа) Тогда
		
		Если Не Группа = Неопределено
			И ПолученныеДанные.Метаданные().Иерархический Тогда
			
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Родитель", Новый Структура("Значение, ИмяПКО", Группа, "Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа"));		
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа
Процедура ДобавитьПКО_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СпособыОтраженияЗарплатыВБухУчете;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СпособыОтраженияЗарплатыВФинансовомУчетеГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "",             "Группа", 1, "Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "", 1, "Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// В УП и ЗУП структура справочника различается
	Результат = Неопределено;
	
	Если ДанныеИБ.Метаданные().Иерархический Тогда
		Результат = ЗначениеВИнструкциюПКО(КомпонентыОбмена, ДанныеИБ.Родитель);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("Группа", Результат);
		Возврат;
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("Группа", Результат);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// В УП и ЗУП структура справочника различается
	Группа = Неопределено;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Группа", Группа)
		Или ДанныеXDTO.Свойство("Группа", Группа) Тогда
		
		Если Не Группа = Неопределено
			И ПолученныеДанные.Метаданные().Иерархический Тогда
			
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Родитель", Новый Структура("Значение, ИмяПКО", Группа, "Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа"));
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа_Отправка
Процедура ДобавитьПКО_Справочник_ФизическиеЛицаГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛицаГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛицаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт

	// ВидыКонтактнойИнформации.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыКонтактнойИнформации";
	ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ВидыКонтактнойИнформации;
	ПравилоКонвертации.ТипXDTO   = "ВидыКИ";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации, "АдресЭлектроннойПочты");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailПользователя, "АдресЭлектроннойПочты");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица, "АдресЭлектроннойПочты");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица, "ПочтовыйАдрес");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица, "ФактическийАдрес");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, "ЮридическийАдрес");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, "ПочтовыйАдрес");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица, "ТелефонДомашний");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица, "Телефон");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, "Телефон");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя, "Телефон");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, "ТелефонРабочий");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, "Факс");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, "ФактическийАдрес");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, "ЮридическийАдрес");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("АдресЭлектроннойПочты", Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	ЗначенияДляПолучения.Вставить("АдресЭлектроннойПочты", Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	ЗначенияДляПолучения.Вставить("АдресЭлектроннойПочты", Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
	ЗначенияДляПолучения.Вставить("ПочтовыйАдрес", Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица);
	ЗначенияДляПолучения.Вставить("ФактическийАдрес", Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица);
	ЗначенияДляПолучения.Вставить("ЮридическийАдрес", Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
	ЗначенияДляПолучения.Вставить("ПочтовыйАдрес", Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
	ЗначенияДляПолучения.Вставить("ТелефонДомашний", Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица);
	ЗначенияДляПолучения.Вставить("Телефон", Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица);
	ЗначенияДляПолучения.Вставить("Телефон", Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	ЗначенияДляПолучения.Вставить("Телефон", Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
	ЗначенияДляПолучения.Вставить("ТелефонРабочий", Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
	ЗначенияДляПолучения.Вставить("Факс", Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);
	ЗначенияДляПолучения.Вставить("ФактическийАдрес", Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	ЗначенияДляПолучения.Вставить("ЮридическийАдрес", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ЮридическоеФизическоеЛицо.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ЮридическоеФизическоеЛицо";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
	ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПолФизическогоЛица.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПолФизическогоЛица";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическогоЛица;
	ПравилоКонвертации.ТипXDTO   = "Пол";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Женский, "Женский");
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Мужской, "Мужской");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Женский", Перечисления.ПолФизическогоЛица.Женский);
	ЗначенияДляПолучения.Вставить("Мужской", Перечисления.ПолФизическогоЛица.Мужской);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Функция ВерсияФорматаЧислом(СтрокаВерсии)
	Если Не ЗначениеЗаполнено(СтрокаВерсии) Или СтрокаВерсии = "1.0.beta" Тогда
		Возврат 0;
	КонецЕсли;
	
	ВерсияФорматаЧислом = 0;
	
	РазрядыВерсии = СтрРазделить(СтрокаВерсии, ".");
	Если РазрядыВерсии.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии);
	КонецЕсли;
	
	МножительРазряда = 10000;
	Для ИндексРазрядаОбратный = 0 По 1 Цикл
		ВерсияФорматаЧислом = ВерсияФорматаЧислом + Число(РазрядыВерсии[ИндексРазрядаОбратный])*МножительРазряда;
		МножительРазряда = МножительРазряда / 100;
	КонецЦикла;
	Возврат ВерсияФорматаЧислом;
КонецФункции
Функция ВидДокументаСдельныеРаботы(КомпонентыОбмена, ОрганизацияСсылка)
	Результат = Справочники.ВидыДокументовВводДанныхДляРасчетаЗарплаты.ПустаяСсылка();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыДокументовВводДанныхДляРасчетаЗарплаты.Ссылка КАК ВидДокумента,
	|	ВЫБОР
	|		КОГДА ВидыДокументовВводДанныхДляРасчетаЗарплаты.Организация = &Организация
	|			ТОГДА 3
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ШаблоныВводаИсходныхДанных КАК Таблица_ШаблоныВводаИсходныхДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовВводДанныхДляРасчетаЗарплаты КАК ВидыДокументовВводДанныхДляРасчетаЗарплаты
	|		ПО (Таблица_ШаблоныВводаИсходныхДанных.Шаблон = ВидыДокументовВводДанныхДляРасчетаЗарплаты.Ссылка)
	|ГДЕ
	|	Таблица_ШаблоныВводаИсходныхДанных.Ссылка = &УзелОбмена
	|	И (ВидыДокументовВводДанныхДляРасчетаЗарплаты.Организация = &Организация
	|			ИЛИ ВидыДокументовВводДанныхДляРасчетаЗарплаты.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыДокументовВводДанныхДляРасчетаЗарплаты.Ссылка,
	|	ВЫБОР
	|		КОГДА ВидыДокументовВводДанныхДляРасчетаЗарплаты.Организация = &Организация
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ВидыДокументовВводДанныхДляРасчетаЗарплаты КАК ВидыДокументовВводДанныхДляРасчетаЗарплаты
	|ГДЕ
	|	ВидыДокументовВводДанныхДляРасчетаЗарплаты.ВидыРаботЗаполняютсяВДокументе
	|	И НЕ ВидыДокументовВводДанныхДляРасчетаЗарплаты.ВыполненныеРаботыРаспределяютсяПоСотрудникам
	|	И НЕ ВидыДокументовВводДанныхДляРасчетаЗарплаты.ВыполненныеРаботыВводятсяСводно
	|	И НЕ ВидыДокументовВводДанныхДляРасчетаЗарплаты.ПометкаУдаления
	|	И (ВидыДокументовВводДанныхДляРасчетаЗарплаты.Организация = &Организация
	|			ИЛИ ВидыДокументовВводДанныхДляРасчетаЗарплаты.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ");
	Запрос.УстановитьПараметр("УзелОбмена", КомпонентыОбмена.УзелКорреспондента);
	Запрос.УстановитьПараметр("Организация", ОрганизацияСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ВидДокумента;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Процедура ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, ЕстьДопРеквизиты = Ложь)
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат;
	КонецЕсли;
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.0") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
	ТаблицаДопРеквизитов.Колонки.Добавить("Свойство");
	ТаблицаДопРеквизитов.Колонки.Добавить("ЗначениеСвойства");
	
	Если ЕстьДопРеквизиты Тогда
		ВыгрузкаДопРеквизитовИзТаблицыЗначений(КомпонентыОбмена, ДанныеИБ.ДополнительныеРеквизиты, ТаблицаДопРеквизитов);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Свойство КАК Свойство,
	|	Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения
	|ГДЕ Объект = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеИБДополнительныеРеквизиты = Запрос.Выполнить().Выгрузить();
	
	ВыгрузкаДопРеквизитовИзТаблицыЗначений(КомпонентыОбмена, ДанныеИБДополнительныеРеквизиты, ТаблицаДопРеквизитов);
	
	Если ТаблицаДопРеквизитов.КОличество() > 0 Тогда
		ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ТаблицаДопРеквизитов);
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьПодробныеДанныеФИО(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ФизическиеЛица.ДанныеФИО") Тогда
		// Выгрузка данных о ФИО.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Период КАК НачалоПериода,
		|	Фамилия,
		|	Имя,
		|	Отчество
		|ИЗ РегистрСведений.ФИОФизическихЛиц
		|ГДЕ ФизическоеЛицо = &ФизическоеЛицо";
		Запрос.УстановитьПараметр("ФизическоеЛицо", ДанныеИБ.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ДанныеXDTO.Вставить("ДанныеФИО", РезультатЗапроса.Выгрузить());
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузкаДопРеквизитовИзТаблицыЗначений(КомпонентыОбмена, ДанныеИБДополнительныеРеквизиты, ТаблицаДопРеквизитов)
	Для Каждого СтрокаТЧ Из ДанныеИБДополнительныеРеквизиты Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Свойство)
			Или Не ЗначениеЗаполнено(СтрокаТЧ.Значение) Тогда
			
			Продолжить;						
		КонецЕсли;
		
		ТипЗначенияСвойства = ТипЗнч(СтрокаТЧ.Значение);
		ЗначениеСвойства = Неопределено;
		
		ЗначениеСвойства = ЗначениеВИнструкциюПКО(КомпонентыОбмена, СтрокаТЧ.Значение);
		
		Если ЗначениеСвойства = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтрока = ТаблицаДопРеквизитов.Добавить();
		НовСтрока.Свойство			= СтрокаТЧ.Свойство;
		НовСтрока.ЗначениеСвойства	= ЗначениеСвойства;
		
	КонецЦикла;
КонецПроцедуры
Процедура ДобавитьИдентификаторПеречисленияПоСсылке(ТаблицаДанные, ИмяКолонки)
	ТаблицаДанные.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаДанные Из ТаблицаДанные Цикл
		// Для перечислений XMLСтрока возвращает идентификатор значения, как он задан в конфигураторе.
		СтрокаДанные[ИмяКолонки] = XMLСтрока(СтрокаДанные[ИмяКолонки + "Ссылка"]);
	КонецЦикла;
КонецПроцедуры
Процедура ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, ЕстьТЧДопРеквизиты = Ложь)
	Если Не (ДанныеXDTO.Свойство("ДополнительныеРеквизиты")
			И ЗначениеЗаполнено(ДанныеXDTO.ДополнительныеРеквизиты)) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() 
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	ТипДанныхСтрокой = ПолученныеДанные.Метаданные().ПолноеИмя();
	
	МассивСтрокДопРеквизиты = Новый Массив;
	МассивСтрокДопСведения = Новый Массив;
	
	Для Каждого СтрокаТЧ Из ДанныеXDTO.ДополнительныеРеквизиты Цикл
		ЭтоДопСведение = СтрокаТЧ.Свойство.Свойство("ЭтоДополнительноеСведение") И СтрокаТЧ.Свойство.ЭтоДополнительноеСведение;
		
		ДопРеквизитыСтрока = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения.Добавить();
		ДопРеквизитыСтрока.Свойство = СтрокаТЧ.Свойство;
		ДопРеквизитыСтрока.ЭтоДопСведение = ЭтоДопСведение;
		ДопРеквизитыСтрока.ТипОбъекта = ТипДанныхСтрокой;
	
		ЭтоПростойТип = Ложь;
		Результат = ЗначениеВИнструкциюПКО(КомпонентыОбмена, СтрокаТЧ.ЗначениеСвойства, ЭтоПростойТип);
		
		Если Результат = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоПростойТип Тогда
			ДопРеквизитыСтрока.ТипЗначения = ТипЗнч(СтрокаТЧ.ЗначениеСвойства);
		Иначе
			ЗначениеСвойства = Результат.Значение;
			Если Результат.ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов" Тогда
				Если Не (Результат.Значение.Свойство("Владелец")
						И ЗначениеЗаполнено(Результат.Значение.Владелец)) Тогда				
					Результат.Значение.Вставить("Владелец", СтрокаТЧ.Свойство);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураДанныхСтроки = Новый Структура("Свойство, Значение", СтрокаТЧ.Свойство, Результат);
		
		Если ЭтоДопСведение Тогда
			МассивСтрокДопСведения.Добавить(СтруктураДанныхСтроки);
		ИначеЕсли ЕстьТЧДопРеквизиты Тогда
			МассивСтрокДопРеквизиты.Добавить(СтруктураДанныхСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокДопРеквизиты.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеРеквизиты", МассивСтрокДопРеквизиты);
	КонецЕсли;
	
	Если МассивСтрокДопСведения.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеСведения", МассивСтрокДопСведения);
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузитьДополнительныеСведения(ОбъектСсылка, СтруктураДопСвойства, КомпонентыОбмена)
	Если Не СтруктураДопСвойства.Свойство("ДополнительныеСведения")
		Или СтруктураДопСвойства.ДополнительныеСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	ДопСведенияНаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	ДопСведенияНаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
	ДопСведенияНаборЗаписей.ОбменДанными.Загрузка = Истина;
	ПКО_ДопРеквизиты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ДополнительныеРеквизиты");
	Для Каждого СтрокаДопСведения Из СтруктураДопСвойства.ДополнительныеСведения Цикл
		СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
			СтрокаДопСведения.Свойство, 
			ПКО_ДопРеквизиты, 
			"ПолучитьСсылку").Ссылка;
			
		Если ТипЗнч(СтрокаДопСведения.Значение) = Тип("Структура") Тогда
			ПКО_ЗначениеСвойства = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,СтрокаДопСведения.Значение.ИмяПКО);
			ЗначениеСвойства = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
					СтрокаДопСведения.Значение.Значение, 
					ПКО_ЗначениеСвойства, 
					"ПолучитьСсылку").Ссылка;
		Иначе
			ЗначениеСвойства = СтрокаДопСведения.Значение;
		КонецЕсли;
		НовЗапись = ДопСведенияНаборЗаписей.Добавить();
		НовЗапись.Объект = ОбъектСсылка;
		НовЗапись.Свойство = СвойствоСсылка;
		НовЗапись.Значение = ЗначениеСвойства;
	КонецЦикла;	
	ДопСведенияНаборЗаписей.Записать();
КонецПроцедуры
Процедура ЗагрузитьПодробныеДанныеФИО(КомпонентыОбмена, ПолученныеДанные, ФизЛицоСсылка)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ФизическиеЛица.ДанныеФИО")
		И ПолученныеДанные.ДополнительныеСвойства.Свойство("ПодробныеДанныеФИО") Тогда	
		
		НаборЗаписейФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписейФИО.Отбор.ФизическоеЛицо.Установить(ФизЛицоСсылка);
		Для Каждого СтрокаФИО Из ПолученныеДанные.ДополнительныеСвойства.ПодробныеДанныеФИО Цикл
			НовЗапись = НаборЗаписейФИО.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗапись, СтрокаФИО);
			НовЗапись.ФизическоеЛицо = ФизЛицоСсылка;
			НовЗапись.Период = СтрокаФИО.НачалоПериода;
		КонецЦикла;
		НаборЗаписейФИО.ОбменДанными.Загрузка = Истина;
		НаборЗаписейФИО.Записать();
		
	Иначе 
		// Запись ФИО по наименованию физ.лица.
		ФИОСтрокой = ПолученныеДанные.Наименование;
		//++ НЕ УТ
		ФИОСтрокой = ПолученныеДанные.ФИО;
		//-- НЕ УТ
		СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИОСтрокой);
		ДанныеФИО = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(,Новый Структура("ФизическоеЛицо", ФизЛицоСсылка));
		Если ДанныеФИО.Количество() > 0 
			И ДанныеФИО[0].Фамилия = СтруктураФИО.Фамилия
			И ДанныеФИО[0].Имя = СтруктураФИО.Имя
			И ДанныеФИО[0].Отчество = СтруктураФИО.Отчество Тогда
			Возврат;
		КонецЕсли;
		НаборЗаписейФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписейФИО.Отбор.ФизическоеЛицо.Установить(ФизЛицоСсылка);
	
		Если СтруктураФИО.Фамилия = Неопределено 
			И СтруктураФИО.Имя = Неопределено
			И СтруктураФИО.Отчество = Неопределено Тогда
			НаборЗаписейФИО.Записать();
			Возврат;
		КонецЕсли;
		НовЗапись = НаборЗаписейФИО.Добавить();
		ЗаполнитьЗначенияСвойств(НовЗапись, СтруктураФИО, "Фамилия, Имя, Отчество");
		НовЗапись.ФизическоеЛицо = ФизЛицоСсылка;
		НовЗапись.Период = ТекущаяДатаСеанса();
		
		НаборЗаписейФИО.ОбменДанными.Загрузка = Истина;
		НаборЗаписейФИО.Записать();
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO)
	ДанныеXDTO.Вставить("Валюта", ЗначениеВИнструкциюПКО(КомпонентыОбмена, ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты()));
	ДанныеXDTO.Вставить("Статус", "НеСогласована");
КонецПроцедуры
Процедура ЗаполнитьПодразделениеПоУмолчанию(ТаблицаДанные)
	Для Каждого СтрокаДанные Из ТаблицаДанные Цикл
		Если ЗначениеЗаполнено(СтрокаДанные["ПодразделениеПредприятия"]) Тогда
			СтрокаДанные["Подразделение"] = СтрокаДанные["ПодразделениеПредприятия"];
			Продолжить;
		КонецЕсли;
		
		ПодразделениеПоУмолчанию = Новый Структура;
		ПодразделениеПоУмолчанию.Вставить("Наименование", "Подразделение по умолчанию");
		
		СтрокаДанные["Подразделение"] = Новый Структура("Значение, ИмяПКО",
			ПодразделениеПоУмолчанию, "Справочник_Подразделения_ИзСтруктуры");
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьРасшифровкуПлатежаПоВедомости(ДанныеИБ, ДанныеXDTO)
	ВидВедомости = ДанныеИБ.Метаданные().ПолноеИмя();
	
	Если ВидВедомости = "Документ.ВедомостьНаВыплатуЗарплатыПеречислением" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВедомостьЗарплата.ФизическоеЛицо КАК Сотрудник,
		|	ВедомостьЗарплата.БанковскийСчет КАК БанковскийСчет,	
		|	Ведомость.Номер КАК НомерВедомостиНаВыплатуЗарплаты,
		|	Ведомость.Дата КАК ДатаВедомостиНаВыплатуЗарплаты,
		|	СУММА(ВедомостьЗарплата.КВыплате + ВедомостьЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК Сумма
		|ИЗ
		|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением КАК Ведомость
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Зарплата КАК ВедомостьЗарплата
		|		ПО ВедомостьЗарплата.Ссылка = Ведомость.Ссылка
		|ГДЕ
		|	Ведомость.Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ВедомостьЗарплата.ФизическоеЛицо,
		|	ВедомостьЗарплата.БанковскийСчет,
		|	Ведомость.Номер,
		|	Ведомость.Дата";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Ведомость.СуммаПоДокументу КАК Сумма,
		|	Ведомость.Номер КАК НомерВедомостиНаВыплатуЗарплаты,
		|	Ведомость.Дата КАК ДатаВедомостиНаВыплатуЗарплаты
		|ИЗ
		|	&ДокументВедомостьНаВыплатуЗарплаты КАК Ведомость
		|ГДЕ
		|	Ведомость.Ссылка = &Ссылка";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДокументВедомостьНаВыплатуЗарплаты", ВидВедомости);
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
Процедура ЗаполнитьРасшифровкуПлатежаПоВедомости_НДФЛ(ДанныеИБ, ДанныеXDTO)
	ВидВедомости = ДанныеИБ.Метаданные().ПолноеИмя();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(Ведомость_НДФЛ.Сумма) КАК Сумма
	|ИЗ
	|	&ДокументВедомостьНаВыплатуЗарплаты_НДФЛ КАК Ведомость_НДФЛ
	|ГДЕ
	|	Ведомость_НДФЛ.Ссылка = &Ссылка";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДокументВедомостьНаВыплатуЗарплаты_НДФЛ", ВидВедомости + ".НДФЛ");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
Процедура ЗаполнитьРасшифровкуПлатежаПоПлатежноеПоручение_НД(ДанныеИБ, ДанныеXDTO)
	// РасшифровкаПлатежа: Сумма
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ВедомостьНаВыплатуЗарплатыВБанкНДФЛ.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение.Ведомости КАК ПлатежноеПоручениеВедомости
	|		ПО ПлатежноеПоручениеВедомости.Ссылка = ПлатежноеПоручение.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|		ПО ВедомостьНаВыплатуЗарплатыВБанк.Ссылка = ПлатежноеПоручениеВедомости.Ведомость
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк.НДФЛ КАК ВедомостьНаВыплатуЗарплатыВБанкНДФЛ
	|		ПО ВедомостьНаВыплатуЗарплатыВБанкНДФЛ.Ссылка = ВедомостьНаВыплатуЗарплатыВБанк.Ссылка
	|ГДЕ
	|	ПлатежноеПоручениеВедомости.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РасшифровкаПлатежа =Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
Процедура ЗаполнитьРеквизиты(ДанныеПриемник, ДанныеИсточник, СтрокаРеквизиты, Перезаполнять = Ложь)
	Реквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаРеквизиты, ",", Истина, Истина);
	Для Каждого Реквизит Из Реквизиты Цикл
		ЗначенияПриемник = Новый Структура(Реквизит);
		ЗаполнитьЗначенияСвойств(ЗначенияПриемник, ДанныеПриемник);
		
		ЗначенияИсточник = Новый Структура(Реквизит);
		ЗаполнитьЗначенияСвойств(ЗначенияИсточник, ДанныеИсточник);
		
		Если ЗначениеЗаполнено(ЗначенияИсточник[Реквизит])
			И (Не ЗначениеЗаполнено(ЗначенияПриемник[Реквизит]) или Перезаполнять)  Тогда
			ЗаполнитьЗначенияСвойств(ДанныеПриемник, ЗначенияИсточник);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСтрокуКонтактнойИнформацией(СтрокаКИ)
	XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(СтрокаКИ.ЗначенияПолей, СтрокаКИ.Тип, );
	
	Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
	
		ИЛИ СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
	
		СтрокаКИ.НомерТелефона = XDTOКонтактная.Представление;
	
		СтрокаКИ.НомерТелефонаБезКодов = XDTOКонтактная.Состав.Номер;
	
	ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
	
		СтрокаКИ.Страна = XDTOКонтактная.Состав.Страна;
	
		Если XDTOКонтактная.Состав.Состав <> Неопределено
			И ТипЗнч(XDTOКонтактная.Состав.Состав) <> Тип("Строка") Тогда
	
			СтрокаКИ.Регион = XDTOКонтактная.Состав.Состав.СубъектРФ;
	
			СтрокаКИ.Город = XDTOКонтактная.Состав.Состав.Город;
	
		КонецЕсли;
	
	ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
	
		СтрокаКИ.АдресЭП = XDTOКонтактная.Состав.Значение;
	
		ПозицияСобаки = Найти(XDTOКонтактная.Состав.Значение, "@");
	
		Если ПозицияСобаки <> 0 Тогда
	
			СтрокаКИ.ДоменноеИмяСервера = Сред(XDTOКонтактная.Состав.Значение, ПозицияСобаки + 1);
	
		КонецЕсли;
	
	КонецЕсли;
	
	// Заполнение представления
	
	Если Найти(XDTOКонтактная.Представление, Символы.ПС) = 0 Тогда
	
		СтрокаКИ.Представление = XDTOКонтактная.Представление;
	
	Иначе
	
		СтрокаПредставление = "";
	
		Если СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
	
			СтруктураПолейКИ = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(XDTOКонтактная.Представление, СтрокаКИ.Вид);
	
			УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураПолейКИ, СтрокаПредставление);
	
		ИначеЕсли СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")
	
			ИЛИ СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Факс") Тогда
	
			СтруктураПолейКИ = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(XDTOКонтактная.Представление, СтрокаКИ.Вид);
	
			
			СтруктураПолейКИПолная = Новый Структура("КодСтраны,КодГорода,НомерТелефона,Добавочный,Комментарий");
			ЗаполнитьЗначенияСвойств(СтруктураПолейКИПолная, СтруктураПолейКИ);
	
			СтрокаПредставление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
				СтруктураПолейКИПолная.КодСтраны, СтруктураПолейКИПолная.КодГорода,
				СтруктураПолейКИПолная.НомерТелефона, СтруктураПолейКИПолная.Добавочный, 
				СтруктураПолейКИПолная.Комментарий);
			
	
		Иначе
	
			СтрокаПредставление = СтрЗаменить(XDTOКонтактная.Представление, Символы.ПС, ",");
	
		КонецЕсли;
	
		
	
		СтрокаКИ.Представление = СтрокаПредставление;
	
	КонецЕсли;
КонецПроцедуры
Функция ЗначениеВИнструкциюПКО(КомпонентыОбмена, Значение, ЭтоПростойТип = Ложь, ПравилоНайдено = Ложь)
	// Параметры:
	// КомпонентыОбмена - структура компонентов обмена в рамках текущего сеанса;
	// Значение - значение, которое необходимо поместить в свойство объекта XDTO;
	// ЭтоПростойТип - исходящий параметр. Указывает, является ли тип переданного значения примитивным (Число, Строка,
	//                 Булево, Дата);
	// ПравилоНайдено - определяет, было ли найдено правило конвертации. Если правило найдено, но Результат = Неопределено,
	//                  значит, было найдено более одного ПКО для значения.
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЭтоОтправка		= (КомпонентыОбмена.НаправлениеОбмена = "Отправка");
	ЭтоПолучение	= (КомпонентыОбмена.НаправлениеОбмена = "Получение");
	
	ТипЗначенияСвойства = ТипЗнч(Значение);
	
	Если ЭтоПолучение
		И ТипЗнч(Значение) = Тип("Структура")
		И Значение.Свойство("Ссылка") Тогда
		
		ТипЗначенияСвойства = Значение.Ссылка.ТипЗначенияXDTO;
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура")
		И Значение.Свойство("ИмяПКО") Тогда
		
		Возврат Новый Структура("Значение, ИмяПКО", Значение, Значение.ИмяПКО);
	КонецЕсли;
	
	Если ТипЗначенияСвойства = Тип("Число") 
		Или ТипЗначенияСвойства = Тип("Строка")
		Или ТипЗначенияСвойства = Тип("Булево")
		Или ТипЗначенияСвойства = Тип("Дата") Тогда
		
		Результат = Значение;
		ЭтоПростойТип = Истина;
	Иначе
		СтрокиПКО = Новый Массив;
		
		Если ЭтоОтправка Тогда	
			СтрокиПКО = КомпонентыОбмена.ПравилаКонвертацииОбъектов.НайтиСтроки(Новый Структура("ТипДанных", ТипЗначенияСвойства));
		КонецЕсли;
		
		Если ЭтоПолучение Тогда
			СтрокиПКО = КомпонентыОбмена.ПравилаКонвертацииОбъектов.НайтиСтроки(Новый Структура("ТипСсылкиXDTO", ТипЗначенияСвойства));
		КонецЕсли;
	
		// Ищем только однозначное соответствие.
		// Если правил будет найдено больше одного, считаем, что конвертация не выполнена.
		ЭтоГруппа = Неопределено;
				
		Для Каждого СтрокаПКО Из СтрокиПКО Цикл
			Если ЭтоОтправка Тогда
				Если СтрокаПКО.ЭтоСправочник Тогда
					Если ЭтоГруппа = Неопределено
						И СтрокаПКО.ОбъектДанных.Иерархический
						И СтрокаПКО.ОбъектДанных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
						ЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Значение, "ЭтоГруппа");
					Иначе
						ЭтоГруппа = Ложь;
					КонецЕсли;
					
					Если ЭтоГруппа
							И Не СтрокаПКО.ПравилоДляГруппыСправочника
						Или Не ЭтоГруппа
							И СтрокаПКО.ПравилоДляГруппыСправочника Тогда
						
						Продолжить;					
					КонецЕсли;			
				Иначе
					// Прочие варианты проверок						
				КонецЕсли;
			КонецЕсли;
			
			Если ПравилоНайдено Тогда
				Результат = Неопределено;
				Прервать;
			Иначе
				Результат = Новый Структура("Значение, ИмяПКО", Значение, СтрокаПКО.ИмяПКО);
				ПравилоНайдено = Истина;
			КонецЕсли;		
		КонецЦикла;			
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Процедура ОтложеннаяОбработка_ДанныеДляРасчетаЗарплаты(КомпонентыОбмена, Объект)
	Если Не ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Объект.ВидДокумента = ВидДокументаСдельныеРаботы(КомпонентыОбмена, Объект.Организация);
	КонецЕсли;
	
	Расценки = Объект.ВыполненныеРаботы.Выгрузить();
	Расценки.Свернуть("ВидРабот, Расценка");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Расценки.ВидРабот,
	|	Расценки.Расценка
	|ПОМЕСТИТЬ РасценкиВДокументе
	|ИЗ
	|	&Расценки КАК Расценки
	|ГДЕ
	|	Расценки.Расценка > 0
	|;
	|ВЫБРАТЬ
	|	&Дата КАК Период,
	|	РасценкиВДокументе.ВидРабот КАК ВидРабот,
	|	РасценкиВДокументе.Расценка КАК Расценка
	|ИЗ
	|	РасценкиВДокументе КАК РасценкиВДокументе
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасценкиРаботСотрудников.СрезПоследних(&Дата, ) КАК РасценкиРаботСотрудниковСрезПоследних
	|		ПО РасценкиРаботСотрудниковСрезПоследних.ВидРабот = РасценкиВДокументе.ВидРабот
	|ГДЕ
	|	РасценкиВДокументе.Расценка <> ЕСТЬNULL(РасценкиРаботСотрудниковСрезПоследних.Расценка, 0)");
	Запрос.УстановитьПараметр("Расценки", Расценки);
	Запрос.УстановитьПараметр("Дата", НачалоДня(Объект.Дата));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.РасценкиРаботСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидРабот.Установить(Выборка.ВидРабот);
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Организации(Объект)
	Если ЗначениеЗаполнено(Объект.ГоловнаяОрганизация) Тогда
		Объект.ОбособленноеПодразделение = (Не Объект.ГоловнаяОрганизация = Объект.Ссылка);
	Иначе
		Объект.ОбособленноеПодразделение = Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ГоловнаяОрганизация)
		И Не Объект.ОбособленноеПодразделение Тогда
		Объект.ГоловнаяОрганизация = Объект.Ссылка;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.РайонныйКоэффициент) Тогда
		Объект.РайонныйКоэффициент = 1;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_РегистрацииВНалоговомОргане(Объект, КомпонентыОбмена)
	Если Объект.ДополнительныеСвойства.Свойство("ЭтоОсновнаяРегистрация")
		И ОбщегоНазначения.СсылкаСуществует(Объект.Владелец)
		И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "РегистрацияВНалоговомОргане") = Объект.Ссылка Тогда
		
		ОрганизацияОбъект = Объект.Владелец.ПолучитьОбъект();
		ОрганизацияОбъект.РегистрацияВНалоговомОргане = Объект.Ссылка;
		ОрганизацияОбъект.Записать();
		
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ФизЛица(Объект, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(Объект.ГруппаДоступа) Тогда
		Объект.ГруппаДоступа = ЭлементПоУмолчанию_ГруппаДоступаФизЛица(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
КонецПроцедуры
Процедура ПередКонвертациейЗУП30(КомпонентыОбмена)
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
		ПараметрыКонвертации.Вставить("ГруппаДоступаФизЛицПоУмолчанию");
		
		// ЗагруженныеДопРеквизитыИСведения
		// Инициализация таблицы для заполнения наборов дополнительных реквизитов и сведений.
		ДопРеквизитыИСведения = Новый ТаблицаЗначений;
		ДопРеквизитыИСведения.Колонки.Добавить("Свойство");
		ДопРеквизитыИСведения.Колонки.Добавить("ЭтоДопСведение");
		ДопРеквизитыИСведения.Колонки.Добавить("ТипОбъекта");
		ДопРеквизитыИСведения.Колонки.Добавить("ТипЗначения");
		
		ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения = ДопРеквизитыИСведения;
	КонецЕсли;
КонецПроцедуры
Процедура ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO)
	Если ДанныеИБ.КонтактнаяИнформация.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТабКонтактнаяИнформация = Новый ТаблицаЗначений;
	ТабКонтактнаяИнформация.Колонки.Добавить("ЗначенияПолей");
	ТабКонтактнаяИнформация.Колонки.Добавить("ВидКонтактнойИнформации");
	ТабКонтактнаяИнформация.Колонки.Добавить("НаименованиеКонтактнойИнформации");
	
	Для Каждого СтрокаКИ Из ДанныеИБ.КонтактнаяИнформация Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКИ.Вид)
			ИЛИ (НЕ ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) И НЕ ЗначениеЗаполнено(СтрокаКИ.Представление)) Тогда
			Продолжить;
		КонецЕсли;
	
		СвойстваВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКИ.Вид, "Наименование,Предопределенный");
		СтрокаТЗКИ = ТабКонтактнаяИнформация.Добавить();
	
		Если Лев(СокрЛ(СтрокаКИ.ЗначенияПолей),1) = "<" Тогда
		    // КИ в правильном формате.
		    СтрокаТЗКИ.ЗначенияПолей = СокрЛП(СтрокаКИ.ЗначенияПолей);
		Иначе
		    ЗначенияПолей = "";
		    // Попытка №1.
		    Если ЗначениеЗаполнено(СокрЛП(СтрокаКИ.ЗначенияПолей)) Тогда 
		    	ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СокрЛП(СтрокаКИ.ЗначенияПолей), СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    Если Лев(СокрЛ(ЗначенияПолей),1) <> "<" Тогда
		    	// Попытка №2.
		        ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    СтрокаТЗКИ.ЗначенияПолей = ЗначенияПолей;
		КонецЕсли;
	
		Если СвойстваВидаКИ.Предопределенный
			И Не СтрокаКИ.Вид = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации")
			И Не СтрокаКИ.Вид = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица") Тогда
	
			СтрокаТЗКИ.ВидКонтактнойИнформации = СтрокаКИ.Вид;
	
		Иначе
	
			// Получение наименования значения перечисления.
			ИндексТипаКИ = Перечисления.ТипыКонтактнойИнформации.Индекс(СтрокаКИ.Тип);
			ИмяТипаКИ = Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления[ИндексТипаКИ].Имя;
	
			СтрокаТЗКИ.ВидКонтактнойИнформации = "ПользовательскаяКИ"+ИмяТипаКИ;
			СтрокаТЗКИ.НаименованиеКонтактнойИнформации = СвойстваВидаКИ.Наименование;
		КонецЕсли;
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("КонтактнаяИнформация", ТабКонтактнаяИнформация);
КонецПроцедуры
Процедура ПолучитьКонтактнуюИнформациюФизическогоЛица(ДанныеXDTO, ПолученныеДанные)
	Если ДанныеXDTO.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
			ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
			ТекВидКИ = Неопределено;
			Если Лев(СокрЛП(ВидКИСтрокой),18) = "ПользовательскаяКИ" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(СтрокаXDTO.НаименованиеКонтактнойИнформации,,Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);
				Если НЕ ЗначениеЗаполнено(ТекВидКИ) Тогда
					ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
					ВидКИОбъект.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица;
					ВидКИОбъект.Наименование = СтрокаXDTO.НаименованиеКонтактнойИнформации;
					ИмяТипаКИ = СтрЗаменить(СокрЛП(ВидКИСтрокой),"ПользовательскаяКИ","");
					ВидКИОбъект.Тип = Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ];
					ВидКИОбъект.Используется = Истина;
					ВидКИОбъект.Записать();
					ТекВидКИ = ВидКИОбъект.Ссылка;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;		
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;		
			ИначеЕсли ВидКИСтрокой = "ТелефонДомашний" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;		
			ИначеЕсли ВидКИСтрокой = "ТелефонРабочий" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;		
			Иначе
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТекВидКИ) Тогда
				Продолжить;
			КонецЕсли;
	
			ТекТипКИ = ТекВидКИ.Тип;	
			СтрокаКИ = ПолученныеДанные.КонтактнаяИнформация.Добавить();
			ЗначенияПолейСтрокой = СокрЛП(СтрокаXDTO.ЗначенияПолей);
			СтрокаКИ.ЗначенияПолей = ЗначенияПолейСтрокой;
			СтрокаКИ.Вид = ТекВидКИ;
			СтрокаКИ.Тип = ТекТипКИ;
			
			ЗаполнитьСтрокуКонтактнойИнформацией(СтрокаКИ);
		
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры
Функция СвойствоФорматаОбмена(КомпонентыОбмена, ИмяСвойства)
	Результат = Ложь;
	
	Если КомпонентыОбмена.ВерсияФорматаОбмена = "1.3" Тогда
		ПространствоИмен = "http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.3";
	ИначеЕсли КомпонентыОбмена.ВерсияФорматаОбмена = "1.2" Тогда
		ПространствоИмен = "http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.2";
	ИначеЕсли КомпонентыОбмена.ВерсияФорматаОбмена = "1.1" Тогда
		ПространствоИмен = "http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.1";
	ИначеЕсли КомпонентыОбмена.ВерсияФорматаОбмена = "1.0" Тогда
		ПространствоИмен = "http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.0";
	ИначеЕсли КомпонентыОбмена.ВерсияФорматаОбмена = "1.0.beta" Тогда
		ПространствоИмен = "http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.0.beta";
	Иначе
		Возврат Ложь;
	КонецЕсли;
	МассивСтрок = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ИмяСвойства);
	Если ФабрикаXDTO.Тип(Новый ТипДанныхXML(ИмяСвойства, ПространствоИмен)) <> Неопределено Тогда
		Результат = Истина;
	ИначеЕсли МассивСтрок.Количество() > 1 Тогда
		ИмяОбъекта = МассивСтрок[0] + "." + МассивСтрок[1];
		ТипФабрики = ФабрикаXDTO.Тип(Новый ТипДанныхXML(ИмяОбъекта, ПространствоИмен));
		Если ТипФабрики <> Неопределено Тогда
			Для Сч = 2 По МассивСтрок.Количество() - 1 Цикл
				ИмяТекОбъекта = МассивСтрок[Сч];
				Если ТипЗнч(ТипФабрики) = Тип("СвойствоXDTO") Тогда
					ТипФабрики = ТипФабрики.Тип.Свойства.Получить(ИмяТекОбъекта);
				Иначе
					ТипФабрики = ТипФабрики.Свойства.Получить(ИмяТекОбъекта);
				КонецЕсли;
				Если ТипФабрики = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли
			КонецЦикла;
			Результат = ТипФабрики <> Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Функция УправленческоеПодразделениеВедомостиНаВыплатуЗП(ДанныеИБ, ЭтоНДФЛ = Ложь)
	Подразделение = Неопределено;
	
	ВидВедомости = ДанныеИБ.Метаданные().ПолноеИмя();
	
	Если ЭтоНДФЛ Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СтруктураПредприятия.Ссылка, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение
		|ИЗ
		|	&ДокументВедомостьНаВыплату_НДФЛ КАК НДФЛ	
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО (СтруктураПредприятия.Источник = НДФЛ.Подразделение)
		|ГДЕ
		|	НДФЛ.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(СтруктураПредприятия.Ссылка, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))";
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДокументВедомостьНаВыплату_НДФЛ", ВидВедомости + ".НДФЛ");
	
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Если Не Выборка.Подразделение.Пустая() Тогда
				Подразделение = Выборка.Подразделение;
			КонецЕсли;
		КонецЕсли;
	Иначе
		КадровыеДанныеТЧ = КадровыйУчет.КадровыеДанныеСотрудников(
			Ложь,
			ДанныеИБ.Зарплата.ВыгрузитьКолонку("Сотрудник"),
			"МестоВСтруктуреПредприятия",
			КонецМесяца(ДанныеИБ.ПериодРегистрации));
			
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Т.ФизическоеЛицо,
		|	Т.Сотрудник,
		|	Т.МестоВСтруктуреПредприятия
		|ПОМЕСТИТЬ КадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КадровыеДанные.МестоВСтруктуреПредприятия, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(СтруктураПредприятия.Ссылка, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|		ИНАЧЕ КадровыеДанные.МестоВСтруктуреПредприятия
		|	КОНЕЦ КАК Подразделение
		|ИЗ
		|	&ДокументВедомостьНаВыплату_Зарплата КАК Зарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ КадровыеДанные КАК КадровыеДанные
		|		ПО (КадровыеДанные.Сотрудник = Зарплата.Сотрудник)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО (СтруктураПредприятия.Источник = Зарплата.Подразделение)
		|ГДЕ
		|	Зарплата.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КадровыеДанные.МестоВСтруктуреПредприятия, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(СтруктураПредприятия.Ссылка, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|		ИНАЧЕ КадровыеДанные.МестоВСтруктуреПредприятия
		|	КОНЕЦ";
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДокументВедомостьНаВыплату_Зарплата", ВидВедомости + ".Зарплата");
	
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("КадровыеДанные", КадровыеДанныеТЧ);
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Если Не Выборка.Подразделение.Пустая() Тогда
				Подразделение = Выборка.Подразделение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Подразделение = Неопределено Тогда
		// Подразделение бухгалтера или расчетчика
		ФизЛицоДляПодразделения = Неопределено;
		
		Если Не ДанныеИБ.Бухгалтер.Пустая() Тогда
			ФизЛицоДляПодразделения = ДанныеИБ.Бухгалтер;
		Иначе
			ФизЛицоДляПодразделения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ответственный, "ФизическоеЛицо");
		КонецЕсли;
		
		СписокФизЛиц = Новый Массив;
		СписокФизЛиц.Добавить(ФизЛицоДляПодразделения);
		ТаблицаСотрудники = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(СписокФизЛиц, Ложь, ДанныеИБ.Организация, КонецМесяца(ДанныеИБ.ПериодРегистрации));
		
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(
			Ложь,
			ТаблицаСотрудники.ВыгрузитьКолонку("Сотрудник"),
			"МестоВСтруктуреПредприятия, Подразделение",
			КонецМесяца(ДанныеИБ.ПериодРегистрации));
			
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.ФизическоеЛицо,
		|	Т.Сотрудник,
		|	Т.Подразделение,
		|	Т.МестоВСтруктуреПредприятия
		|ПОМЕСТИТЬ КадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КадровыеДанные.МестоВСтруктуреПредприятия, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(СтруктураПредприятия.Ссылка, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|		ИНАЧЕ КадровыеДанные.МестоВСтруктуреПредприятия
		|	КОНЕЦ КАК Подразделение
		|ИЗ
		|	КадровыеДанные КАК КадровыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО (СтруктураПредприятия.Источник = КадровыеДанные.Подразделение)");
		Запрос.УстановитьПараметр("КадровыеДанные", КадровыеДанные);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий()
			И Не Выборка.Подразделение.Пустая() Тогда
			Подразделение = Выборка.Подразделение;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Подразделение;
КонецФункции
Функция ЭлементПоУмолчанию_ГруппаДоступаФизЛица(ПараметрыКонвертации)
	ГруппаДоступа = Неопределено;
	Если ПараметрыКонвертации.ГруппаДоступаФизЛицПоУмолчанию = Неопределено Тогда
		
		НеобходимоСоздатьЭлемент = Ложь;
		
		НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Группа доступа по умолчанию'");
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
		|	ГруппыДоступаФизЛиц.Ссылка КАК ГруппаДоступаФизЛица,
		|	ВЫБОР
		|		КОГДА ГруппыДоступаФизЛиц.Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
		|ИЗ
		|	Справочник.ГруппыДоступаФизическихЛиц КАК ГруппыДоступаФизЛиц
		|ГДЕ
		|	НЕ ГруппыДоступаФизЛиц.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
		
		Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Количество() = 1 Или Выборка.ЭтоЭлементПоУмолчаниюДляОбмена Тогда
				ГруппаДоступа = Выборка.ГруппаДоступаФизЛица;
			Иначе
				НеобходимоСоздатьЭлемент = Истина;
			КонецЕсли;
		Иначе
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
		
		// Создание элемента для обмена с заданными параметрами
		Если НеобходимоСоздатьЭлемент Тогда
			
			ГруппаДоступаОбъект = Справочники.ГруппыДоступаФизическихЛиц.СоздатьЭлемент();
			ГруппаДоступаОбъект.Наименование = НаименованиеЭлементаДляОбменаПоУмолчанию;
			
			Попытка
				ГруппаДоступаОбъект.Записать();
				ГруппаДоступа = ГруппаДоступаОбъект.Ссылка;
			Исключение
				ГруппаДоступа = Справочники.ГруппыДоступаФизическихЛиц.ПустаяСсылка();
			КонецПопытки
		КонецЕсли;
		
		ПараметрыКонвертации.ГруппаДоступаФизЛицПоУмолчанию = ГруппаДоступа;
		
	Иначе
		ГруппаДоступа = ПараметрыКонвертации.ГруппаДоступаФизЛицПоУмолчанию;
	КонецЕсли;
	
	Возврат ГруппаДоступа;
КонецФункции

#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ЗагруженныеДопРеквизитыИСведения");
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_ВедомостьНаВыплатуЗПВКассу_ПриОбработке" Тогда 
		ПОД_Документ_ВедомостьНаВыплатуЗПВКассу_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВедомостьНаВыплатуЗППеречислением_ПриОбработке" Тогда 
		ПОД_Документ_ВедомостьНаВыплатуЗППеречислением_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВедомостьНаВыплатуЗПРаздатчиком_ПриОбработке" Тогда 
		ПОД_Документ_ВедомостьНаВыплатуЗПРаздатчиком_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ДоговорЗаймаСотруднику_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ДоговорЗаймаСотруднику_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПлатежноеПоручение_ПриОбработке" Тогда 
		ПОД_Документ_ПлатежноеПоручение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Банки_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Банки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ВидыРаботСотрудников_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ВидыРаботСотрудников_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_РегистрацииВНалоговомОргане_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_РегистрацииВНалоговомОргане_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СпособыОтраженияЗарплатыВБухУчете_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СпособыОтраженияЗарплатыВБухУчете_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ДанныеДляРасчетаЗарплаты_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ДанныеДляРасчетаЗарплаты_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Банки_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_Банки_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДокументыФизическихЛиц_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_ДокументыФизическихЛиц_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьНаВыплатуЗПВКассу_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьНаВыплатуЗПВКассу_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьНаВыплатуЗПВКассу_НДФЛ_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьНаВыплатуЗПВКассу_НДФЛ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьНаВыплатуЗППеречислением_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьНаВыплатуЗППеречислением_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьНаВыплатуЗППеречислением_НДФЛ_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьНаВыплатуЗППеречислением_НДФЛ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьНаВыплатуЗПРаздатчиком_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьНаВыплатуЗПРаздатчиком_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьНаВыплатуЗПРаздатчиком_НДФЛ_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьНаВыплатуЗПРаздатчиком_НДФЛ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ДоговорЗаймаСотруднику_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ДоговорЗаймаСотруднику_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_НачислениеОценочныхОбязательствПоОтпускам_ПриОтправкеДанных" Тогда 
		ПКО_Документ_НачислениеОценочныхОбязательствПоОтпускам_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтражениеЗарплатыВБухучете_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтражениеЗарплатыВБухучете_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатежноеПоручение_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлатежноеПоручение_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатежноеПоручение_НДФЛ_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлатежноеПоручение_НДФЛ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчетаКонтрагентов_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЗППроекты_КакБанковскиеСчета_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЗППроекты_КакБанковскиеСчета_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЗППроекты_КакКонтрагенты_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЗППроекты_КакКонтрагенты_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_ИзСтруктуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контрагенты_ИзСтруктуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ДанныеДляРасчетаЗарплаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ДанныеДляРасчетаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыДокументовФизическихЛиц_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыДокументовФизическихЛиц_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Пользователи_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_РегистрацииВНалоговомОргане_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СпособыОтраженияЗарплатыВБухУчете_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СпособыОтраженияЗарплатыВБухУчете_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СпособыОтраженияЗарплатыВБухУчете_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СпособыОтраженияЗарплатыВБухУчете_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ДанныеДляРасчетаЗарплаты" Тогда 
		ОтложеннаяОбработка_ДанныеДляРасчетаЗарплаты(
			Параметры.КомпонентыОбмена, Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Организации" Тогда 
		ОтложеннаяОбработка_Организации(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_РегистрацииВНалоговомОргане" Тогда 
		ОтложеннаяОбработка_РегистрацииВНалоговомОргане(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ФизЛица" Тогда 
		ОтложеннаяОбработка_ФизЛица(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
