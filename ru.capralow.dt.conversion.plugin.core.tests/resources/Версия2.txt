// Конвертация Тестирование от 01.01.0001 24:00:00
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	ПередКонвертацией();
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	ПослеКонвертации();
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	ПередОтложеннымЗаполнением();
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Число - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_МинимальныйПОДОтправки(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДОтправкиПроизвольноеБезПравил(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДОтправкиПроизвольноеНесколькоПравил(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДОтправкиПроизвольноеНесколькоПравилИОчистка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДОтправкиПроизвольноеОдноПравило(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДОтправкиПроизвольноеПолное(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДОтправкиПроизвольноеСобытие1(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДОтправкиПроизвольноеСобытие12(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДОтправкиПроизвольноеСобытие2(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДОтправкиСтандартноеБезПравил(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДОтправкиСтандартноеНесколькоПравил(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДОтправкиСтандартноеНесколькоПравилИОчистка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДОтправкиСтандартноеОдноПравило(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДОтправкиСтандартноеПолное(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДОтправкиСтандартноеСобытие1(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДОтправкиСтандартноеСобытие12(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДОтправкиСтандартноеСобытие2(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_МинимальныйПОДПолучения(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДПолученияПроизвольноеБезПравил(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДПолученияПроизвольноеНесколькоПравил(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДПолученияПроизвольноеОдноПравило(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДПолученияПроизвольноеПолное(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДПолученияПроизвольноеСобытие1(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДПолученияСтандартноеБезПравил(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДПолученияСтандартноеНесколькоПравил(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДПолученияСтандартноеОдноПравило(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДПолученияСтандартноеПолное(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОДПолученияСтандартноеСобытие1(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область МинимальныйПОДОтправки
Процедура ДобавитьПОД_МинимальныйПОДОтправки(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "МинимальныйПОДОтправки";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
КонецПроцедуры
#КонецОбласти
#Область ПОДОтправкиПроизвольноеБезПравил
Процедура ДобавитьПОД_ПОДОтправкиПроизвольноеБезПравил(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДОтправкиПроизвольноеБезПравил";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
КонецПроцедуры
#КонецОбласти
#Область ПОДОтправкиПроизвольноеНесколькоПравил
Процедура ДобавитьПОД_ПОДОтправкиПроизвольноеНесколькоПравил(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДОтправкиПроизвольноеНесколькоПравил";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКООтправкиПолное");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКООтправкиОбъектКонфигурацииФорматаСПолями");
КонецПроцедуры
#КонецОбласти
#Область ПОДОтправкиПроизвольноеНесколькоПравилИОчистка
Процедура ДобавитьПОД_ПОДОтправкиПроизвольноеНесколькоПравилИОчистка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДОтправкиПроизвольноеНесколькоПравилИОчистка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКООтправкиПолное");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКООтправкиОбъектКонфигурацииФорматаСПолями");
КонецПроцедуры
#КонецОбласти
#Область ПОДОтправкиПроизвольноеОдноПравило
Процедура ДобавитьПОД_ПОДОтправкиПроизвольноеОдноПравило(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДОтправкиПроизвольноеОдноПравило";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКООтправкиПолное");
КонецПроцедуры
#КонецОбласти
#Область ПОДОтправкиПроизвольноеПолное
Процедура ДобавитьПОД_ПОДОтправкиПроизвольноеПолное(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДОтправкиПроизвольноеПолное";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОДОтправкиПроизвольноеПолное_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_ПОДОтправкиПроизвольноеПолное_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКООтправкиПолное");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКООтправкиОбъектКонфигурацииФорматаСПолями");
КонецПроцедуры

Процедура ПОД_ПОДОтправкиПроизвольноеПолное_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Сообщить("ПриОбработке");
КонецПроцедуры

Функция ПОД_ПОДОтправкиПроизвольноеПолное_ВыборкаДанных(КомпонентыОбмена)
	Сообщить("ВыборкаДанных");
КонецФункции
#КонецОбласти
#Область ПОДОтправкиПроизвольноеСобытие1
Процедура ДобавитьПОД_ПОДОтправкиПроизвольноеСобытие1(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДОтправкиПроизвольноеСобытие1";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОДОтправкиПроизвольноеСобытие1_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
КонецПроцедуры

Процедура ПОД_ПОДОтправкиПроизвольноеСобытие1_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Сообщить("ПриОбработке");
КонецПроцедуры
#КонецОбласти
#Область ПОДОтправкиПроизвольноеСобытие12
Процедура ДобавитьПОД_ПОДОтправкиПроизвольноеСобытие12(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДОтправкиПроизвольноеСобытие12";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОДОтправкиПроизвольноеСобытие12_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_ПОДОтправкиПроизвольноеСобытие12_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
КонецПроцедуры

Процедура ПОД_ПОДОтправкиПроизвольноеСобытие12_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Сообщить("ПриОбработке");
КонецПроцедуры

Функция ПОД_ПОДОтправкиПроизвольноеСобытие12_ВыборкаДанных(КомпонентыОбмена)
	Сообщить("ВыборкаДанных");
КонецФункции
#КонецОбласти
#Область ПОДОтправкиПроизвольноеСобытие2
Процедура ДобавитьПОД_ПОДОтправкиПроизвольноеСобытие2(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДОтправкиПроизвольноеСобытие2";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_ПОДОтправкиПроизвольноеСобытие2_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
КонецПроцедуры

Функция ПОД_ПОДОтправкиПроизвольноеСобытие2_ВыборкаДанных(КомпонентыОбмена)
	Сообщить("ВыборкаДанных");
КонецФункции
#КонецОбласти
#Область ПОДОтправкиСтандартноеБезПравил
Процедура ДобавитьПОД_ПОДОтправкиСтандартноеБезПравил(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДОтправкиСтандартноеБезПравил";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
КонецПроцедуры
#КонецОбласти
#Область ПОДОтправкиСтандартноеНесколькоПравил
Процедура ДобавитьПОД_ПОДОтправкиСтандартноеНесколькоПравил(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДОтправкиСтандартноеНесколькоПравил";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКООтправкиПолное");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКООтправкиОбъектКонфигурацииФорматаСПолями");
КонецПроцедуры
#КонецОбласти
#Область ПОДОтправкиСтандартноеНесколькоПравилИОчистка
Процедура ДобавитьПОД_ПОДОтправкиСтандартноеНесколькоПравилИОчистка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДОтправкиСтандартноеНесколькоПравилИОчистка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКООтправкиПолное");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКООтправкиОбъектКонфигурацииФорматаСПолями");
КонецПроцедуры
#КонецОбласти
#Область ПОДОтправкиСтандартноеОдноПравило
Процедура ДобавитьПОД_ПОДОтправкиСтандартноеОдноПравило(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДОтправкиСтандартноеОдноПравило";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКООтправкиПолное");
КонецПроцедуры
#КонецОбласти
#Область ПОДОтправкиСтандартноеПолное
Процедура ДобавитьПОД_ПОДОтправкиСтандартноеПолное(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДОтправкиСтандартноеПолное";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОДОтправкиСтандартноеПолное_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_ПОДОтправкиСтандартноеПолное_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКООтправкиПолное");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКООтправкиОбъектКонфигурацииФорматаСПолями");
КонецПроцедуры

Процедура ПОД_ПОДОтправкиСтандартноеПолное_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Сообщить("ПриОбработке");
КонецПроцедуры

Функция ПОД_ПОДОтправкиСтандартноеПолное_ВыборкаДанных(КомпонентыОбмена)
	Сообщить("ВыборкаДанных");
КонецФункции
#КонецОбласти
#Область ПОДОтправкиСтандартноеСобытие1
Процедура ДобавитьПОД_ПОДОтправкиСтандартноеСобытие1(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДОтправкиСтандартноеСобытие1";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОДОтправкиСтандартноеСобытие1_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
КонецПроцедуры

Процедура ПОД_ПОДОтправкиСтандартноеСобытие1_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Сообщить("ПриОбработке");
КонецПроцедуры
#КонецОбласти
#Область ПОДОтправкиСтандартноеСобытие12
Процедура ДобавитьПОД_ПОДОтправкиСтандартноеСобытие12(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДОтправкиСтандартноеСобытие12";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОДОтправкиСтандартноеСобытие12_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_ПОДОтправкиСтандартноеСобытие12_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
КонецПроцедуры

Процедура ПОД_ПОДОтправкиСтандартноеСобытие12_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Сообщить("ПриОбработке");
КонецПроцедуры

Функция ПОД_ПОДОтправкиСтандартноеСобытие12_ВыборкаДанных(КомпонентыОбмена)
	Сообщить("ВыборкаДанных");
КонецФункции
#КонецОбласти
#Область ПОДОтправкиСтандартноеСобытие2
Процедура ДобавитьПОД_ПОДОтправкиСтандартноеСобытие2(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДОтправкиСтандартноеСобытие2";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_ПОДОтправкиСтандартноеСобытие2_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
КонецПроцедуры

Функция ПОД_ПОДОтправкиСтандартноеСобытие2_ВыборкаДанных(КомпонентыОбмена)
	Сообщить("ВыборкаДанных");
КонецФункции
#КонецОбласти
#КонецОбласти
#Область Получение
#Область МинимальныйПОДПолучения
Процедура ДобавитьПОД_МинимальныйПОДПолучения(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "МинимальныйПОДПолучения";
	ПравилоОбработки.ОбъектВыборкиФормат     = "";
КонецПроцедуры
#КонецОбласти
#Область ПОДПолученияПроизвольноеБезПравил
Процедура ДобавитьПОД_ПОДПолученияПроизвольноеБезПравил(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДПолученияПроизвольноеБезПравил";
	ПравилоОбработки.ОбъектВыборкиФормат     = "";
КонецПроцедуры
#КонецОбласти
#Область ПОДПолученияПроизвольноеНесколькоПравил
Процедура ДобавитьПОД_ПОДПолученияПроизвольноеНесколькоПравил(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДПолученияПроизвольноеНесколькоПравил";
	ПравилоОбработки.ОбъектВыборкиФормат     = "";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКОПолученияПолное");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКООтправкиПолученияПолное");
КонецПроцедуры
#КонецОбласти
#Область ПОДПолученияПроизвольноеОдноПравило
Процедура ДобавитьПОД_ПОДПолученияПроизвольноеОдноПравило(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДПолученияПроизвольноеОдноПравило";
	ПравилоОбработки.ОбъектВыборкиФормат     = "";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКОПолученияПолное");
КонецПроцедуры
#КонецОбласти
#Область ПОДПолученияПроизвольноеПолное
Процедура ДобавитьПОД_ПОДПолученияПроизвольноеПолное(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДПолученияПроизвольноеПолное";
	ПравилоОбработки.ОбъектВыборкиФормат     = "";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОДПолученияПроизвольноеПолное_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКОПолученияПолное");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКООтправкиПолученияПолное");
КонецПроцедуры

Процедура ПОД_ПОДПолученияПроизвольноеПолное_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Сообщить("ПриОбработке");
КонецПроцедуры
#КонецОбласти
#Область ПОДПолученияПроизвольноеСобытие1
Процедура ДобавитьПОД_ПОДПолученияПроизвольноеСобытие1(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДПолученияПроизвольноеСобытие1";
	ПравилоОбработки.ОбъектВыборкиФормат     = "";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОДПолученияПроизвольноеСобытие1_ПриОбработке";
КонецПроцедуры

Процедура ПОД_ПОДПолученияПроизвольноеСобытие1_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Сообщить("ПриОбработке");
КонецПроцедуры
#КонецОбласти
#Область ПОДПолученияСтандартноеБезПравил
Процедура ДобавитьПОД_ПОДПолученияСтандартноеБезПравил(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДПолученияСтандартноеБезПравил";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации";
КонецПроцедуры
#КонецОбласти
#Область ПОДПолученияСтандартноеНесколькоПравил
Процедура ДобавитьПОД_ПОДПолученияСтандартноеНесколькоПравил(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДПолученияСтандартноеНесколькоПравил";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКОПолученияПолное");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКООтправкиПолученияПолное");
КонецПроцедуры
#КонецОбласти
#Область ПОДПолученияСтандартноеОдноПравило
Процедура ДобавитьПОД_ПОДПолученияСтандартноеОдноПравило(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДПолученияСтандартноеОдноПравило";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКОПолученияПолное");
КонецПроцедуры
#КонецОбласти
#Область ПОДПолученияСтандартноеПолное
Процедура ДобавитьПОД_ПОДПолученияСтандартноеПолное(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДПолученияСтандартноеПолное";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОДПолученияСтандартноеПолное_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКОПолученияПолное");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКООтправкиПолученияПолное");
КонецПроцедуры

Процедура ПОД_ПОДПолученияСтандартноеПолное_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Сообщить("ПриОбработке");
КонецПроцедуры
#КонецОбласти
#Область ПОДПолученияСтандартноеСобытие1
Процедура ДобавитьПОД_ПОДПолученияСтандартноеСобытие1(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОДПолученияСтандартноеСобытие1";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОДПолученияСтандартноеСобытие1_ПриОбработке";
КонецПроцедуры

Процедура ПОД_ПОДПолученияСтандартноеСобытие1_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Сообщить("ПриОбработке");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_МинимальноеПКООтправки(ПравилаКонвертации);
		ДобавитьПКО_ПКООтправкиДвеТЧ(ПравилаКонвертации);
		ДобавитьПКО_ПКООтправкиОбъектКонфигурации(ПравилаКонвертации);
		ДобавитьПКО_ПКООтправкиОбъектКонфигурацииСПолями(ПравилаКонвертации);
		ДобавитьПКО_ПКООтправкиОбъектКонфигурацииФормата(ПравилаКонвертации);
		ДобавитьПКО_ПКООтправкиОбъектКонфигурацииФорматаСПолями(ПравилаКонвертации);
		ДобавитьПКО_ПКООтправкиОбъектФормата(ПравилаКонвертации);
		ДобавитьПКО_ПКООтправкиОбъектФорматаСПолями(ПравилаКонвертации);
		ДобавитьПКО_ПКООтправкиПолное(ПравилаКонвертации);
		ДобавитьПКО_ПКООтправкиСобытие1(ПравилаКонвертации);
		ДобавитьПКО_ПКООтправкиТЧ(ПравилаКонвертации);
		ДобавитьПКО_ПКООтправкиШапка(ПравилаКонвертации);
		ДобавитьПКО_ПКООтправкиШапкаТЧ(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_МинимальноеПКОПолучения(ПравилаКонвертации);
		ДобавитьПКО_МинимальноеПКОПолученияДляГруппы(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияДвеТЧ(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияИдентификация1СПолями(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияИдентификация2(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияИдентификация2СПолями(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияИдентификация3(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияИдентификация3СПолями(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияОбъектКонфигурации(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияОбъектКонфигурацииСПолями(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияОбъектКонфигурацииФормата(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияОбъектКонфигурацииФорматаСПолями(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияОбъектФормата(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияОбъектФорматаСПолями(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияПолное(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияСобытие1(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияСобытие12(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияСобытие13(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияСобытие2(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияСобытие23(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияСобытиеАлгоритмДваОбратный(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияСобытиеАлгоритмДваПрямой(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияСобытиеАлгоритмНесуществующий(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияСобытиеАлгоритмТриОбратный(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияСобытиеАлгоритмТриПрямой(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияТЧ(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияШапка(ПравилаКонвертации);
		ДобавитьПКО_ПКОПолученияШапкаТЧ(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_МинимальноеПКООтправкиПолучения(ПравилаКонвертации);
	ДобавитьПКО_ПКООтправкиПолученияДвеТЧ(ПравилаКонвертации);
	ДобавитьПКО_ПКООтправкиПолученияПолное(ПравилаКонвертации);
	ДобавитьПКО_ПКООтправкиПолученияСобытие1(ПравилаКонвертации);
	ДобавитьПКО_ПКООтправкиПолученияСобытие12(ПравилаКонвертации);
	ДобавитьПКО_ПКООтправкиПолученияСобытие123(ПравилаКонвертации);
	ДобавитьПКО_ПКООтправкиПолученияСобытие124(ПравилаКонвертации);
	ДобавитьПКО_ПКООтправкиПолученияСобытие13(ПравилаКонвертации);
	ДобавитьПКО_ПКООтправкиПолученияСобытие134(ПравилаКонвертации);
	ДобавитьПКО_ПКООтправкиПолученияСобытие14(ПравилаКонвертации);
	ДобавитьПКО_ПКООтправкиПолученияСобытиеАлгоритмДваОбратный(ПравилаКонвертации);
	ДобавитьПКО_ПКООтправкиПолученияСобытиеАлгоритмДваПрямой(ПравилаКонвертации);
	ДобавитьПКО_ПКООтправкиПолученияСобытиеАлгоритмНесуществующий(ПравилаКонвертации);
	ДобавитьПКО_ПКООтправкиПолученияСобытиеАлгоритмТриОбратный(ПравилаКонвертации);
	ДобавитьПКО_ПКООтправкиПолученияСобытиеАлгоритмТриПрямой(ПравилаКонвертации);
	ДобавитьПКО_ПКООтправкиПолученияТЧ(ПравилаКонвертации);
	ДобавитьПКО_ПКООтправкиПолученияШапка(ПравилаКонвертации);
	ДобавитьПКО_ПКООтправкиПолученияШапкаТЧ(ПравилаКонвертации);
КонецПроцедуры

Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

#Область Отправка
#Область МинимальноеПКООтправки
Процедура ДобавитьПКО_МинимальноеПКООтправки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "МинимальноеПКООтправки";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "";
	

КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиДвеТЧ
Процедура ДобавитьПКО_ПКООтправкиДвеТЧ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПКООтправкиДвеТЧ";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение", "ЗначениеСвойства");
	ДобавитьПКС(СвойстваТЧ, "",         "Свойство", 1,"НесуществующееПравило");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация",    "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "Вид", "ВидКонтактнойИнформации", ,"ВидыКонтактнойИнформации");

КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиОбъектКонфигурации
Процедура ДобавитьПКО_ПКООтправкиОбъектКонфигурации(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПКООтправкиОбъектКонфигурации";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "";
	

КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиОбъектКонфигурацииСПолями
Процедура ДобавитьПКО_ПКООтправкиОбъектКонфигурацииСПолями(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПКООтправкиОбъектКонфигурацииСПолями";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация", "", , "ПКООтправкиОбъектКонфигурации");
	ДобавитьПКС(СвойстваШапки, "ИНН",                 "");
	ДобавитьПКС(СвойстваШапки, "Наименование",        "Наименование");
	ДобавитьПКС(СвойстваШапки, "",                    "ГоловнаяОрганизация", 1, "ПКООтправкиОбъектФорматаСПолями");

КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиОбъектКонфигурацииФормата
Процедура ДобавитьПКО_ПКООтправкиОбъектКонфигурацииФормата(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПКООтправкиОбъектКонфигурацииФормата";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	

КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиОбъектКонфигурацииФорматаСПолями
Процедура ДобавитьПКО_ПКООтправкиОбъектКонфигурацииФорматаСПолями(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПКООтправкиОбъектКонфигурацииФорматаСПолями";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация", "", , "ПКООтправкиОбъектКонфигурации");
	ДобавитьПКС(СвойстваШапки, "ИНН",                 "");
	ДобавитьПКС(СвойстваШапки, "Наименование",        "Наименование");
	ДобавитьПКС(СвойстваШапки, "",                    "ГоловнаяОрганизация", 1, "ПКООтправкиОбъектФорматаСПолями");

КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиОбъектФормата
Процедура ДобавитьПКО_ПКООтправкиОбъектФормата(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПКООтправкиОбъектФормата";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	

КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиОбъектФорматаСПолями
Процедура ДобавитьПКО_ПКООтправкиОбъектФорматаСПолями(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПКООтправкиОбъектФорматаСПолями";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация", "", , "ПКООтправкиОбъектКонфигурации");
	ДобавитьПКС(СвойстваШапки, "ИНН",                 "");
	ДобавитьПКС(СвойстваШапки, "Наименование",        "Наименование");
	ДобавитьПКС(СвойстваШапки, "",                    "ГоловнаяОрганизация", 1, "ПКООтправкиОбъектФорматаСПолями");

КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиПолное
Процедура ДобавитьПКО_ПКООтправкиПолное(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПКООтправкиПолное";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ПКООтправкиПолное_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация", "", , "ПКООтправкиОбъектКонфигурации");
	ДобавитьПКС(СвойстваШапки, "ИНН",                 "");
	ДобавитьПКС(СвойстваШапки, "Наименование",        "Наименование");
	ДобавитьПКС(СвойстваШапки, "",                    "ГоловнаяОрганизация", 1, "ПКООтправкиОбъектФорматаСПолями");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение", "ЗначениеСвойства");
	ДобавитьПКС(СвойстваТЧ, "",         "Свойство", 1,"НесуществующееПравило");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация",    "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "Вид", "ВидКонтактнойИнформации", ,"ВидыКонтактнойИнформации");

КонецПроцедуры

Процедура ПКО_ПКООтправкиПолное_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Сообщить("ПриОтправкеДанных");
КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиСобытие1
Процедура ДобавитьПКО_ПКООтправкиСобытие1(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПКООтправкиСобытие1";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ПКООтправкиСобытие1_ПриОтправкеДанных";
	

КонецПроцедуры

Процедура ПКО_ПКООтправкиСобытие1_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Сообщить("ПриОтправкеДанных");
КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиТЧ
Процедура ДобавитьПКО_ПКООтправкиТЧ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПКООтправкиТЧ";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение", "ЗначениеСвойства");
	ДобавитьПКС(СвойстваТЧ, "",         "Свойство", 1,"НесуществующееПравило");

КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиШапка
Процедура ДобавитьПКО_ПКООтправкиШапка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПКООтправкиШапка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация", "", , "ПКООтправкиОбъектКонфигурации");
	ДобавитьПКС(СвойстваШапки, "ИНН",                 "");
	ДобавитьПКС(СвойстваШапки, "Наименование",        "Наименование");
	ДобавитьПКС(СвойстваШапки, "",                    "ГоловнаяОрганизация", 1, "ПКООтправкиОбъектФорматаСПолями");

КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиШапкаТЧ
Процедура ДобавитьПКО_ПКООтправкиШапкаТЧ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПКООтправкиШапкаТЧ";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация", "", , "ПКООтправкиОбъектКонфигурации");
	ДобавитьПКС(СвойстваШапки, "ИНН",                 "");
	ДобавитьПКС(СвойстваШапки, "Наименование",        "Наименование");
	ДобавитьПКС(СвойстваШапки, "",                    "ГоловнаяОрганизация", 1, "ПКООтправкиОбъектФорматаСПолями");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение", "ЗначениеСвойства");
	ДобавитьПКС(СвойстваТЧ, "",         "Свойство", 1,"НесуществующееПравило");

КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область МинимальноеПКОПолучения
Процедура ДобавитьПКО_МинимальноеПКОПолучения(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "МинимальноеПКОПолучения";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область МинимальноеПКОПолученияДляГруппы
Процедура ДобавитьПКО_МинимальноеПКОПолученияДляГруппы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "МинимальноеПКОПолученияДляГруппы";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияДвеТЧ
Процедура ДобавитьПКО_ПКОПолученияДвеТЧ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияДвеТЧ";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "",         "Свойство", 1,"НесуществующееПравило");
	ДобавитьПКС(СвойстваТЧ, "Значение", "ЗначениеСвойства");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация",    "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "Вид", "ВидКонтактнойИнформации", ,"ВидыКонтактнойИнформации");

КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияИдентификация1СПолями
Процедура ДобавитьПКО_ПКОПолученияИдентификация1СПолями(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияИдентификация1СПолями";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

	ПравилоКонвертации.ПоляПоиска.Добавить("ГоловнаяОрганизация");
	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,Префикс");
КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияИдентификация2
Процедура ДобавитьПКО_ПКОПолученияИдентификация2(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияИдентификация2";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	

КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияИдентификация2СПолями
Процедура ДобавитьПКО_ПКОПолученияИдентификация2СПолями(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияИдентификация2СПолями";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Ссылка");
КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияИдентификация3
Процедура ДобавитьПКО_ПКОПолученияИдентификация3(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияИдентификация3";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	

КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияИдентификация3СПолями
Процедура ДобавитьПКО_ПКОПолученияИдентификация3СПолями(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияИдентификация3СПолями";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	

	ПравилоКонвертации.ПоляПоиска.Добавить("ГоловнаяОрганизация");
	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,Префикс");
КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияОбъектКонфигурации
Процедура ДобавитьПКО_ПКОПолученияОбъектКонфигурации(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияОбъектКонфигурации";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияОбъектКонфигурацииСПолями
Процедура ДобавитьПКО_ПКОПолученияОбъектКонфигурацииСПолями(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияОбъектКонфигурацииСПолями";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация", "", , "ПКООтправкиОбъектКонфигурации");
	ДобавитьПКС(СвойстваШапки, "ИНН",                 "");
	ДобавитьПКС(СвойстваШапки, "Наименование",        "Наименование");
	ДобавитьПКС(СвойстваШапки, "",                    "ГоловнаяОрганизация", 1, "ПКООтправкиОбъектФорматаСПолями");

КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияОбъектКонфигурацииФормата
Процедура ДобавитьПКО_ПКОПолученияОбъектКонфигурацииФормата(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияОбъектКонфигурацииФормата";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияОбъектКонфигурацииФорматаСПолями
Процедура ДобавитьПКО_ПКОПолученияОбъектКонфигурацииФорматаСПолями(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияОбъектКонфигурацииФорматаСПолями";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация", "", , "ПКООтправкиОбъектКонфигурации");
	ДобавитьПКС(СвойстваШапки, "ИНН",                 "");
	ДобавитьПКС(СвойстваШапки, "Наименование",        "Наименование");
	ДобавитьПКС(СвойстваШапки, "",                    "ГоловнаяОрганизация", 1, "ПКООтправкиОбъектФорматаСПолями");

КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияОбъектФормата
Процедура ДобавитьПКО_ПКОПолученияОбъектФормата(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияОбъектФормата";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияОбъектФорматаСПолями
Процедура ДобавитьПКО_ПКОПолученияОбъектФорматаСПолями(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияОбъектФорматаСПолями";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация", "", , "ПКООтправкиОбъектКонфигурации");
	ДобавитьПКС(СвойстваШапки, "ИНН",                 "");
	ДобавитьПКС(СвойстваШапки, "Наименование",        "Наименование");
	ДобавитьПКС(СвойстваШапки, "",                    "ГоловнаяОрганизация", 1, "ПКООтправкиОбъектФорматаСПолями");

КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияПолное
Процедура ДобавитьПКО_ПКОПолученияПолное(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияПолное";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ПКОПолученияПолное_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПКОПолученияПолное_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ПослеЗагрузкиВсехДанныхТриПараметраПрямойПорядок";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация", "", , "ПКООтправкиОбъектКонфигурации");
	ДобавитьПКС(СвойстваШапки, "ИНН",                 "");
	ДобавитьПКС(СвойстваШапки, "Наименование",        "Наименование");
	ДобавитьПКС(СвойстваШапки, "",                    "ГоловнаяОрганизация", 1, "ПКООтправкиОбъектФорматаСПолями");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "",         "Свойство", 1,"НесуществующееПравило");
	ДобавитьПКС(СвойстваТЧ, "Значение", "ЗначениеСвойства");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация",    "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "Вид", "ВидКонтактнойИнформации", ,"ВидыКонтактнойИнформации");

	ПравилоКонвертации.ПоляПоиска.Добавить("ГоловнаяОрганизация");
	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,Префикс");
КонецПроцедуры

Процедура ПКО_ПКОПолученияПолное_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Сообщить("ПриКонвертацииДанныхXDTO");
КонецПроцедуры

Процедура ПКО_ПКОПолученияПолное_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Сообщить("ПередЗаписьюПолученныхДанных");
КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияСобытие1
Процедура ДобавитьПКО_ПКОПолученияСобытие1(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияСобытие1";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ПКОПолученияСобытие1_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры

Процедура ПКО_ПКОПолученияСобытие1_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Сообщить("ПриКонвертацииДанныхXDTO");
КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияСобытие12
Процедура ДобавитьПКО_ПКОПолученияСобытие12(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияСобытие12";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ПКОПолученияСобытие12_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПКОПолученияСобытие12_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры

Процедура ПКО_ПКОПолученияСобытие12_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Сообщить("ПриКонвертацииДанныхXDTO");
КонецПроцедуры

Процедура ПКО_ПКОПолученияСобытие12_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Сообщить("ПередЗаписьюПолученныхДанных");
КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияСобытие13
Процедура ДобавитьПКО_ПКОПолученияСобытие13(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияСобытие13";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ПКОПолученияСобытие13_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ПослеЗагрузкиВсехДанныхТриПараметраПрямойПорядок";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры

Процедура ПКО_ПКОПолученияСобытие13_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Сообщить("ПриКонвертацииДанныхXDTO");
КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияСобытие2
Процедура ДобавитьПКО_ПКОПолученияСобытие2(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияСобытие2";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПКОПолученияСобытие2_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры

Процедура ПКО_ПКОПолученияСобытие2_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Сообщить("ПередЗаписьюПолученныхДанных");
КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияСобытие23
Процедура ДобавитьПКО_ПКОПолученияСобытие23(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияСобытие23";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПКОПолученияСобытие23_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ПослеЗагрузкиВсехДанныхТриПараметраПрямойПорядок";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры

Процедура ПКО_ПКОПолученияСобытие23_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Сообщить("ПередЗаписьюПолученныхДанных");
КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияСобытиеАлгоритмДваОбратный
Процедура ДобавитьПКО_ПКОПолученияСобытиеАлгоритмДваОбратный(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияСобытиеАлгоритмДваОбратный";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ПослеЗагрузкиВсехДанныхДваПараметраОбратныйПорядок";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияСобытиеАлгоритмДваПрямой
Процедура ДобавитьПКО_ПКОПолученияСобытиеАлгоритмДваПрямой(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияСобытиеАлгоритмДваПрямой";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ПослеЗагрузкиВсехДанныхДваПараметраПрямойПорядок";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияСобытиеАлгоритмНесуществующий
Процедура ДобавитьПКО_ПКОПолученияСобытиеАлгоритмНесуществующий(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияСобытиеАлгоритмНесуществующий";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "НесуществующийАлгоритм";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияСобытиеАлгоритмТриОбратный
Процедура ДобавитьПКО_ПКОПолученияСобытиеАлгоритмТриОбратный(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияСобытиеАлгоритмТриОбратный";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ПослеЗагрузкиВсехДанныхТриПараметраОбратныйПорядок";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияСобытиеАлгоритмТриПрямой
Процедура ДобавитьПКО_ПКОПолученияСобытиеАлгоритмТриПрямой(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияСобытиеАлгоритмТриПрямой";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ПослеЗагрузкиВсехДанныхТриПараметраПрямойПорядок";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияТЧ
Процедура ДобавитьПКО_ПКОПолученияТЧ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияТЧ";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "",         "Свойство", 1,"НесуществующееПравило");
	ДобавитьПКС(СвойстваТЧ, "Значение", "ЗначениеСвойства");

КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияШапка
Процедура ДобавитьПКО_ПКОПолученияШапка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияШапка";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация", "", , "ПКООтправкиОбъектКонфигурации");
	ДобавитьПКС(СвойстваШапки, "ИНН",                 "");
	ДобавитьПКС(СвойстваШапки, "Наименование",        "Наименование");
	ДобавитьПКС(СвойстваШапки, "",                    "ГоловнаяОрганизация", 1, "ПКООтправкиОбъектФорматаСПолями");

КонецПроцедуры
#КонецОбласти
#Область ПКОПолученияШапкаТЧ
Процедура ДобавитьПКО_ПКОПолученияШапкаТЧ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКОПолученияШапкаТЧ";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация", "", , "ПКООтправкиОбъектКонфигурации");
	ДобавитьПКС(СвойстваШапки, "ИНН",                 "");
	ДобавитьПКС(СвойстваШапки, "Наименование",        "Наименование");
	ДобавитьПКС(СвойстваШапки, "",                    "ГоловнаяОрганизация", 1, "ПКООтправкиОбъектФорматаСПолями");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "",         "Свойство", 1,"НесуществующееПравило");
	ДобавитьПКС(СвойстваТЧ, "Значение", "ЗначениеСвойства");

КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область ОтправкаИПолучение
#Область МинимальноеПКООтправкиПолучения
Процедура ДобавитьПКО_МинимальноеПКООтправкиПолучения(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "МинимальноеПКООтправкиПолучения";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиПолученияДвеТЧ
Процедура ДобавитьПКО_ПКООтправкиПолученияДвеТЧ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКООтправкиПолученияДвеТЧ";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение", "ЗначениеСвойства");
	ДобавитьПКС(СвойстваТЧ, "",         "Свойство", 1,"НесуществующееПравило");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация",    "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "Вид", "ВидКонтактнойИнформации", ,"ВидыКонтактнойИнформации");

КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиПолученияПолное
Процедура ДобавитьПКО_ПКООтправкиПолученияПолное(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКООтправкиПолученияПолное";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_ПКООтправкиПолученияПолное_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ПКООтправкиПолученияПолное_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПКООтправкиПолученияПолное_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ПослеЗагрузкиВсехДанныхТриПараметраПрямойПорядок";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация", "", , "ПКООтправкиОбъектКонфигурации");
	ДобавитьПКС(СвойстваШапки, "ИНН",                 "");
	ДобавитьПКС(СвойстваШапки, "Наименование",        "Наименование");
	ДобавитьПКС(СвойстваШапки, "",                    "ГоловнаяОрганизация", 1, "ПКООтправкиОбъектФорматаСПолями");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение", "ЗначениеСвойства");
	ДобавитьПКС(СвойстваТЧ, "",         "Свойство", 1,"НесуществующееПравило");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация",    "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "Вид", "ВидКонтактнойИнформации", ,"ВидыКонтактнойИнформации");

	ПравилоКонвертации.ПоляПоиска.Добавить("ГоловнаяОрганизация");
	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,Префикс");
КонецПроцедуры

Процедура ПКО_ПКООтправкиПолученияПолное_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Сообщить("ПриОтправкеДанных");
КонецПроцедуры

Процедура ПКО_ПКООтправкиПолученияПолное_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Сообщить("ПриКонвертацииДанныхXDTO");
КонецПроцедуры

Процедура ПКО_ПКООтправкиПолученияПолное_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Сообщить("ПередЗаписьюПолученныхДанных");
КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиПолученияСобытие1
Процедура ДобавитьПКО_ПКООтправкиПолученияСобытие1(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКООтправкиПолученияСобытие1";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_ПКООтправкиПолученияСобытие1_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры

Процедура ПКО_ПКООтправкиПолученияСобытие1_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Сообщить("ПриОтправкеДанных");
КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиПолученияСобытие12
Процедура ДобавитьПКО_ПКООтправкиПолученияСобытие12(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКООтправкиПолученияСобытие12";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_ПКООтправкиПолученияСобытие12_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ПКООтправкиПолученияСобытие12_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры

Процедура ПКО_ПКООтправкиПолученияСобытие12_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Сообщить("ПриОтправкеДанных");
КонецПроцедуры

Процедура ПКО_ПКООтправкиПолученияСобытие12_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Сообщить("ПриКонвертацииДанныхXDTO");
КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиПолученияСобытие123
Процедура ДобавитьПКО_ПКООтправкиПолученияСобытие123(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКООтправкиПолученияСобытие123";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_ПКООтправкиПолученияСобытие123_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ПКООтправкиПолученияСобытие123_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПКООтправкиПолученияСобытие123_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры

Процедура ПКО_ПКООтправкиПолученияСобытие123_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Сообщить("ПриОтправкеДанных");
КонецПроцедуры

Процедура ПКО_ПКООтправкиПолученияСобытие123_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Сообщить("ПриКонвертацииДанныхXDTO");
КонецПроцедуры

Процедура ПКО_ПКООтправкиПолученияСобытие123_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Сообщить("ПередЗаписьюПолученныхДанных");
КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиПолученияСобытие124
Процедура ДобавитьПКО_ПКООтправкиПолученияСобытие124(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКООтправкиПолученияСобытие124";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_ПКООтправкиПолученияСобытие124_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ПКООтправкиПолученияСобытие124_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ПослеЗагрузкиВсехДанныхТриПараметраПрямойПорядок";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры

Процедура ПКО_ПКООтправкиПолученияСобытие124_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Сообщить("ПриОтправкеДанных");
КонецПроцедуры

Процедура ПКО_ПКООтправкиПолученияСобытие124_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Сообщить("ПриКонвертацииДанныхXDTO");
КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиПолученияСобытие13
Процедура ДобавитьПКО_ПКООтправкиПолученияСобытие13(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКООтправкиПолученияСобытие13";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_ПКООтправкиПолученияСобытие13_ПриОтправкеДанных";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПКООтправкиПолученияСобытие13_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры

Процедура ПКО_ПКООтправкиПолученияСобытие13_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Сообщить("ПриОтправкеДанных");
КонецПроцедуры

Процедура ПКО_ПКООтправкиПолученияСобытие13_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Сообщить("ПередЗаписьюПолученныхДанных");
КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиПолученияСобытие134
Процедура ДобавитьПКО_ПКООтправкиПолученияСобытие134(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКООтправкиПолученияСобытие134";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_ПКООтправкиПолученияСобытие134_ПриОтправкеДанных";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПКООтправкиПолученияСобытие134_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ПослеЗагрузкиВсехДанныхТриПараметраПрямойПорядок";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры

Процедура ПКО_ПКООтправкиПолученияСобытие134_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Сообщить("ПриОтправкеДанных");
КонецПроцедуры

Процедура ПКО_ПКООтправкиПолученияСобытие134_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Сообщить("ПередЗаписьюПолученныхДанных");
КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиПолученияСобытие14
Процедура ДобавитьПКО_ПКООтправкиПолученияСобытие14(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКООтправкиПолученияСобытие14";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_ПКООтправкиПолученияСобытие14_ПриОтправкеДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ПослеЗагрузкиВсехДанныхТриПараметраПрямойПорядок";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры

Процедура ПКО_ПКООтправкиПолученияСобытие14_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Сообщить("ПриОтправкеДанных");
КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиПолученияСобытиеАлгоритмДваОбратный
Процедура ДобавитьПКО_ПКООтправкиПолученияСобытиеАлгоритмДваОбратный(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКООтправкиПолученияСобытиеАлгоритмДваОбратный";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ПослеЗагрузкиВсехДанныхДваПараметраОбратныйПорядок";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиПолученияСобытиеАлгоритмДваПрямой
Процедура ДобавитьПКО_ПКООтправкиПолученияСобытиеАлгоритмДваПрямой(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКООтправкиПолученияСобытиеАлгоритмДваПрямой";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ПослеЗагрузкиВсехДанныхДваПараметраПрямойПорядок";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиПолученияСобытиеАлгоритмНесуществующий
Процедура ДобавитьПКО_ПКООтправкиПолученияСобытиеАлгоритмНесуществующий(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКООтправкиПолученияСобытиеАлгоритмНесуществующий";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "НесуществующийАлгоритм";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиПолученияСобытиеАлгоритмТриОбратный
Процедура ДобавитьПКО_ПКООтправкиПолученияСобытиеАлгоритмТриОбратный(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКООтправкиПолученияСобытиеАлгоритмТриОбратный";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ПослеЗагрузкиВсехДанныхТриПараметраОбратныйПорядок";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиПолученияСобытиеАлгоритмТриПрямой
Процедура ДобавитьПКО_ПКООтправкиПолученияСобытиеАлгоритмТриПрямой(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКООтправкиПолученияСобытиеАлгоритмТриПрямой";
	ПравилоКонвертации.ОбъектДанных                 = Неопределено;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ПослеЗагрузкиВсехДанныхТриПараметраПрямойПорядок";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиПолученияТЧ
Процедура ДобавитьПКО_ПКООтправкиПолученияТЧ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКООтправкиПолученияТЧ";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение", "ЗначениеСвойства");
	ДобавитьПКС(СвойстваТЧ, "",         "Свойство", 1,"НесуществующееПравило");

КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиПолученияШапка
Процедура ДобавитьПКО_ПКООтправкиПолученияШапка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКООтправкиПолученияШапка";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация", "", , "ПКООтправкиОбъектКонфигурации");
	ДобавитьПКС(СвойстваШапки, "ИНН",                 "");
	ДобавитьПКС(СвойстваШапки, "Наименование",        "Наименование");
	ДобавитьПКС(СвойстваШапки, "",                    "ГоловнаяОрганизация", 1, "ПКООтправкиОбъектФорматаСПолями");

КонецПроцедуры
#КонецОбласти
#Область ПКООтправкиПолученияШапкаТЧ
Процедура ДобавитьПКО_ПКООтправкиПолученияШапкаТЧ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПКООтправкиПолученияШапкаТЧ";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация", "", , "ПКООтправкиОбъектКонфигурации");
	ДобавитьПКС(СвойстваШапки, "ИНН",                 "");
	ДобавитьПКС(СвойстваШапки, "Наименование",        "Наименование");
	ДобавитьПКС(СвойстваШапки, "",                    "ГоловнаяОрганизация", 1, "ПКООтправкиОбъектФорматаСПолями");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение", "ЗначениеСвойства");
	ДобавитьПКС(СвойстваТЧ, "",         "Свойство", 1,"НесуществующееПравило");

КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// МинимальноеПКПДОтправки.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "МинимальноеПКПДОтправки";
		ПравилоКонвертации.ТипДанных = Неопределено;
		ПравилоКонвертации.ТипXDTO   = "";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ПКПДОтправкиНесколькоПолей.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ПКПДОтправкиНесколькоПолей";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
		ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеЛицо");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ПКПДОтправкиОдноПоле.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ПКПДОтправкиОдноПоле";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
		ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;
	Если НаправлениеОбмена = "Получение" Тогда
		// МинимальноеПКПДПолучения.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "МинимальноеПКПДПолучения";
		ПравилоКонвертации.ТипДанных = Неопределено;
		ПравилоКонвертации.ТипXDTO   = "";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ПКПДПолученияНесколькоПолей.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ПКПДПолученияНесколькоПолей";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
		ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ПКПДПолученияОдноПоле.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ПКПДПолученияОдноПоле";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
		ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	КонецЕсли;

	// МинимальноеПКПДОтправкиПолучения.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "МинимальноеПКПДОтправкиПолучения";
	ПравилоКонвертации.ТипДанных = Неопределено;
	ПравилоКонвертации.ТипXDTO   = "";

	ЗначенияДляОтправки = Новый Соответствие;
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПКПДОтправкиПолученияНесколькоПолей.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПКПДОтправкиПолученияНесколькоПолей";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
	ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПКПДОтправкиПолученияОдноПоле.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПКПДОтправкиПолученияОдноПоле";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
	ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Процедура ПослеЗагрузкиВсехДанныхДваПараметраОбратныйПорядок(КомпонентыОбмена, Объект)
	Сообщить("ПослеЗагрузкиВсехДанныхДваПараметраОбратныйПорядок");
КонецПроцедуры
Процедура ПослеЗагрузкиВсехДанныхДваПараметраПрямойПорядок(Объект, КомпонентыОбмена)
	Сообщить("ПослеЗагрузкиВсехДанныхДваПараметраПрямойПорядок");
КонецПроцедуры
Процедура ПослеЗагрузкиВсехДанныхТриПараметраОбратныйПорядок(ОбъектМодифицирован, КомпонентыОбмена, Объект)
	Сообщить("ПослеЗагрузкиВсехДанныхТриПараметраОбратныйПорядок");
КонецПроцедуры
Процедура ПослеЗагрузкиВсехДанныхТриПараметраПрямойПорядок(Объект, КомпонентыОбмена, ОбъектМодифицирован)
	Сообщить("ПослеЗагрузкиВсехДанныхТриПараметраПрямойПорядок");
КонецПроцедуры
Процедура ПроцедураБезПараметров()
	Сообщить("ПроцедураБезПараметров");
КонецПроцедуры
Процедура ПроцедураНесколькоПараметров(Параметр1, Знач Параметр2, Параметр3)
	Сообщить("ПроцедураНесколькоПараметров");
КонецПроцедуры
Процедура ПроцедураНесколькоПараметровСоЗначениями(Параметр1 = Неопределено, Параметр2 = "2", Параметр3 = 3)
	Сообщить("ПроцедураНесколькоПараметровСоЗначениями");
КонецПроцедуры
Процедура ПроцедураОдинПараметр(Параметр1)
	Сообщить("ПроцедураОдинПараметр");
КонецПроцедуры
Функция ФункцияБезПараметров()
	Сообщить("ФункцияБезПараметров");
КонецФункции
Функция ФункцияНесколькоПараметров(Параметр1, Знач Параметр2, Параметр3)
	Сообщить("ФункцияНесколькоПараметров");
КонецФункции
Функция ФункцияНесколькоПараметровСоЗначениями(Параметр1 = Неопределено, Параметр2 = "2", Параметр3 = 3)
	Сообщить("ФункцияНесколькоПараметровСоЗначениями");
КонецФункции
Функция ФункцияОдинПараметр(Параметр1)
	Сообщить("ФункцияОдинПараметр");
КонецФункции
Процедура ЭкспортнаяПроцедураБезПараметров() Экспорт
	Сообщить("ЭкспортнаяПроцедураБезПараметров");
КонецПроцедуры
Функция ЭкспортнаяФункцияБезПараметров() Экспорт
	Сообщить("ЭкспортнаяФункцияБезПараметров");
КонецФункции

#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("Параметр1");
	ПараметрыКонвертации.Вставить("Параметр2");
	ПараметрыКонвертации.Вставить("Параметр3");
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_ПОДОтправкиПроизвольноеПолное_ПриОбработке" Тогда 
		ПОД_ПОДОтправкиПроизвольноеПолное_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОДОтправкиПроизвольноеСобытие1_ПриОбработке" Тогда 
		ПОД_ПОДОтправкиПроизвольноеСобытие1_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОДОтправкиПроизвольноеСобытие12_ПриОбработке" Тогда 
		ПОД_ПОДОтправкиПроизвольноеСобытие12_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОДОтправкиСтандартноеПолное_ПриОбработке" Тогда 
		ПОД_ПОДОтправкиСтандартноеПолное_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОДОтправкиСтандартноеСобытие1_ПриОбработке" Тогда 
		ПОД_ПОДОтправкиСтандартноеСобытие1_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОДОтправкиСтандартноеСобытие12_ПриОбработке" Тогда 
		ПОД_ПОДОтправкиСтандартноеСобытие12_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОДПолученияПроизвольноеПолное_ПриОбработке" Тогда 
		ПОД_ПОДПолученияПроизвольноеПолное_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОДПолученияПроизвольноеСобытие1_ПриОбработке" Тогда 
		ПОД_ПОДПолученияПроизвольноеСобытие1_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОДПолученияСтандартноеПолное_ПриОбработке" Тогда 
		ПОД_ПОДПолученияСтандартноеПолное_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОДПолученияСтандартноеСобытие1_ПриОбработке" Тогда 
		ПОД_ПОДПолученияСтандартноеСобытие1_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКООтправкиПолное_ПриОтправкеДанных" Тогда 
		ПКО_ПКООтправкиПолное_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКООтправкиСобытие1_ПриОтправкеДанных" Тогда 
		ПКО_ПКООтправкиСобытие1_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКОПолученияПолное_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПКОПолученияПолное_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКОПолученияПолное_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПКОПолученияПолное_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКОПолученияСобытие1_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПКОПолученияСобытие1_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКОПолученияСобытие12_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПКОПолученияСобытие12_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКОПолученияСобытие12_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПКОПолученияСобытие12_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКОПолученияСобытие13_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПКОПолученияСобытие13_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКОПолученияСобытие2_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПКОПолученияСобытие2_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКОПолученияСобытие23_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПКОПолученияСобытие23_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКООтправкиПолученияПолное_ПриОтправкеДанных" Тогда 
		ПКО_ПКООтправкиПолученияПолное_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКООтправкиПолученияПолное_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПКООтправкиПолученияПолное_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКООтправкиПолученияПолное_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПКООтправкиПолученияПолное_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКООтправкиПолученияСобытие1_ПриОтправкеДанных" Тогда 
		ПКО_ПКООтправкиПолученияСобытие1_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКООтправкиПолученияСобытие12_ПриОтправкеДанных" Тогда 
		ПКО_ПКООтправкиПолученияСобытие12_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКООтправкиПолученияСобытие12_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПКООтправкиПолученияСобытие12_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКООтправкиПолученияСобытие123_ПриОтправкеДанных" Тогда 
		ПКО_ПКООтправкиПолученияСобытие123_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКООтправкиПолученияСобытие123_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПКООтправкиПолученияСобытие123_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКООтправкиПолученияСобытие123_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПКООтправкиПолученияСобытие123_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКООтправкиПолученияСобытие124_ПриОтправкеДанных" Тогда 
		ПКО_ПКООтправкиПолученияСобытие124_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКООтправкиПолученияСобытие124_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПКООтправкиПолученияСобытие124_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКООтправкиПолученияСобытие13_ПриОтправкеДанных" Тогда 
		ПКО_ПКООтправкиПолученияСобытие13_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКООтправкиПолученияСобытие13_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПКООтправкиПолученияСобытие13_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКООтправкиПолученияСобытие134_ПриОтправкеДанных" Тогда 
		ПКО_ПКООтправкиПолученияСобытие134_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКООтправкиПолученияСобытие134_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПКООтправкиПолученияСобытие134_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКООтправкиПолученияСобытие14_ПриОтправкеДанных" Тогда 
		ПКО_ПКООтправкиПолученияСобытие14_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПослеЗагрузкиВсехДанныхДваПараметраОбратныйПорядок" Тогда 
		ПослеЗагрузкиВсехДанныхДваПараметраОбратныйПорядок(
			Параметры.КомпонентыОбмена, Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ПослеЗагрузкиВсехДанныхДваПараметраПрямойПорядок" Тогда 
		ПослеЗагрузкиВсехДанныхДваПараметраПрямойПорядок(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПослеЗагрузкиВсехДанныхТриПараметраОбратныйПорядок" Тогда 
		ПослеЗагрузкиВсехДанныхТриПараметраОбратныйПорядок(
			Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена, Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ПослеЗагрузкиВсехДанныхТриПараметраПрямойПорядок" Тогда 
		ПослеЗагрузкиВсехДанныхТриПараметраПрямойПорядок(
			Параметры.Объект, Параметры.КомпонентыОбмена, Параметры.ОбъектМодифицирован);
	КонецЕсли;
КонецПроцедуры
// Процедура-обертка, выполняет запуск указанной в параметрах функции модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяФункции - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Функция ВыполнитьФункциюМодуляМенеджера(ИмяФункции, Параметры) Экспорт
	Если ИмяФункции = "ПОД_ПОДОтправкиПроизвольноеПолное_ВыборкаДанных" Тогда 
		Возврат ПОД_ПОДОтправкиПроизвольноеПолное_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_ПОДОтправкиПроизвольноеСобытие12_ВыборкаДанных" Тогда 
		Возврат ПОД_ПОДОтправкиПроизвольноеСобытие12_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_ПОДОтправкиПроизвольноеСобытие2_ВыборкаДанных" Тогда 
		Возврат ПОД_ПОДОтправкиПроизвольноеСобытие2_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_ПОДОтправкиСтандартноеПолное_ВыборкаДанных" Тогда 
		Возврат ПОД_ПОДОтправкиСтандартноеПолное_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_ПОДОтправкиСтандартноеСобытие12_ВыборкаДанных" Тогда 
		Возврат ПОД_ПОДОтправкиСтандартноеСобытие12_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_ПОДОтправкиСтандартноеСобытие2_ВыборкаДанных" Тогда 
		Возврат ПОД_ПОДОтправкиСтандартноеСобытие2_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	КонецЕсли;
КонецФункции

#КонецОбласти
