@GenModel(
	publicConstructors="true"
)
package ru.capralow.dt.conversion.plugin.core.fp

import com._1c.g5.v8.dt.xdto.model.Enumeration
import com._1c.g5.v8.dt.xdto.model.ObjectType
import com._1c.g5.v8.dt.xdto.model.Property
import com._1c.g5.v8.dt.xdto.model.ValueType

class FormatPackage {
	String version = ""
	
	contains FpDefinedType[] definedTypes
	contains FpDefinedType[] refTypes
	contains FpObject[] catalogs
	contains FpObject[] documents
	contains FpEnum[] enums
	contains FpObject[] registers
	
	op FpProperty getProperty(String formatObjectName, String formatPropertyFullName) {
		for (FpObject fpCatalog : catalogs) {
			if (fpCatalog.name.equals(formatObjectName)) {
				var property = fpCatalog.getProperty(formatPropertyFullName);
				if (property === null)
					return null;
				
				return property;
			}
		}
		for (FpObject fpDocument : documents) {
			if (fpDocument.name.equals(formatObjectName)) {
				var property = fpDocument.getProperty(formatPropertyFullName);
				if (property === null)
					return null;
				
				return property;
			}
		}
		for (FpObject fpRegister : registers) {
			if (fpRegister.name.equals(formatObjectName)) {
				var property = fpRegister.getProperty(formatPropertyFullName);
				if (property === null)
					return null;
				
				return property;
			}
		}
		
		return null;
	}
	
	op FpObject getFormatObject(String formatObjectName) {
		for (FpObject fpCatalog : catalogs) {
			if (fpCatalog.name.equals(formatObjectName))
				return fpCatalog;
			
		}
		for (FpObject fpDocument : documents) {
			if (fpDocument.name.equals(formatObjectName))
				return fpDocument;

		}
		for (FpObject fpRegister : registers) {
			if (fpRegister.name.equals(formatObjectName))
				return fpRegister;

		}
		
		return null;
	}
	
	op FpDefinedType getDefinedType(String name) {
		for (FpDefinedType fpDefinedType : definedTypes) {
			if (fpDefinedType.name.equals(name))
				return fpDefinedType;
		}
		
		return null;
	}
	
	op FpEnum getEnum(String name) {
		for (FpEnum fpEnum : enums) {
			if (fpEnum.name.equals(name))
				return fpEnum;
		}
		
		return null;
	}
}

class FpDefinedType {
	String name = ""

	contains FpType[] types
}

class FpObject {
	refers ObjectType object
	String name = ""
	
	contains FpProperty[] properties
	op FpProperty getProperty(String propertyName) {
		for (FpProperty fpProperty : properties) {
			if (propertyName.equals(fpProperty.name)) return fpProperty
		}
		return null;
	}
	
	refers ObjectType keysObject
	String keysObjectName = ""
	contains FpProperty[] keyProperties
	
}

class FpEnum {
	refers ValueType object
	String name = ""
	
	refers Enumeration[] enumerations
}

class FpProperty {
	refers Property property
	String name = ""
	Boolean isKey
	
	String propertyType = ""
	
	Boolean required
}

class FpType {
	String name = ""
	
	String propertyType = ""
}
