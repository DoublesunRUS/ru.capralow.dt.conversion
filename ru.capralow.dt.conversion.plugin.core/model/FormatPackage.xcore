@GenModel(
	publicConstructors="true"
)
package ru.capralow.dt.conversion.plugin.core.fp

import com._1c.g5.v8.dt.xdto.model.ObjectType

class FormatPackage {
	String version = ""
	
	contains FpCatalog[] catalogs
	contains FpDocument[] documents
	contains FpRegister[] registers
	
	op FpProperty getProperty(String formatObjectName, String formatPropertyFullName) {
		for (FpCatalog fpCatalog : catalogs) {
			if (fpCatalog.name == formatObjectName) {
				var property = fpCatalog.getProperty(formatPropertyFullName);
				if (property === null)
					return null;
				
				return property;
			}
		}
		for (FpDocument fpDocument : documents) {
			if (fpDocument.name == formatObjectName) {
				var property = fpDocument.getProperty(formatPropertyFullName);
				if (property === null)
					return null;
				
				return property;
			}
		}
		for (FpRegister fpRegister : registers) {
			if (fpRegister.name == formatObjectName) {
				var property = fpRegister.getProperty(formatPropertyFullName);
				if (property === null)
					return null;
				
				return property;
			}
		}
		
		return null;
	}
	
}

class FpCatalog {
	refers ObjectType object
	String name = ""
	
	contains FpProperty[] properties opposite catalog
	op FpProperty getProperty(String propertyName) {
		for (FpProperty fpProperty : properties) {
			if (propertyName == fpProperty.name) return fpProperty
		}
		return null;
	}
	
	refers ObjectType keysObject
	String keysObjectName = ""
	contains FpProperty[] keyProperties opposite keysCatalog
	
}

class FpDocument {
	refers ObjectType object
	String name = ""
	
	contains FpProperty[] properties opposite document
	op FpProperty getProperty(String propertyName) {
		for (FpProperty fpProperty : properties) {
			if (propertyName == fpProperty.name) return fpProperty
		}
		return null;
	}
	
	refers ObjectType keysObject
	String keysObjectName = ""
	contains FpProperty[] keyProperties opposite keysDocument
	
}

class FpRegister {
	refers ObjectType object
	String name = ""
	
	contains FpProperty[] properties opposite register
	op FpProperty getProperty(String propertyName) {
		for (FpProperty fpProperty : properties) {
			if (propertyName == fpProperty.name) return fpProperty
		}
		return null;
	}
	
	refers ObjectType keysObject
	String keysObjectName = ""
	contains FpProperty[] keyProperties opposite keysRegister
	
}

class FpProperty {
	container FpCatalog catalog opposite properties
	container FpDocument document opposite properties
	container FpRegister register opposite properties

	container FpCatalog keysCatalog opposite keyProperties
	container FpDocument keysDocument opposite keyProperties
	container FpRegister keysRegister opposite keyProperties

	Object property
	String name = ""
	Boolean isKey
	
	String propertyType = ""
	
	Boolean required
}
