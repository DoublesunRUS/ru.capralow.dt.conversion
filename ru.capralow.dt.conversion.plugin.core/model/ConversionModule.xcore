@GenModel(publicConstructors="true", loadInitialization="false", literalsInterface="true", nonNLSMarkers="true",
	updateClasspath="false", featureDelegation="Reflective")
package ru.capralow.dt.conversion.plugin.core.cm

class ConversionModule {
	String storeVersion = "1"
	
	Object moduleURI
	
	String params
	
	String beforeConvertationEvent = ""
	String beforeConvertationEventPrefix = "Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт"
	String beforeConvertationEventSuffix = "КонецПроцедуры"
	op String getBeforeConvertationEventText() {
		var result = beforeConvertationEventPrefix + System.lineSeparator() + beforeConvertationEvent +
			System.lineSeparator() + beforeConvertationEventSuffix;
		return result;
	}
	
	String afterConvertationEvent = ""
	String afterConvertationEventPrefix = "Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт"
	String afterConvertationEventSuffix = "КонецПроцедуры"
	op String getAfterConvertationEventText() {
		var result = afterConvertationEventPrefix + System.lineSeparator() + afterConvertationEvent +
			System.lineSeparator() + afterConvertationEventSuffix;
		return result;
	}
	
	String beforeFillingEvent = ""
	String beforeFillingEventPrefix = "Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт"
	String beforeFillingEventSuffix = "КонецПроцедуры"
	op String getBeforeFillingEventText() {
		var result = beforeFillingEventPrefix + System.lineSeparator() + beforeFillingEvent + System.lineSeparator() +
			beforeFillingEventSuffix;
		return result;
	}
	
	contains CmDataRule[] dataRules opposite conversionModule
	
	op CmDataRule getDataRule(String ruleName) {
		for (CmDataRule dataRule : dataRules) {
			if (ruleName == dataRule.getName) return dataRule
		}
		return null;
	}
	
	op Object[] getSendingDataRules() {
		val result = newBasicEList()

		for (CmDataRule dataRule : dataRules) {
			if (dataRule.getForSending())
				result.add(dataRule)
		}
		return result
	}

	op Object[] getReceivingDataRules() {
		val result = newBasicEList()

		for (CmDataRule dataRule : dataRules) {
			if (dataRule.getForReceiving())
				result.add(dataRule)
		}
		return result
	}

	contains CmObjectRule[] objectRules
	op CmObjectRule getObjectRule(String ruleName) {
		for (CmObjectRule objectRule : objectRules) {
			if (ruleName == objectRule.getName) return objectRule
		}
		return null;
	}

	contains CmPredefined[] predefineds

	contains CmAlgorithm[] algorithms opposite conversionModule
	op CmAlgorithm getAlgorithm(String algorithmName) {
		for (CmAlgorithm algorithm : algorithms) {
			if (algorithmName == algorithm.getName) return algorithm
		}
		return null;
	}

	op String getAllAlgorithmsText(String algorithmName) {
		var result = ""

		for (CmAlgorithm algorithm : algorithms) {
			if (algorithmName != algorithm.getName)
				result += algorithm.getAlgorithmText() + System.lineSeparator();

		}

		return result;
	}
	
	op String getModuleTextV2() {
		var result = "";

		result += "#Область ПроцедурыКонвертации";
		result += System.lineSeparator() + System.lineSeparator();

		result += getBeforeConvertationEventText();
		result += System.lineSeparator() + System.lineSeparator();

		result += getAfterConvertationEventText();
		result += System.lineSeparator() + System.lineSeparator();

		result += getBeforeFillingEventText();
		result += System.lineSeparator() + System.lineSeparator();

		var text =
"// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Число - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
	Возврат &ВерсияФорматаМенеджераОбмена;
КонецФункции"
		.replace("&ВерсияФорматаМенеджераОбмена", storeVersion);
		result += text;
		result += System.lineSeparator() + System.lineSeparator();

		result += "#КонецОбласти";
		result += System.lineSeparator() + System.lineSeparator();


		result += "#Область ПОД";
		result += System.lineSeparator() + System.lineSeparator();

		var dataRulesDeclarationText = "";
		dataRulesDeclarationText += "	Если НаправлениеОбмена = \"Отправка\" Тогда" + System.lineSeparator();
		dataRulesDeclarationText += "		Если ПравилаОбработкиДанных.Колонки.Найти(\"ОчисткаДанных\") = Неопределено Тогда" + System.lineSeparator();
		dataRulesDeclarationText += "			ПравилаОбработкиДанных.Колонки.Добавить(\"ОчисткаДанных\");" + System.lineSeparator();
		dataRulesDeclarationText += "		КонецЕсли;" + System.lineSeparator();
		for (CmDataRule dataRule : dataRules) {
			if (dataRule.forSending)
		dataRulesDeclarationText += "		ДобавитьПОД_" + dataRule.name + "(ПравилаОбработкиДанных);" + System.lineSeparator();
		}
		dataRulesDeclarationText += "	ИначеЕсли НаправлениеОбмена = \"Получение\" Тогда" + System.lineSeparator();
		for (CmDataRule dataRule : dataRules) {
			if (dataRule.forReceiving)
		dataRulesDeclarationText += "		ДобавитьПОД_" + dataRule.name + "(ПравилаОбработкиДанных);" + System.lineSeparator();
		}
		dataRulesDeclarationText += "	КонецЕсли;";

		text =
"// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка (\"Отправка\" либо \"Получение\").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
&ТелоПроцедуры
КонецПроцедуры"
		.replace("&ТелоПроцедуры", dataRulesDeclarationText);
		result += text;
		result += System.lineSeparator() + System.lineSeparator();

		result += "#Область Отправка";
		result += System.lineSeparator() + System.lineSeparator();

		for (CmDataRule dataRule : dataRules) {
			if (dataRule.forSending) {
				var objectRulesText = "";
			
				for (CmObjectRule objectRule : dataRule.objectRules) {
					objectRulesText += System.lineSeparator() + "	ПравилоОбработки.ИспользуемыеПКО.Добавить(\"" + objectRule.name + "\");";
				}
			
				var dataRuleEventsText = "";
				if (dataRule.onProcessingEvent.length != 0)
					dataRuleEventsText += System.lineSeparator() + System.lineSeparator() + dataRule.onProcessingEventText;
				if (dataRule.dataSelectionEvent.length != 0)
					dataRuleEventsText += System.lineSeparator() + System.lineSeparator() + dataRule.dataSelectionEventText;

				result += "#Область &ИмяПОД".replaceAll("&ИмяПОД", dataRule.name);
				result += System.lineSeparator() + System.lineSeparator();

				text =
"Процедура ДобавитьПОД_&ИмяПОД(ПравилаОбработкиДанных)
	ПравилоОбработки							= ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя						= \"&ИмяПОД\";
	ПравилоОбработки.ОбъектВыборкиМетаданные	= &ОбъектВыборкиМетаданные;
	ПравилоОбработки.ПриОбработке				= \"&ПриОбработке\";
	ПравилоОбработки.ВыборкаДанных				= \"&ВыборкаДанных\";
	ПравилоОбработки.ОчисткаДанных				= &ОчисткаДанных;
&ЗаполнениеМассиваПравил
КонецПроцедуры"
				.replaceAll("&ИмяПОД", dataRule.name)
				.replace("&ОбъектВыборкиМетаданные", dataRule.configurationObject.toString())
				.replace("ПравилоОбработки.ОбъектВыборкиМетаданные	= ;", "ПравилоОбработки.ОбъектВыборкиМетаданные	= Неопределено;")
				.replace("&ПриОбработке", dataRule.getOnProcessingEventDeclaration())
				.replace("	ПравилоОбработки.ПриОбработке				= \"\";", "---")
				.replace("&ВыборкаДанных", dataRule.getDataSelectionEventDeclaration())
				.replace("	ПравилоОбработки.ВыборкаДанных				= \"\";", "---")
				.replace("&ОчисткаДанных", dataRule.getDataCleaningDeclaration())
				.replace("&ЗаполнениеМассиваПравил", objectRulesText)
				.replaceAll("---\\r\\n|---\\r|---\\n", "");
				result += text;
				result += dataRuleEventsText;
				result += System.lineSeparator() + System.lineSeparator();
				result += "#КонецОбласти";
				result += System.lineSeparator() + System.lineSeparator();
			}
		}

		result += "#КонецОбласти";
		result += System.lineSeparator() + System.lineSeparator();

		result += "#Область Получение";
		result += System.lineSeparator() + System.lineSeparator();

		for (CmDataRule dataRule : dataRules) {
			if (dataRule.forReceiving) {
				var objectRulesText = "";
			
				for (CmObjectRule objectRule : dataRule.objectRules) {
					objectRulesText += System.lineSeparator() + "	ПравилоОбработки.ИспользуемыеПКО.Добавить(\"" + objectRule.name + "\");";
				}
			
				var dataRuleEventsText = "";
				if (dataRule.onProcessingEvent.length != 0)
					dataRuleEventsText += System.lineSeparator() + System.lineSeparator() + dataRule.onProcessingEventText;
			
				result += "#Область &ИмяПОД".replaceAll("&ИмяПОД", dataRule.name);
				result += System.lineSeparator() + System.lineSeparator();

				text =
"Процедура ДобавитьПОД_&ИмяПОД(ПравилаОбработкиДанных)
	ПравилоОбработки						= ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя					= \"&ИмяПОД\";
	ПравилоОбработки.ОбъектВыборкиФормат	= \"&ОбъектВыборкиФормат\";
	ПравилоОбработки.ПриОбработке			= \"&ПриОбработке\";
&ЗаполнениеМассиваПравил
КонецПроцедуры"
				.replaceAll("&ИмяПОД", dataRule.name)
				.replace("&ОбъектВыборкиФормат", dataRule.formatObject.toString())
				.replace("&ПриОбработке", dataRule.getOnProcessingEventDeclaration())
				.replace("	ПравилоОбработки.ПриОбработке			= \"\";", "---")
				.replace("&ЗаполнениеМассиваПравил", objectRulesText)
				.replaceAll("---\\r\\n|---\\r|---\\n", "");
				result += text;
				result += dataRuleEventsText;
				result += System.lineSeparator() + System.lineSeparator();
				result += "#КонецОбласти";
				result += System.lineSeparator() + System.lineSeparator();
			}
		}

		result += "#КонецОбласти";
		result += System.lineSeparator() + System.lineSeparator();

		result += "#КонецОбласти";
		result += System.lineSeparator() + System.lineSeparator();

		return result;
		
	}

	op String getModuleText() {
		if (storeVersion == "1") {
			return getModuleTextV2();
		}
		else
			return getModuleTextV2();
		
	}

}

class CmDataRule {
	container ConversionModule conversionModule opposite dataRules
	
	String name = ""
	
	Boolean isDisabled = "false"
	
	Object configurationObject
	Object formatObject
	
	Boolean forSending = "false"
	Boolean forReceiving = "false"
	
	CmSelectionVariant selectionVariant
	
	String onProcessingEvent = ""
	derived String onProcessingEventPrefix get {
		return "Процедура ПОД_|||ИМЯ|||_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)"
			.replace("|||ИМЯ|||", name);
	}
	String onProcessingEventSuffix = "КонецПроцедуры"
	op String getOnProcessingEventText() {
		var result = onProcessingEventPrefix + System.lineSeparator() +
			onProcessingEvent +
			System.lineSeparator() + onProcessingEventSuffix;
		return result;
	}
	op String getOnProcessingEventDeclaration() {
		if (onProcessingEvent.length == 0)
			return ""
		else
			return "ПОД_|||ИМЯ|||_ПриОбработке".replace("|||ИМЯ|||", name);
	}
	
	String dataSelectionEvent = ""
	derived String dataSelectionEventPrefix get {
		return "Функция ПОД_|||ИМЯ|||_ВыборкаДанных(КомпонентыОбмена)"
			.replace("|||ИМЯ|||", name);
	}
	String dataSelectionEventSuffix = "КонецФункции"
	op String getDataSelectionEventText() {
		var result = dataSelectionEventPrefix + System.lineSeparator() +
			dataSelectionEvent +
			System.lineSeparator() + dataSelectionEventSuffix;
		return result;
	}
	op String getDataSelectionEventDeclaration() {
		if (dataSelectionEvent.length == 0)
			return ""
		else
			return "ПОД_|||ИМЯ|||_ВыборкаДанных".replace("|||ИМЯ|||", name);
	}
	
	Boolean isDataCleaning = "false"
	op String getDataCleaningDeclaration() {
		if (isDataCleaning)
			return "Истина"
		else
			return "Ложь";
	}
	
	refers CmObjectRule[] objectRules
}

enum CmSelectionVariant {
	Standart as "Стандартная выборка" = 0
	Custom as "Произвольный алгоритм" = 1
}

class CmObjectRule {
	String name = ""
	
	Boolean isDisabled = "false"
	
	Object configurationObject
	Object formatObject
	
	Boolean forSending = "false"
	Boolean forReceiving = "false"
	
	Boolean isForGroup = "false"
	
	CmIdentificationVariant identificationVariant
	
	String onSendingEvent = ""
	derived String onSendingEventPrefix get {
		return "Процедура ПКО_|||ИМЯ|||_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)"
			.replace("|||ИМЯ|||", name);
	}
	String onSendingEventSuffix = "КонецПроцедуры"
	op String getOnSendingEventText() {
		var result = onSendingEventPrefix + System.lineSeparator() + onSendingEvent +
			System.lineSeparator() + onSendingEventSuffix;
		return result;
	}
	
	String beforeReceivingEvent = ""
	derived String beforeReceivingEventPrefix get {
		return "Процедура ПКО_|||ИМЯ|||_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)"
			.replace("|||ИМЯ|||", name);
	}
	String beforeReceivingEventSuffix = "КонецПроцедуры"
	op String getBeforeReceivingEventText() {
		var result = beforeReceivingEventPrefix + System.lineSeparator() + beforeReceivingEvent +
			System.lineSeparator() + beforeReceivingEventSuffix;
		return result;
	}
	
	String onReceivingEvent = ""
	derived String onReceivingEventPrefix get {
		return "Процедура ПКО_|||ИМЯ|||_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)"
			.replace("|||ИМЯ|||", name);
	}
	String onReceivingEventSuffix = "КонецПроцедуры"
	op String getOnReceivingEventText() {
		var result = onReceivingEventPrefix + System.lineSeparator() + onReceivingEvent +
			System.lineSeparator() + onReceivingEventSuffix;
		return result;
	}

	refers CmAlgorithm afterReceivingAlgorithm

	contains CmAttributeRule[] attributeRules
}

enum CmIdentificationVariant {
	UUID as "По уникальному идентификатору" = 0
	SearchFields as "По полям поиска" = 1
	UUIDThenSerachFields as "Сначала по уникальному идентификатору потом по полям поиска" = 2
}

class CmAttributeRule {
	String configurationTabularSectionName = ""
	String configurationAttributeName = ""
	
	String formatTabularSectionName = ""
	String formatAttributeName = ""
	
	refers CmObjectRule objectRule
	
	Boolean isCustomRule = "false"
}

class CmPredefined {
	String name = ""
	
	Object configurationObject
	Object formatObject
	
	Boolean forSending = "false"
	Boolean forReceiving = "false"
}

class CmAlgorithm {
	container ConversionModule conversionModule opposite algorithms
	
	String name = ""
	
	CmMethodType methodType
	String params = ""
	Boolean isExport = "false"
	String body = ""
	derived String prefix get {
		var prefix = "";
		
		if (methodType == CmMethodType.PROCEDURE) {
			prefix = "Процедура";
		}
		else {
			prefix = "Функция";
		}
		
		var export = "";
		if (isExport)
			export = " Экспорт";
		
		return prefix + " " + name + "(" + params + ")" + export;
	}
	derived String suffix get {
		var result = "";
		
		if (methodType == CmMethodType.PROCEDURE) {
			result = "КонецПроцедуры";
		}
		else {
			result = "КонецФункции";
		}
		
		return result;
	}
	op String getAlgorithmText() {
		var result = prefix + System.lineSeparator() + body + System.lineSeparator() + suffix;
		
		return result;
	}
}

enum CmMethodType {
	Procedure as "Процедура" = 0
	Function as "Функция" = 1
}
