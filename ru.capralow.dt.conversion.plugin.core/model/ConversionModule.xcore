@GenModel(publicConstructors="true", loadInitialization="false", literalsInterface="true", nonNLSMarkers="true",
	updateClasspath="false", featureDelegation="Reflective", rootExtendsClass="com._1c.g5.v8.bm.core.BmObject",
	rootExtendsInterface="com._1c.g5.v8.bm.core.IBmObject")
package ru.capralow.dt.conversion.plugin.core.cm

class ConversionModule {
	String storeVersion = "1"
	
	Object moduleURI
	
	String params
	
	String beforeConvertationEvent = ""
	Object beforeConvertationEventMethod
	String beforeFillingEvent = ""
	Object beforeFillingEventMethod
	String afterConvertationEvent = ""
	Object afterConvertationEventMethod
	
	contains CmDataRule[] dataRules opposite conversionModule
	op CmDataRule getDataRule(String ruleName) {
		for (CmDataRule dataRule : dataRules) {
			if (ruleName == dataRule.getName) return dataRule
		}
		return null;
	}
	op Object[] getSendingDataRules() {
		val result = newBasicEList()

		for (CmDataRule dataRule : dataRules) {
			if (dataRule.getForSending())
				result.add(dataRule)
		}
		return result
	}
	op Object[] getReceivingDataRules() {
		val result = newBasicEList()

		for (CmDataRule dataRule : dataRules) {
			if (dataRule.getForReceiving())
				result.add(dataRule)
		}
		return result
	}
	
	contains CmObjectRule[] objectRules
	op CmObjectRule getObjectRule(String ruleName) {
		for (CmObjectRule objectRule : objectRules) {
			if (ruleName == objectRule.getName) return objectRule
		}
		return null;
	}
	
	contains CmPredefined[] predefineds
	
	contains CmAlgorithm[] algorithms
}

class CmDataRule {
	container ConversionModule conversionModule opposite dataRules
	
	String name = ""
	
	Boolean isDisabled = "false"

	Object configurationObject
	Object formatObject
	
	Boolean forSending = "false"
	Boolean forReceiving = "false"
	Boolean isDataCleaning = "false"
	CmSelectionVariant selectionVariant
	
	String onProcessingEvent = ""
	Object onProcessingEventMethod
	String dataSelectionEvent = ""
	Object dataSelectionEventMethod
	
	refers CmObjectRule[] objectRules
}

enum CmSelectionVariant {
	Standart as "Стандартная выборка" = 0
	Custom as "Произвольный алгоритм" = 1
}

class CmObjectRule {
	String name = ""

	Boolean isDisabled = "false"

	Object configurationObject
	Object formatObject
	
	Boolean forSending = "false"
	Boolean forReceiving = "false"
	Boolean isForGroup = "false"
	CmIdentificationVariant identificationVariant
	
	String beforeSendingEvent = ""
	Object beforeSendingEventMethod
	String onSendingEvent = ""
	Object onSendingEventMethod
	String beforeReceivingEvent = ""
	Object beforeReceivingEventMethod
	String onReceivingEvent = ""
	Object onReceivingEventMethod
	String afterReceivingAlgorithmName = ""
	Object afterReceivingAlgorithmMethod

	contains CmAttributeRule[] attributeRules
}

enum CmIdentificationVariant {
	UUID as "По уникальному идентификатору" = 0
	SearchFields as "По полям поиска" = 1
	UUIDThenSerachFields as "Сначала по уникальному идентификатору потом по полям поиска" = 2
}

class CmAttributeRule {
	String configurationTabularSectionName = ""
	String configurationAttributeName = ""
	
	String formatTabularSectionName = ""
	String formatAttributeName = ""
	
	refers CmObjectRule objectRule
	
	Boolean isCustomRule = "false"
}

class CmAlgorithm {
	String name = ""
	Object method
}

class CmPredefined {
	String name = ""

	Object configurationObject
	Object formatObject

	Boolean forSending = "false"
	Boolean forReceiving = "false"
}
