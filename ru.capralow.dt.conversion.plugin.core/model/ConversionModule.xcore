@GenModel(loadInitialization="false", literalsInterface="true", nonNLSMarkers="true", prefix="cm", updateClasspath="false")
@Ecore(nsPrefix="cm", nsURI="http://ru.capralow.dt.conversion.plugin.core.cm.model")
package ru.capralow.dt.conversion.plugin.core.cm.model

import com._1c.g5.v8.dt.metadata.mdclass.MdObject

class ConversionModule {
	String storeVersion = "1"
	
	contains CmSubsystem[] subsystems
	
	op CmSubsystem getSubsystem(Object subsystemObject) {
		for (CmSubsystem subsystem : subsystems) {
			if (subsystemObject.equals(subsystem.subsystem)) return subsystem
		}
		return null;
	}
	
	Object moduleURI
	
	String params = ""
	
	String beforeConvertationEvent = ""
	String
	 beforeConvertationEventPrefix = "Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт"
	String beforeConvertationEventSuffix = "КонецПроцедуры"
	op String getBeforeConvertationEventText() {
		var result = beforeConvertationEventPrefix + System.lineSeparator()
			+ beforeConvertationEvent + System.lineSeparator()
			+ beforeConvertationEventSuffix + System.lineSeparator();
		return result;
	}
	
	String afterConvertationEvent = ""
	String afterConvertationEventPrefix = "Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт"
	String afterConvertationEventSuffix = "КонецПроцедуры"
	op String getAfterConvertationEventText() {
		var result = afterConvertationEventPrefix + System.lineSeparator()
			+ afterConvertationEvent + System.lineSeparator()
			+ afterConvertationEventSuffix + System.lineSeparator();
		return result;
	}
	
	String beforeFillingEvent = ""
	String beforeFillingEventPrefix = "Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт"
	String beforeFillingEventSuffix = "КонецПроцедуры"
	op String getBeforeFillingEventText() {
		var result = beforeFillingEventPrefix + System.lineSeparator()
			+ beforeFillingEvent + System.lineSeparator()
			+ beforeFillingEventSuffix + System.lineSeparator();
		return result;
	}
	
	contains CmDataRule[] dataRules
	
	op CmDataRule getDataRule(String ruleName) {
		for (CmDataRule dataRule : dataRules) {
			if (ruleName.equals(dataRule.name)) return dataRule
		}
		return null;
	}
	
	op Object[] getSendingDataRules() {
		val result = newBasicEList()

		for (CmDataRule dataRule : dataRules) {
			if (dataRule.forSending)
				result.add(dataRule)
		}
		return result
	}
	op Object[] getSendingDataRules(CmSubsystem subsystem) {
		val result = newBasicEList()

		for (CmDataRule dataRule : dataRules) {
			if (dataRule.forSending && dataRule.includedInSubsystem(subsystem))
				result.add(dataRule)
		}
		return result
	}

	op Object[] getReceivingDataRules() {
		val result = newBasicEList()

		for (CmDataRule dataRule : dataRules) {
			if (dataRule.forReceiving)
				result.add(dataRule)
		}
		return result
	}
	op Object[] getReceivingDataRules(CmSubsystem subsystem) {
		val result = newBasicEList()

		for (CmDataRule dataRule : dataRules) {
			if (dataRule.forReceiving && dataRule.includedInSubsystem(subsystem))
				result.add(dataRule)
		}
		return result
	}

	contains CmObjectRule[] objectRules
	op CmObjectRule getObjectRule(String ruleName) {
		for (CmObjectRule objectRule : objectRules) {
			if (ruleName.equals(objectRule.name)) return objectRule
		}
		return null;
	}

	op Object[] getSendingObjectRules() {
		val result = newBasicEList()

		for (CmObjectRule objectRule : objectRules) {
			if (objectRule.forSending)
				result.add(objectRule)
		}
		return result
	}
	op Object[] getSendingObjectRules(CmSubsystem cmSubsystem) {
		val result = newBasicEList()

		for (CmObjectRule objectRule : objectRules) {
			if (objectRule.forSending && objectRule.includedInSubsystem(cmSubsystem))
				result.add(objectRule)
		}
		return result
	}

	op Object[] getReceivingObjectRules() {
		val result = newBasicEList()

		for (CmObjectRule objectRule : objectRules) {
			if (objectRule.forReceiving)
				result.add(objectRule)
		}
		return result
	}
	op Object[] getReceivingObjectRules(CmSubsystem cmSubsystem) {
		val result = newBasicEList()

		for (CmObjectRule objectRule : objectRules) {
			if (objectRule.forReceiving && objectRule.includedInSubsystem(cmSubsystem))
				result.add(objectRule)
		}
		return result
	}

	contains CmPredefined[] predefineds

	contains CmAlgorithm[] algorithms
	op CmAlgorithm getAlgorithm(String algorithmName) {
		for (CmAlgorithm algorithm : algorithms) {
			if (algorithmName.equals(algorithm.name)) return algorithm
		}
		return null;
	}

	op String getAllAlgorithmsText(String algorithmName) {
		var result = ""

		for (CmAlgorithm algorithm : algorithms) {
			if (algorithmName != algorithm.name)
				result += algorithm.getAlgorithmText() + System.lineSeparator();

		}

		return result;
	}
	
}

class CmDataRule {
	String name = ""
	
	Boolean isDisabled = "false"
	
	refers MdObject configurationObject
	String configurationObjectName = ""
	derived String configurationObjectFormattedName get {
		var result = "";
		
		if (configurationObjectName.startsWith("Метаданные.Справочники")) {
			result = "Справочник." + configurationObjectName.split("[.]").get(2);
		
		} else if (configurationObjectName.startsWith("Метаданные.Документы")) {
			result = "Документ." + configurationObjectName.split("[.]").get(2);
			
		} else if (configurationObjectName.startsWith("Метаданные.Перечисления")) {
			result = "Перечисление." + configurationObjectName.split("[.]").get(2);
			
		} else if (configurationObjectName.startsWith("Метаданные.ПланыВидовХарактеристик")) {
			result = "ПланВидовХарактеристик." + configurationObjectName.split("[.]").get(2);
			
		} else if (configurationObjectName.startsWith("Метаданные.ПланыВидовРасчета")) {
			result = "ПланВидовРасчета." + configurationObjectName.split("[.]").get(2);
			
		} else if (configurationObjectName.startsWith("Метаданные.РегистрыСведений")) {
			result = "РегистрСведений." + configurationObjectName.split("[.]").get(2);
			
		}
		
		return result;
	}

	String formatObject = ""
	
	Boolean forSending = "false"
	Boolean forReceiving = "false"
	
	CmSelectionVariant selectionVariant
	
	String onProcessingEvent = ""
	derived String onProcessingEventPrefix get {
		if (forSending) {
			return "Процедура ПОД_&ИмяПОД_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)"
			.replace("&ИмяПОД", name);
			
		} else
			return "Процедура ПОД_&ИмяПОД_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)"
			.replace("&ИмяПОД", name);
	}
	String onProcessingEventSuffix = "КонецПроцедуры"
	op String getOnProcessingEventText() {
		var result = onProcessingEventPrefix + System.lineSeparator()
			+ onProcessingEvent + System.lineSeparator()
			+ onProcessingEventSuffix + System.lineSeparator();
		return result;
	}
	op String getOnProcessingEventDeclaration() {
		if (onProcessingEvent.length == 0)
			return ""
		else
			return "ПОД_&ИмяПОД_ПриОбработке".replace("&ИмяПОД", name);
	}
	
	String dataSelectionEvent = ""
	derived String dataSelectionEventPrefix get {
		return "Функция ПОД_&ИмяПОД_ВыборкаДанных(КомпонентыОбмена)"
			.replace("&ИмяПОД", name);
	}
	String dataSelectionEventSuffix = "КонецФункции"
	op String getDataSelectionEventText() {
		var result = dataSelectionEventPrefix + System.lineSeparator()
			+ dataSelectionEvent + System.lineSeparator()
			+ dataSelectionEventSuffix + System.lineSeparator();
		return result;
	}
	op String getDataSelectionEventDeclaration() {
		if (dataSelectionEvent.length == 0)
			return ""
		else
			return "ПОД_&ИмяПОД_ВыборкаДанных".replace("&ИмяПОД", name);
	}
	
	Boolean isDataCleaning = "false"
	op String getDataCleaningDeclaration() {
		if (isDataCleaning)
			return "Истина"
		else
			return "Ложь";
	}
	
	refers CmObjectRule[] objectRules
	
	refers CmSubsystem[] subsystems
	
	op Boolean includedInSubsystem(CmSubsystem cmSubsystem) {
		if (cmSubsystem === null || cmSubsystem.specialSubsystemType == CmSpecialSubsystemType.ALL)
			return true;
		
		for (CmSubsystem subsystem : subsystems) {
			if (subsystem.equals(cmSubsystem))
				return true;
		}

		for (CmObjectRule objectRule : objectRules) {
			if (objectRule.includedInSubsystem(cmSubsystem))
				return true
		}
		
		if (cmSubsystem.specialSubsystemType != CmSpecialSubsystemType.EMPTY)
			return false;
			
		if (subsystems.size() != 0)
			return false;
			
		for (CmObjectRule objectRule : objectRules) {
			if (objectRule.subsystems.size() != 0)
				return false
		}

		return true;
	}
	
	refers CmGroup group
}

enum CmSelectionVariant {
	Standart as "Стандартная выборка" = 0
	Custom as "Произвольный алгоритм" = 1
}

class CmObjectRule {
	String name = ""
	
	Boolean isDisabled = "false"
	
	refers MdObject configurationObject
	String configurationObjectName = ""
	derived String configurationObjectFormattedName get {
		var result = "";
		
		if (configurationObjectName.startsWith("Метаданные.Справочники")) {
			result = "Справочник." + configurationObjectName.split("[.]").get(2);
		
		} else if (configurationObjectName.startsWith("Метаданные.Документы")) {
			result = "Документ." + configurationObjectName.split("[.]").get(2);
			
		} else if (configurationObjectName.startsWith("Метаданные.Перечисления")) {
			result = "Перечисление." + configurationObjectName.split("[.]").get(2);
			
		} else if (configurationObjectName.startsWith("Метаданные.ПланыВидовХарактеристик")) {
			result = "ПланВидовХарактеристик." + configurationObjectName.split("[.]").get(2);
			
		} else if (configurationObjectName.startsWith("Метаданные.ПланыВидовРасчета")) {
			result = "ПланВидовРасчета." + configurationObjectName.split("[.]").get(2);
			
		} else if (configurationObjectName.startsWith("Метаданные.РегистрыСведений")) {
			result = "РегистрСведений." + configurationObjectName.split("[.]").get(2);
			
		}
		
		return result;
	}

	String formatObject = ""
	
	Boolean forSending = "false"
	Boolean forReceiving = "false"
	
	Boolean forGroup = "false"
	
	contains CmAttributeRule[] attributeRules

	String onSendingEvent = ""
	derived String onSendingEventPrefix get {
		return "Процедура ПКО_&ИмяПКО_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)"
			.replace("&ИмяПКО", name);
	}
	String onSendingEventSuffix = "КонецПроцедуры"
	op String getOnSendingEventText() {
		var result = onSendingEventPrefix + System.lineSeparator()
			+ onSendingEvent + System.lineSeparator()
			+ onSendingEventSuffix + System.lineSeparator();
		return result;
	}
	
	String beforeReceivingEvent = ""
	derived String beforeReceivingEventPrefix get {
		return "Процедура ПКО_&ИмяПКО_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)"
			.replace("&ИмяПКО", name);
	}
	String beforeReceivingEventSuffix = "КонецПроцедуры"
	op String getBeforeReceivingEventText() {
		var result = beforeReceivingEventPrefix + System.lineSeparator()
			+ beforeReceivingEvent + System.lineSeparator()
			+ beforeReceivingEventSuffix + System.lineSeparator();
		return result;
	}
	
	String onReceivingEvent = ""
	derived String onReceivingEventPrefix get {
		return "Процедура ПКО_&ИмяПКО_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)"
			.replace("&ИмяПКО", name);
	}
	String onReceivingEventSuffix = "КонецПроцедуры"
	op String getOnReceivingEventText() {
		var result = onReceivingEventPrefix + System.lineSeparator()
			+ onReceivingEvent + System.lineSeparator()
			+ onReceivingEventSuffix + System.lineSeparator();
		return result;
	}

	refers CmAlgorithm afterReceivingAlgorithm

	CmIdentificationVariant identificationVariant
	
	String[] identificationFields
	
	refers CmSubsystem[] subsystems
	
	op Boolean includedInSubsystem(CmSubsystem cmSubsystem) {
		if (cmSubsystem === null || cmSubsystem.specialSubsystemType == CmSpecialSubsystemType.ALL)
			return true;
		
		for (CmSubsystem subsystem : subsystems) {
			if (subsystem.equals(cmSubsystem))
				return true;
		}

		if (cmSubsystem.specialSubsystemType != CmSpecialSubsystemType.EMPTY)
			return false;
			
		if (subsystems.size() != 0)
			return false;
			
		return true;
	}
}

enum CmIdentificationVariant {
	UUID as "По уникальному идентификатору" = 0
	SearchFields as "По полям поиска" = 1
	UUIDThenSearchFields as "Сначала по уникальному идентификатору потом по полям поиска" = 2
}

class CmAttributeRule {
	String configurationTabularSection = ""
	String configurationAttribute = ""
	
	op String getConfigurationAttributeFullName() {
		var result = configurationAttribute;
		if (configurationTabularSection.length != 0)
			result = configurationTabularSection + "." + result;
		return result;
	}

	String formatTabularSection = ""
	String formatAttribute = ""
	op String getFormatAttributeFullName() {
		var result = formatAttribute;
		if (formatTabularSection.length != 0)
			result = formatTabularSection + "." + result;
		return result;
	}
	
	refers CmObjectRule objectRule
	
	Boolean isCustomRule = "false"
}

class CmPredefined {
	String name = ""
	
	refers MdObject configurationObject
	String configurationObjectName = ""
	derived String configurationObjectFormattedName get {
		var result = "";
		
		if (configurationObjectName.startsWith("Метаданные.Справочники")) {
			result = "Справочник." + configurationObjectName.split("[.]").get(2);
		
		} else if (configurationObjectName.startsWith("Метаданные.Документы")) {
			result = "Документ." + configurationObjectName.split("[.]").get(2);
			
		} else if (configurationObjectName.startsWith("Метаданные.Перечисления")) {
			result = "Перечисление." + configurationObjectName.split("[.]").get(2);
			
		} else if (configurationObjectName.startsWith("Метаданные.ПланыВидовХарактеристик")) {
			result = "ПланВидовХарактеристик." + configurationObjectName.split("[.]").get(2);
			
		} else if (configurationObjectName.startsWith("Метаданные.ПланыВидовРасчета")) {
			result = "ПланВидовРасчета." + configurationObjectName.split("[.]").get(2);
			
		} else if (configurationObjectName.startsWith("Метаданные.РегистрыСведений")) {
			result = "РегистрСведений." + configurationObjectName.split("[.]").get(2);
			
		}
		
		return result;
	}

	String formatObject = ""
	
	Boolean forSending = "false"
	Boolean forReceiving = "false"
	
	contains CmPredefinedMap[] predefinedMaps
	
	op Boolean predefinedMapExists(Object configurationValue, Object formatValue) {
		for (CmPredefinedMap predefinedMap : predefinedMaps) {
			if (configurationValue.equals(predefinedMap.configurationValue)
				&& formatValue.equals(predefinedMap.formatValue)
			) return true
		}
		return false;
	}
}

class CmPredefinedMap {
	Object configurationValue
	op String getConfigurationValueName() {
		if (configurationValue === null) {
			return "";
		}

		var configurationValueName = configurationValue.toString();
		configurationValueName = configurationValueName.substring(configurationValueName.indexOf(".") + 1);
		configurationValueName = configurationValueName.substring(configurationValueName.indexOf(".") + 1);
		return configurationValueName;
	}
	Object formatValue
	op String getFormatValueName() {
		if (formatValue === null) {
			return "";
		}

		return formatValue.toString();
	}
}

class CmAlgorithm {
	String name = ""
	
	CmMethodType methodType
	String params = ""
	Boolean isExport = "false"
	String body = ""
	derived String prefix get {
		var prefix = "";
		
		if (methodType == CmMethodType.PROCEDURE) {
			prefix = "Процедура";
		}
		else {
			prefix = "Функция";
		}
		
		var export = "";
		if (isExport)
			export = " Экспорт";
		
		return prefix + " " + name + "(" + params + ")" + export;
	}
	derived String suffix get {
		var result = "";
		
		if (methodType == CmMethodType.PROCEDURE) {
			result = "КонецПроцедуры";
		}
		else {
			result = "КонецФункции";
		}
		
		return result;
	}
	op String getAlgorithmText() {
		var result = prefix + System.lineSeparator()
			+ body + System.lineSeparator()
			+ suffix + System.lineSeparator();
		
		return result;
	}
}

enum CmMethodType {
	Procedure as "Процедура" = 0
	Function as "Функция" = 1
}

class CmSubsystem {
	refers MdObject subsystem
	
	derived String name get {
		var name = "";
		
		if (specialSubsystemType == CmSpecialSubsystemType.SUBSYSTEM) {
			name = subsystem.getSynonym().get("ru");
		} else {
			name = specialSubsystemType.getLiteral();
		}
	
		return name;
	}
	
	CmSpecialSubsystemType specialSubsystemType
}

enum CmSpecialSubsystemType {
	Subsystem as "<Подсистема>" = 0
	All as "<Все подсистемы>" = 1
	Main as "Главное" = 2
	Empty as "<Остальное>" = 3
}

class CmGroup {
	String name
}
