@GenModel(publicConstructors="true", featureDelegation="Reflective",
	rootExtendsClass="com._1c.g5.v8.bm.core.BmObject", rootExtendsInterface="com._1c.g5.v8.bm.core.IBmObject"
)
package ru.capralow.dt.conversion.plugin.core.cm

import com._1c.g5.v8.dt.metadata.mdclass.Catalog
import com._1c.g5.v8.dt.metadata.mdclass.Document
import com._1c.g5.v8.dt.metadata.mdclass.Enum
import com._1c.g5.v8.dt.metadata.mdclass.ChartOfCharacteristicTypes
import com._1c.g5.v8.dt.metadata.mdclass.ChartOfCalculationTypes
import com._1c.g5.v8.dt.metadata.mdclass.InformationRegister

class ConversionModule {
	String storeVersion = "1"
	
	Object moduleURI
	
	String params
	
	String beforeConvertationEvent = ""
	String
	 beforeConvertationEventPrefix = "Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт"
	String beforeConvertationEventSuffix = "КонецПроцедуры"
	op String getBeforeConvertationEventText() {
		var result = beforeConvertationEventPrefix + System.lineSeparator()
			+ beforeConvertationEvent + System.lineSeparator()
			+ beforeConvertationEventSuffix + System.lineSeparator();
		return result;
	}
	
	String afterConvertationEvent = ""
	String afterConvertationEventPrefix = "Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт"
	String afterConvertationEventSuffix = "КонецПроцедуры"
	op String getAfterConvertationEventText() {
		var result = afterConvertationEventPrefix + System.lineSeparator()
			+ afterConvertationEvent + System.lineSeparator()
			+ afterConvertationEventSuffix + System.lineSeparator();
		return result;
	}
	
	String beforeFillingEvent = ""
	String beforeFillingEventPrefix = "Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт"
	String beforeFillingEventSuffix = "КонецПроцедуры"
	op String getBeforeFillingEventText() {
		var result = beforeFillingEventPrefix + System.lineSeparator()
			+ beforeFillingEvent + System.lineSeparator()
			+ beforeFillingEventSuffix + System.lineSeparator();
		return result;
	}
	
	contains CmDataRule[] dataRules opposite conversionModule
	
	op CmDataRule getDataRule(String ruleName) {
		for (CmDataRule dataRule : dataRules) {
			if (ruleName == dataRule.name) return dataRule
		}
		return null;
	}
	
	op Object[] getSendingDataRules() {
		val result = newBasicEList()

		for (CmDataRule dataRule : dataRules) {
			if (dataRule.forSending)
				result.add(dataRule)
		}
		return result
	}

	op Object[] getReceivingDataRules() {
		val result = newBasicEList()

		for (CmDataRule dataRule : dataRules) {
			if (dataRule.forReceiving)
				result.add(dataRule)
		}
		return result
	}

	contains CmObjectRule[] objectRules opposite conversionModule
	op CmObjectRule getObjectRule(String ruleName) {
		for (CmObjectRule objectRule : objectRules) {
			if (ruleName == objectRule.name) return objectRule
		}
		return null;
	}

	op Object[] getSendingObjectRules() {
		val result = newBasicEList()

		for (CmObjectRule objectRule : objectRules) {
			if (objectRule.forSending)
				result.add(objectRule)
		}
		return result
	}

	op Object[] getReceivingObjectRules() {
		val result = newBasicEList()

		for (CmObjectRule objectRule : objectRules) {
			if (objectRule.forReceiving)
				result.add(objectRule)
		}
		return result
	}

	contains CmPredefined[] predefineds opposite conversionModule

	contains CmAlgorithm[] algorithms opposite conversionModule
	op CmAlgorithm getAlgorithm(String algorithmName) {
		for (CmAlgorithm algorithm : algorithms) {
			if (algorithmName == algorithm.name) return algorithm
		}
		return null;
	}

	op String getAllAlgorithmsText(String algorithmName) {
		var result = ""

		for (CmAlgorithm algorithm : algorithms) {
			if (algorithmName != algorithm.name)
				result += algorithm.getAlgorithmText() + System.lineSeparator();

		}

		return result;
	}
	
	op String getModuleTextV2() {
		var ls = System.lineSeparator();
		var result = "";

		result += "#Область ПроцедурыКонвертации" + ls;

		result += getBeforeConvertationEventText()
		result += ls;

		result += getAfterConvertationEventText();
		result += ls;

		result += getBeforeFillingEventText();
		result += ls;

		var text =
"// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Число - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат \"&ВерсияФорматаМенеджераОбмена\";
КонецФункции"
		.replace("&ВерсияФорматаМенеджераОбмена", storeVersion);
		result += text + ls;
		result += ls;

		result += "#КонецОбласти" + ls;


		result += "#Область ПОД" + ls;

		var dataRulesDeclarationText = "";
		dataRulesDeclarationText += "	Если НаправлениеОбмена = \"Отправка\" Тогда" + ls;
		dataRulesDeclarationText += "		Если ПравилаОбработкиДанных.Колонки.Найти(\"ОчисткаДанных\") = Неопределено Тогда" + ls;
		dataRulesDeclarationText += "			ПравилаОбработкиДанных.Колонки.Добавить(\"ОчисткаДанных\");" + ls;
		dataRulesDeclarationText += "		КонецЕсли;" + ls;
		for (CmDataRule dataRule : dataRules) {
			if (dataRule.forSending)
		dataRulesDeclarationText += "		ДобавитьПОД_" + dataRule.name + "(ПравилаОбработкиДанных);" + ls;
		}
		dataRulesDeclarationText += "	ИначеЕсли НаправлениеОбмена = \"Получение\" Тогда" + ls;
		for (CmDataRule dataRule : dataRules) {
			if (dataRule.forReceiving)
		dataRulesDeclarationText += "		ДобавитьПОД_" + dataRule.name + "(ПравилаОбработкиДанных);" + ls;
		}
		dataRulesDeclarationText += "	КонецЕсли;";

		text =
"// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка (\"Отправка\" либо \"Получение\").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
&ТелоПроцедуры
КонецПроцедуры"
		.replace("&ТелоПроцедуры", dataRulesDeclarationText);
		result += text + ls + ls;

		result += "#Область Отправка" + ls;

		for (CmDataRule dataRule : dataRules) {
			if (dataRule.forSending) {
				var objectRulesText = "";
			
				for (CmObjectRule objectRule : dataRule.objectRules) {
					if (!objectRulesText.equals("")) {
						objectRulesText += ls;
					}
					objectRulesText += "	ПравилоОбработки.ИспользуемыеПКО.Добавить(\"" + objectRule.name + "\");";
				}
			
				var dataRuleEventsText = "";
				if (dataRule.onProcessingEvent.length != 0)
					dataRuleEventsText += ls + dataRule.onProcessingEventText;
				if (dataRule.dataSelectionEvent.length != 0)
					dataRuleEventsText += ls + dataRule.dataSelectionEventText;

				result += "#Область &ИмяПОД".replaceAll("&ИмяПОД", dataRule.name) + ls;

				text =
"Процедура ДобавитьПОД_&ИмяПОД(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = \"&ИмяПОД\";
	ПравилоОбработки.ОбъектВыборкиМетаданные = &ОбъектВыборкиМетаданные;
	ПравилоОбработки.ПриОбработке            = \"&ПриОбработке\";
	ПравилоОбработки.ВыборкаДанных           = \"&ВыборкаДанных\";
	ПравилоОбработки.ОчисткаДанных           = &ОчисткаДанных;
&ЗаполнениеМассиваПравил
КонецПроцедуры"
				.replaceAll("&ИмяПОД", dataRule.name)
				.replace("&ОбъектВыборкиМетаданные", dataRule.getConfigurationObjectName())
				.replace("ПравилоОбработки.ОбъектВыборкиМетаданные = ;", "ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;")
				.replace("&ПриОбработке", dataRule.getOnProcessingEventDeclaration())
				.replace("	ПравилоОбработки.ПриОбработке            = \"\";", "---")
				.replace("&ВыборкаДанных", dataRule.getDataSelectionEventDeclaration())
				.replace("	ПравилоОбработки.ВыборкаДанных           = \"\";", "---")
				.replace("&ОчисткаДанных", dataRule.getDataCleaningDeclaration())
				.replace("&ЗаполнениеМассиваПравил", objectRulesText)
				.replaceAll("---\\r\\n|---\\r|---\\n", "");
				result += text + ls;
				result += dataRuleEventsText;
				result += "#КонецОбласти" + ls;
			}
		}

		result += "#КонецОбласти" + ls;

		result += "#Область Получение" + ls;

		for (CmDataRule dataRule : dataRules) {
			if (dataRule.forReceiving) {
				var objectRulesText = "";
			
				for (CmObjectRule objectRule : dataRule.objectRules) {
					if (!objectRulesText.equals("")) {
						objectRulesText += ls;
					}
					objectRulesText += "	ПравилоОбработки.ИспользуемыеПКО.Добавить(\"" + objectRule.name + "\");";
				}
			
				var dataRuleEventsText = "";
				if (dataRule.onProcessingEvent.length != 0)
					dataRuleEventsText += ls + dataRule.onProcessingEventText;
			
				result += "#Область &ИмяПОД".replaceAll("&ИмяПОД", dataRule.name);
				result += ls;

				text =
"Процедура ДобавитьПОД_&ИмяПОД(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = \"&ИмяПОД\";
	ПравилоОбработки.ОбъектВыборкиФормат     = \"&ОбъектВыборкиФормат\";
	ПравилоОбработки.ПриОбработке            = \"&ПриОбработке\";
&ЗаполнениеМассиваПравил
КонецПроцедуры"
				.replaceAll("&ИмяПОД", dataRule.name)
				.replace("&ОбъектВыборкиФормат", dataRule.getFormatObjectName())
				.replace("&ПриОбработке", dataRule.getOnProcessingEventDeclaration())
				.replace("	ПравилоОбработки.ПриОбработке            = \"\";", "---")
				.replace("&ЗаполнениеМассиваПравил", objectRulesText)
				.replaceAll("---\\r\\n|---\\r|---\\n", "");
				result += text + ls;
				result += dataRuleEventsText;
				result += "#КонецОбласти" + ls;
			}
		}

		result += "#КонецОбласти" + ls;

		result += "#КонецОбласти" + ls;

		return result;
		
	}

	op String getModuleText() {
		if (storeVersion == "1") {
			return getModuleTextV2();
		}
		else
			return getModuleTextV2();
		
	}

}

class CmDataRule {
	container ConversionModule conversionModule opposite dataRules
	
	String name = ""
	
	Boolean isDisabled = "false"
	
	Object configurationObject
	derived String configurationObjectName get {
		if (configurationObject === null) {
			return "";
		}

		var result = configurationObject.toString();
		if (configurationObject instanceof Catalog) {
			result = "СправочникСсылка." + (configurationObject as Catalog).getName();
			
		} else if (configurationObject instanceof Document) {
			result = "ДокументСсылка." + (configurationObject as Document).getName();
			
		} else if (configurationObject instanceof Enum) {
			result = "ПеречислениеСсылка." + (configurationObject as Enum).getName();
			
		} else if (configurationObject instanceof ChartOfCharacteristicTypes) {
			result = "ПланВидовХарактеристикСсылка." + (configurationObject as ChartOfCharacteristicTypes).getName();
			
		} else if (configurationObject instanceof ChartOfCalculationTypes) {
			result = "ПланВидовРасчетаСсылка." + (configurationObject as ChartOfCalculationTypes).getName();
			
		} else if (configurationObject instanceof InformationRegister) {
			result = "РегистрСведенийНаборЗаписей." + (configurationObject as InformationRegister).getName();
			
		}

		return result;
	}
	Object formatObject
	op String getFormatObjectName() {
		if (formatObject === null) {
			return "";
		}

		return formatObject.toString();
	}
	
	Boolean forSending = "false"
	Boolean forReceiving = "false"
	
	CmSelectionVariant selectionVariant
	
	String onProcessingEvent = ""
	derived String onProcessingEventPrefix get {
		if (forSending) {
			return "Процедура ПОД_&ИмяПОД_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)"
			.replace("&ИмяПОД", name);
			
		} else
			return "Процедура ПОД_&ИмяПОД_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)"
			.replace("&ИмяПОД", name);
	}
	String onProcessingEventSuffix = "КонецПроцедуры"
	op String getOnProcessingEventText() {
		var result = onProcessingEventPrefix + System.lineSeparator()
			+ onProcessingEvent + System.lineSeparator()
			+ onProcessingEventSuffix + System.lineSeparator();
		return result;
	}
	op String getOnProcessingEventDeclaration() {
		if (onProcessingEvent.length == 0)
			return ""
		else
			return "ПОД_&ИмяПОД_ПриОбработке".replace("&ИмяПОД", name);
	}
	
	String dataSelectionEvent = ""
	derived String dataSelectionEventPrefix get {
		return "Функция ПОД_&ИмяПОД_ВыборкаДанных(КомпонентыОбмена)"
			.replace("&ИмяПОД", name);
	}
	String dataSelectionEventSuffix = "КонецФункции"
	op String getDataSelectionEventText() {
		var result = dataSelectionEventPrefix + System.lineSeparator()
			+ dataSelectionEvent + System.lineSeparator()
			+ dataSelectionEventSuffix + System.lineSeparator();
		return result;
	}
	op String getDataSelectionEventDeclaration() {
		if (dataSelectionEvent.length == 0)
			return ""
		else
			return "ПОД_&ИмяПОД_ВыборкаДанных".replace("&ИмяПОД", name);
	}
	
	Boolean isDataCleaning = "false"
	op String getDataCleaningDeclaration() {
		if (isDataCleaning)
			return "Истина"
		else
			return "Ложь";
	}
	
	refers CmObjectRule[] objectRules
}

enum CmSelectionVariant {
	Standart as "Стандартная выборка" = 0
	Custom as "Произвольный алгоритм" = 1
}

class CmObjectRule {
	container ConversionModule conversionModule opposite objectRules
	
	String name = ""
	
	Boolean isDisabled = "false"
	
	Object configurationObject
	derived String configurationObjectName get {
		if (configurationObject === null) {
			return "";
		}

		var result = configurationObject.toString();
		if (configurationObject instanceof Catalog) {
			result = "СправочникСсылка." + (configurationObject as Catalog).getName();
			
		} else if (configurationObject instanceof Document) {
			result = "ДокументСсылка." + (configurationObject as Document).getName();
			
		} else if (configurationObject instanceof Enum) {
			result = "ПеречислениеСсылка." + (configurationObject as Enum).getName();
			
		} else if (configurationObject instanceof ChartOfCharacteristicTypes) {
			result = "ПланВидовХарактеристикСсылка." + (configurationObject as ChartOfCharacteristicTypes).getName();
			
		} else if (configurationObject instanceof ChartOfCalculationTypes) {
			result = "ПланВидовРасчетаСсылка." + (configurationObject as ChartOfCalculationTypes).getName();
			
		} else if (configurationObject instanceof InformationRegister) {
			result = "РегистрСведенийНаборЗаписей." + (configurationObject as InformationRegister).getName();
			
		}

		return result;
	}
	Object formatObject
	op String getFormatObjectName() {
		if (formatObject === null) {
			return "";
		}

		return formatObject.toString();
	}
	
	Boolean forSending = "false"
	Boolean forReceiving = "false"
	
	Boolean forGroup = "false"
	
	contains CmAttributeRule[] attributeRules

	String onSendingEvent = ""
	derived String onSendingEventPrefix get {
		return "Процедура ПКО_&ИмяПКО_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)"
			.replace("&ИмяПКО", name);
	}
	String onSendingEventSuffix = "КонецПроцедуры"
	op String getOnSendingEventText() {
		var result = onSendingEventPrefix + System.lineSeparator()
			+ onSendingEvent + System.lineSeparator()
			+ onSendingEventSuffix + System.lineSeparator();
		return result;
	}
	
	String beforeReceivingEvent = ""
	derived String beforeReceivingEventPrefix get {
		return "Процедура ПКО_&ИмяПКО_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)"
			.replace("&ИмяПКО", name);
	}
	String beforeReceivingEventSuffix = "КонецПроцедуры"
	op String getBeforeReceivingEventText() {
		var result = beforeReceivingEventPrefix + System.lineSeparator()
			+ beforeReceivingEvent + System.lineSeparator()
			+ beforeReceivingEventSuffix + System.lineSeparator();
		return result;
	}
	
	String onReceivingEvent = ""
	derived String onReceivingEventPrefix get {
		return "Процедура ПКО_&ИмяПКО_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)"
			.replace("&ИмяПКО", name);
	}
	String onReceivingEventSuffix = "КонецПроцедуры"
	op String getOnReceivingEventText() {
		var result = onReceivingEventPrefix + System.lineSeparator()
			+ onReceivingEvent + System.lineSeparator()
			+ onReceivingEventSuffix + System.lineSeparator();
		return result;
	}

	refers CmAlgorithm afterReceivingAlgorithm

	CmIdentificationVariant identificationVariant
	
	String[] identificationFields
}

enum CmIdentificationVariant {
	UUID as "По уникальному идентификатору" = 0
	SearchFields as "По полям поиска" = 1
	UUIDThenSearchFields as "Сначала по уникальному идентификатору потом по полям поиска" = 2
}

class CmAttributeRule {
	String configurationTabularSectionName = ""
	String configurationAttributeName = ""
	op String getConfigurationAttributeFullName() {
		var result = configurationAttributeName;
		if (configurationTabularSectionName.length != 0)
			result = configurationTabularSectionName + "." + result;
		return result;
	}

	String formatTabularSectionName = ""
	String formatAttributeName = ""
	op String getFormatAttributeFullName() {
		var result = formatAttributeName;
		if (formatTabularSectionName.length != 0)
			result = formatTabularSectionName + "." + result;
		return result;
	}
	
	refers CmObjectRule objectRule
	
	Boolean isCustomRule = "false"
}

class CmPredefined {
	container ConversionModule conversionModule opposite predefineds
	
	String name = ""
	
	Object configurationObject
	derived String configurationObjectName get {
		if (configurationObject === null) {
			return "";
		}

		var result = configurationObject.toString();
		if (configurationObject instanceof Catalog) {
			result = "СправочникСсылка." + (configurationObject as Catalog).getName();
			
		} else if (configurationObject instanceof Document) {
			result = "ДокументСсылка." + (configurationObject as Document).getName();
			
		} else if (configurationObject instanceof Enum) {
			result = "ПеречислениеСсылка." + (configurationObject as Enum).getName();
			
		} else if (configurationObject instanceof ChartOfCharacteristicTypes) {
			result = "ПланВидовХарактеристикСсылка." + (configurationObject as ChartOfCharacteristicTypes).getName();
			
		} else if (configurationObject instanceof ChartOfCalculationTypes) {
			result = "ПланВидовРасчетаСсылка." + (configurationObject as ChartOfCalculationTypes).getName();
			
		} else if (configurationObject instanceof InformationRegister) {
			result = "РегистрСведенийНаборЗаписей." + (configurationObject as InformationRegister).getName();
			
		}

		return result;
	}
	Object formatObject
	op String getFormatObjectName() {
		if (formatObject === null) {
			return "";
		}

		return formatObject.toString();
	}
	
	Boolean forSending = "false"
	Boolean forReceiving = "false"
	
	contains CmPredefinedMap[] predefinedMaps
	
	op Boolean predefinedMapExists(Object configurationValue, Object formatValue) {
		for (CmPredefinedMap predefinedMap : predefinedMaps) {
			if (configurationValue == predefinedMap.configurationValue
				&& formatValue == predefinedMap.formatValue
			) return true
		}
		return false;
	}

}

class CmPredefinedMap {
	Object configurationValue
	op String getConfigurationValueName() {
		if (configurationValue === null) {
			return "";
		}

		var configurationValueName = configurationValue.toString();
		configurationValueName = configurationValueName.substring(configurationValueName.indexOf(".") + 1);
		configurationValueName = configurationValueName.substring(configurationValueName.indexOf(".") + 1);
		return configurationValueName;
	}
	Object formatValue
	op String getFormatValueName() {
		if (formatValue === null) {
			return "";
		}

		return formatValue.toString();
	}
	
	refers CmPredefined predefined
}

class CmAlgorithm {
	container ConversionModule conversionModule opposite algorithms
	
	String name = ""
	
	CmMethodType methodType
	String params = ""
	Boolean isExport = "false"
	String body = ""
	derived String prefix get {
		var prefix = "";
		
		if (methodType == CmMethodType.PROCEDURE) {
			prefix = "Процедура";
		}
		else {
			prefix = "Функция";
		}
		
		var export = "";
		if (isExport)
			export = " Экспорт";
		
		return prefix + " " + name + "(" + params + ")" + export;
	}
	derived String suffix get {
		var result = "";
		
		if (methodType == CmMethodType.PROCEDURE) {
			result = "КонецПроцедуры";
		}
		else {
			result = "КонецФункции";
		}
		
		return result;
	}
	op String getAlgorithmText() {
		var result = prefix + System.lineSeparator()
			+ body + System.lineSeparator()
			+ suffix + System.lineSeparator();
		
		return result;
	}
}

enum CmMethodType {
	Procedure as "Процедура" = 0
	Function as "Функция" = 1
}
