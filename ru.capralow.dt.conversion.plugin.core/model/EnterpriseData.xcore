@GenModel(loadInitialization="false", literalsInterface="true", nonNLSMarkers="true", prefix="ed", updateClasspath="false")
@Ecore(nsPrefix="ed", nsURI="http://ru.capralow.dt.conversion.plugin.core.ed.model")
package ru.capralow.dt.conversion.plugin.core.ed.model

import com._1c.g5.v8.dt.metadata.mdclass.XDTOPackage
import com._1c.g5.v8.dt.xdto.model.Enumeration
import com._1c.g5.v8.dt.xdto.model.ObjectType
import com._1c.g5.v8.dt.xdto.model.Property
import com._1c.g5.v8.dt.xdto.model.ValueType

class EnterpriseData {
	String version = ""
	refers XDTOPackage xdtoPackage
	
	contains EdDefinedType[] definedTypes
	contains EdDefinedType[] refTypes
	contains EdObject[] catalogs
	contains EdObject[] documents
	contains EdEnum[] enums
	contains EdObject[] registers

	contains EdObject[] unknownObjects
	
	op EdProperty getProperty(String objectName, String propertyName) {
		for (EdObject fpCatalog : catalogs) {
			if (fpCatalog.getMainName.equals(objectName)) {
				var property = fpCatalog.getProperty(propertyName);
				if (property === null)
					return null;
				
				return property;
			}
		}
		for (EdObject fpDocument : documents) {
			if (fpDocument.getMainName.equals(objectName)) {
				var property = fpDocument.getProperty(propertyName);
				if (property === null)
					return null;
				
				return property;
			}
		}
		for (EdObject fpRegister : registers) {
			if (fpRegister.getMainName.equals(objectName)) {
				var property = fpRegister.getProperty(propertyName);
				if (property === null)
					return null;
				
				return property;
			}
		}
		
		return null;
	}
	
	op EdObject getObject(String name) {
		for (EdObject fpCatalog : catalogs) {
			if (fpCatalog.getMainName.equals(name))
				return fpCatalog;
			
		}
		for (EdObject fpDocument : documents) {
			if (fpDocument.getMainName.equals(name))
				return fpDocument;

		}
		for (EdObject fpRegister : registers) {
			if (fpRegister.getMainName.equals(name))
				return fpRegister;

		}
		
		return null;
	}
	
	op EdDefinedType getDefinedType(String name) {
		for (EdDefinedType fpDefinedType : definedTypes) {
			if (fpDefinedType.getName.equals(name))
				return fpDefinedType;
		}
		
		return null;
	}
	
	op EdEnum getEnum(String name) {
		for (EdEnum fpEnum : enums) {
			if (fpEnum.getName.equals(name))
				return fpEnum;
		}
		
		return null;
	}
}

class EdDefinedType {
	String name = ""

	contains EdType[] types
}

class EdType {
	String name = ""
	
	String propertyType = ""
}

class EdObject {
	String mainName = ""
	String keysName = ""
	
	refers ObjectType xdtoMainObject
	refers ObjectType xdtoKeysObject

	contains EdProperty[] mainProperties
	op EdProperty getProperty(String name) {
		for (EdProperty edProperty : mainProperties) {
			if (name.equals(edProperty.getName)) return edProperty
		}
		return null;
	}
	
	op EdProperty[] getKeyProperties() {
		val keyProperties = newBasicEList();
		for (EdProperty edProperty : mainProperties) {
			if (edProperty.isKey)
				keyProperties.add(edProperty);
		}
		return keyProperties;
	}
}

class EdProperty {
	String name = ""

	refers Property xdtoProperty

	Boolean isKey = "false"
	
	String ^type = ""
	
	Boolean required = "false"
}

class EdEnum {
	refers ValueType object
	String name = ""
	
	refers Enumeration[] enumerations
}
