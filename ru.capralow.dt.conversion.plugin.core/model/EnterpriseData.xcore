@GenModel(loadInitialization="false", literalsInterface="true", nonNLSMarkers="true", prefix="ed", updateClasspath="false")
@Ecore(nsPrefix="ed", nsURI="http://ru.capralow.dt.conversion.plugin.core.ed.model")
package ru.capralow.dt.conversion.plugin.core.ed.model

import com._1c.g5.v8.dt.xdto.model.Enumeration
import com._1c.g5.v8.dt.xdto.model.ObjectType
import com._1c.g5.v8.dt.xdto.model.Property
import com._1c.g5.v8.dt.xdto.model.ValueType

class EnterpriseData {
	String version = ""
	
	contains EdDefinedType[] definedTypes
	contains EdDefinedType[] refTypes
	contains EdObject[] catalogs
	contains EdObject[] documents
	contains EdEnum[] enums
	contains EdObject[] registers
	
	op EdProperty getProperty(String formatObjectName, String formatPropertyFullName) {
		for (EdObject fpCatalog : catalogs) {
			if (fpCatalog.getName.equals(formatObjectName)) {
				var property = fpCatalog.getProperty(formatPropertyFullName);
				if (property === null)
					return null;
				
				return property;
			}
		}
		for (EdObject fpDocument : documents) {
			if (fpDocument.getName.equals(formatObjectName)) {
				var property = fpDocument.getProperty(formatPropertyFullName);
				if (property === null)
					return null;
				
				return property;
			}
		}
		for (EdObject fpRegister : registers) {
			if (fpRegister.getName.equals(formatObjectName)) {
				var property = fpRegister.getProperty(formatPropertyFullName);
				if (property === null)
					return null;
				
				return property;
			}
		}
		
		return null;
	}
	
	op EdObject getFormatObject(String formatObjectName) {
		for (EdObject fpCatalog : catalogs) {
			if (fpCatalog.getName.equals(formatObjectName))
				return fpCatalog;
			
		}
		for (EdObject fpDocument : documents) {
			if (fpDocument.getName.equals(formatObjectName))
				return fpDocument;

		}
		for (EdObject fpRegister : registers) {
			if (fpRegister.getName.equals(formatObjectName))
				return fpRegister;

		}
		
		return null;
	}
	
	op EdDefinedType getDefinedType(String name) {
		for (EdDefinedType fpDefinedType : definedTypes) {
			if (fpDefinedType.getName.equals(name))
				return fpDefinedType;
		}
		
		return null;
	}
	
	op EdEnum getEnum(String name) {
		for (EdEnum fpEnum : enums) {
			if (fpEnum.getName.equals(name))
				return fpEnum;
		}
		
		return null;
	}
}

class EdDefinedType {
	String name = ""

	contains EdType[] types
}

class EdObject {
	refers ObjectType object
	String name = ""
	
	contains EdProperty[] properties
	op EdProperty getProperty(String propertyName) {
		for (EdProperty fpProperty : properties) {
			if (propertyName.equals(fpProperty.getName)) return fpProperty
		}
		return null;
	}
	
	refers ObjectType keysObject
	String keysObjectName = ""
	contains EdProperty[] keyProperties
	
}

class EdEnum {
	refers ValueType object
	String name = ""
	
	refers Enumeration[] enumerations
}

class EdProperty {
	refers Property property
	String name = ""
	Boolean isKey
	
	String propertyType = ""
	
	Boolean required
}

class EdType {
	String name = ""
	
	String propertyType = ""
}
